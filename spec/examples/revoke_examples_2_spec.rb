require 'helpers/spec_helper'

describe Pubnub::Revoke do
  around :each do |example|
    @fired = false

    @callback = -> (_envelope) do
      @fired = true
    end

    @pubnub = Pubnub.new(
      publish_key: "pub-a-mock-key",
      subscribe_key: "sub-a-mock-key",
      secret_key: "sec-a-mock-key",
      user_id: "ruby-test-uuid-client-one",
      auth_key: "ruby-test-auth-client-one",
    )

    example.run_with_retry retry: 10
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/21", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193086"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hD8Ycg65kFBQAD3udtTyk946HlC3N3KkeM4I2YIWFsE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/22", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193087"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kFJBHKDO0H-yg_sMHbf6hOd9DSLvrBpJhhP9vpSWFD0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/20", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193087"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kFJBHKDO0H-yg_sMHbf6hOd9DSLvrBpJhhP9vpSWFD0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/18", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193088"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wxzFKRqZ1wfKbzvXHfqFW8mnWZN9YoIoKm1Pjwq9ThE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/19", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193088"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wxzFKRqZ1wfKbzvXHfqFW8mnWZN9YoIoKm1Pjwq9ThE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/29", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193089"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MWZfOTrPy9pGDpWwAWq_l_mYTV_TQEUE2voLBz2oYyU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/27", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193089"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MWZfOTrPy9pGDpWwAWq_l_mYTV_TQEUE2voLBz2oYyU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/28", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193090"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PKPI7PZwnnTXFUF-_8ichtm2br7hEA_jPviEjJx4pO8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/26", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193090"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PKPI7PZwnnTXFUF-_8ichtm2br7hEA_jPviEjJx4pO8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/24", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193091"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LOh1xaFAtF0jDUqz6gt5j8sbl_KEi58Qra8I00ha0jY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/25", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193092"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L4Pd-VaaUvNryUj1E8EcugSANQXmCMAlxG5TDoIRatI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/35", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193092"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2aMvB6idio_2o6NGYLFOFcr3FO2v_c8cyH-xXqussNM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/33", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193093"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RqQuz5Zxd3dfmAnNcuoPjVSjbhsDksan2UpxLVpdCak="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/34", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193094"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YxsuQBQOilHmalp7oF2VsF8GTGlF68XmMsl1EbyE6Uw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/32", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193094"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YxsuQBQOilHmalp7oF2VsF8GTGlF68XmMsl1EbyE6Uw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/30", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193095"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Er0vZGEt7myZ54z4FoV3NGb9_jFyi7luaU9GxifF_U="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/31", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193095"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Er0vZGEt7myZ54z4FoV3NGb9_jFyi7luaU9GxifF_U="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/41", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193096"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8X2CTLq7nLOVhfN7rSYNYARXrmBH6jYyM5q_Ngnnnws="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/39", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193096"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8X2CTLq7nLOVhfN7rSYNYARXrmBH6jYyM5q_Ngnnnws="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/40", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193097"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xrHjTKVE6mJ9FKVluQcO27jumdVfqshWFYfVsYyG_O0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/38", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193097"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xrHjTKVE6mJ9FKVluQcO27jumdVfqshWFYfVsYyG_O0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/36", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193098"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WQTnW_xUW2O4ryDKt95cXmlR-kXR24PX-X5LBCqcUVo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/37", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193098"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WQTnW_xUW2O4ryDKt95cXmlR-kXR24PX-X5LBCqcUVo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/47", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193099"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gnlOrH1IDrSzK8NtQhz30GDAJ9BoCUslR-2EnbHiLxo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/45", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193099"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gnlOrH1IDrSzK8NtQhz30GDAJ9BoCUslR-2EnbHiLxo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/46", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193100"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OLFyap3Kncq13PQA8lH3SymzpDSDIDf7OnGsn2DqTto="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/44", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193100"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OLFyap3Kncq13PQA8lH3SymzpDSDIDf7OnGsn2DqTto="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/42", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193101"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zNWvMxvZW0TBVj0ntaBobImVRAfWdqiA079ANhidcwE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/43", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193101"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zNWvMxvZW0TBVj0ntaBobImVRAfWdqiA079ANhidcwE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/53", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193102"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_xMKRjyfLfbt_Kf2oWcI1qouWPvEWHLcdwhop0h0hss="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/51", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193102"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_xMKRjyfLfbt_Kf2oWcI1qouWPvEWHLcdwhop0h0hss="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/52", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193103"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZGPZ8IsD8Af0I0YWrkiQRm0eekmNlpLLLJFvBIG_JZc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/50", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193104"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0xPtr9sIrLotHF7x3RtEtGmziZNhurYTirgZou7_lRM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/48", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193104"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0xPtr9sIrLotHF7x3RtEtGmziZNhurYTirgZou7_lRM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/49", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193105"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "leuRUeogBpqFfmsPK0VJ4yU50sCwyxsD5FBB7ADbQEY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/59", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193105"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6ynzEB2c1FLPZ0uSBdjkJDN_yKN1Mac-MnNktmA5uLs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/57", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193106"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YyjfKH_n235T5d54zm6wHSHhnpRatK2CoPSs9RGCAbc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/58", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193106"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YyjfKH_n235T5d54zm6wHSHhnpRatK2CoPSs9RGCAbc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/56", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193107"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ay42Frg0rmGCD2c4LHPgQUzy5bxR8hxalC9mBRlRzhw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/54", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193107"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ay42Frg0rmGCD2c4LHPgQUzy5bxR8hxalC9mBRlRzhw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/55", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193108"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VSmt07B2XrPMRrtd87yrNpaLRtwIP5fLFCCQNw25gHw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/65", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193108"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L3FdJi9BB8-KDL5ZgjL7OKMyXDiGmUoChomH8sjiI-Q="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/63", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193109"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_KJQxCJAAEaN-v3xax3JTpfgiPFRBgSDc8zLdA8sFpw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/64", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193110"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LaMYpeE2qSerCGiMEzFr8I09-oMHviwo9fgxvRql1Ik="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/62", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193110"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LaMYpeE2qSerCGiMEzFr8I09-oMHviwo9fgxvRql1Ik="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/60", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193111"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HK6fcgFVGfskqof7SStroFE9WdI3NMGo7hIvZjtMv2k="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/61", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193111"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HK6fcgFVGfskqof7SStroFE9WdI3NMGo7hIvZjtMv2k="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/71", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193112"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EQzZgt96LVMdttdPQYFltWqiZz1GEtwTKjbScQHsEFo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/69", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193112"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EQzZgt96LVMdttdPQYFltWqiZz1GEtwTKjbScQHsEFo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/70", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193113"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a9IFGtmc3lSnf1WGNg_emdyCbbr8TwEYGZ1ETB36yH0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/68", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193113"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a9IFGtmc3lSnf1WGNg_emdyCbbr8TwEYGZ1ETB36yH0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/66", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193114"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kjlNGbFNJ5wtXUSCXnPoEyIMlmRyVL4Ad0ct4l6nZSc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/67", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193114"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kjlNGbFNJ5wtXUSCXnPoEyIMlmRyVL4Ad0ct4l6nZSc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/185", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193115"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kdxxy9Em-LpEibVO2exBzjzDjTL6wV4BBgtKqgPTftI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/183", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193116"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tT_1n21EGs_BGZAiw29a1Q0BHNoUXTZNA4LFHdwrhYI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/184", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193116"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tT_1n21EGs_BGZAiw29a1Q0BHNoUXTZNA4LFHdwrhYI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/182", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193117"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tXg-7k21RQHgCqG0XtwfMDDd3hl8ruumaHTeakA2x6w="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/180", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193118"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5pmtDQy8m1wvgTyewh5WoChrPGlFInsAdzsuRzo7Y_8="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/181", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193118"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5pmtDQy8m1wvgTyewh5WoChrPGlFInsAdzsuRzo7Y_8="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/191", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193119"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4Sf4wI8R6GMTwyj2h0hG5HsUgQM2NEUP9O_BTeLycZo="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/189", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193119"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4Sf4wI8R6GMTwyj2h0hG5HsUgQM2NEUP9O_BTeLycZo="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/190", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193120"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ybVWCzTz75iV-SCm-d04rkfYYxV_PjTgHBUf3Z2X-_4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/188", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193120"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ybVWCzTz75iV-SCm-d04rkfYYxV_PjTgHBUf3Z2X-_4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/186", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193121"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tf6pMjcZlY1fGQiuddCrgkToluUvqOK7fel4idIdGOs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/187", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193121"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tf6pMjcZlY1fGQiuddCrgkToluUvqOK7fel4idIdGOs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/197", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193122"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jOAOxzVud-0yHRGsugX1S2rkOiHj0WoqHFzyoyGFhNg="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/195", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193123"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IE5CCKHS_TD0V4nWx0Da0gmgtYkEPZEou7ZiPaH4ygg="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/196", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193123"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IE5CCKHS_TD0V4nWx0Da0gmgtYkEPZEou7ZiPaH4ygg="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/194", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193124"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zeDhAaF_Mx1HooifluoH-8aeWzEFpwS5avrMG5FX8OI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/192", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193124"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zeDhAaF_Mx1HooifluoH-8aeWzEFpwS5avrMG5FX8OI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/193", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193125"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-AwQiT-OvsIBz2JOFjIwrPfd7KlxdfLXu9qf7okgPX0="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/203", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193125"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_YCs-GhXvSnGCeC7D-M0Pnwu_gyipL33-4YP2SyDX30="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/201", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193126"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bITGMxclcFt7wLAAOiLBf2AjtS3zTDSnvIMMwtEiv2Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/202", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193126"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bITGMxclcFt7wLAAOiLBf2AjtS3zTDSnvIMMwtEiv2Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/200", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193127"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fP6WBQlxMndJDHtY9YSIMceBnWECu6ZZJKk_FD5TYGk="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/198", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193128"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Sw_b6hwHc6ABqZ-9F4n1TawA8QQTEpw_KG-tIoT8Qfs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/199", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193128"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Sw_b6hwHc6ABqZ-9F4n1TawA8QQTEpw_KG-tIoT8Qfs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/209", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193129"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2zIbNRcox1Fe8y9gKkfV96N5RzcMOuPqr5h7o9YlCbY="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/207", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193129"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2zIbNRcox1Fe8y9gKkfV96N5RzcMOuPqr5h7o9YlCbY="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/208", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193130"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R-bXp4Wb2yGuwGtT_hPBewFEC0pC0Tp7-8GoHFhEfIc="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/206", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193130"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R-bXp4Wb2yGuwGtT_hPBewFEC0pC0Tp7-8GoHFhEfIc="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/204", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193131"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oFevxUkS-bZVMJrpYS7RbmSyVvQ6nRRg758vLjV89-I="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/205", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193132"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ht-bN1k6U7QbWFziPgVrVUNr3nBqbJdcYVzP_MImDWs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/215", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193132"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CeWzX8kGktKxkut_n3Jgd9BtzNjQTBPt8Q_ygXovKkM="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/213", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193133"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YDuw6Bdpy5hbLQDHXus3mLHRBQ_rL7VS9jPtRFuXkXU="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/214", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193133"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YDuw6Bdpy5hbLQDHXus3mLHRBQ_rL7VS9jPtRFuXkXU="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/212", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193134"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "To3Yf9ZY8IMJXhIdwQJYNc_-NQNcYA2t0C7duN-QgZI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/210", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193134"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "To3Yf9ZY8IMJXhIdwQJYNc_-NQNcYA2t0C7duN-QgZI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/211", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193135"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "or-VioKOSafloykK26y_akkgFingf0wymIATgCmpCoc="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/113", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193136"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EsTyHb8Fh9xU9xnB2wt0GlV7J-nayKjUDLePwfFsS4c="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/111", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193136"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EsTyHb8Fh9xU9xnB2wt0GlV7J-nayKjUDLePwfFsS4c="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/112", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193137"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NTyFiMnNhP7HRzYsVdEmQU9SVguWuBS7AsZWqWWu7f0="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/110", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193137"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NTyFiMnNhP7HRzYsVdEmQU9SVguWuBS7AsZWqWWu7f0="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/108", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193138"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_HLQuY6tXdaC12ieTXIMCXeoQ-ZyrywMBKsA5HJ8L0Q="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/109", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193138"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_HLQuY6tXdaC12ieTXIMCXeoQ-ZyrywMBKsA5HJ8L0Q="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/119", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193139"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ej1Kn8k-5XDA1A4cnh55r_XCUql2_uLFv-1ICdEtJhs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/117", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193139"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ej1Kn8k-5XDA1A4cnh55r_XCUql2_uLFv-1ICdEtJhs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/118", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193140"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TFTfFCbuI7nKo3aJ-wj4_UfRLWwB-LWQomqi2oB9OP4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/116", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193141"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W96aqo6NQ_NPvQJDeoOvAlkADiGL7Cu3CdHFp5lAPEs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/114", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193141"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W96aqo6NQ_NPvQJDeoOvAlkADiGL7Cu3CdHFp5lAPEs="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/115", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193142"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uNyjYk_mz7uH1rtJSRJLmFftp9R14SnnxDa_d6Act4g="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/125", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193142"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_K8h-bDYLBoNPBvkM5ajqaETgs-pBaku0h6JJYn53nQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/123", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193143"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ai3trNT8HOGbYtkeSUYRfpe1r2pHo5VQcwcyhn3-6E4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/124", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193143"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ai3trNT8HOGbYtkeSUYRfpe1r2pHo5VQcwcyhn3-6E4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/122", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193144"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ImxiHv5NsLLjpJvuH9syFKwunUL-orbsWjN6jkOM3WY="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/120", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193145"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RbkQCi8BE04yjhA65DpWE4isZ2l1PMQI3p1P9Dh028o="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/121", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193145"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RbkQCi8BE04yjhA65DpWE4isZ2l1PMQI3p1P9Dh028o="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/131", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193146"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cnpn4FsaI_GcYBPwvppfFOKFEEP_RQrwETLBSKZg9QA="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/129", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193146"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cnpn4FsaI_GcYBPwvppfFOKFEEP_RQrwETLBSKZg9QA="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/130", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193147"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TlUa1vVyGHc6zMQejQyF9_7E5N9Q-Yat3fzu07wraa4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/128", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193147"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TlUa1vVyGHc6zMQejQyF9_7E5N9Q-Yat3fzu07wraa4="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/126", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193148"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rFCDAGrD9gXNiTZIjQwgwCgadkO2Jm9Bkt3IFubCzi8="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/127", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193149"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6J9wRzR2O4CGLFicdSSYXkw5qNRAFLlSrwUIAMPfKPA="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/137", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193149"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TzTvd9ihZvFBgx99UaJed_i-rmzjWhvp9imBkDhhsZI="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/135", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193150"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P6p9n5fXskwRcKIRdoiRLZWHR2y6IvRdcPoVbD6KL4c="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/136", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193150"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P6p9n5fXskwRcKIRdoiRLZWHR2y6IvRdcPoVbD6KL4c="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/134", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193151"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QnCMbHRKI5iZI4Y-I5aqp0ZgoxHLaosZl1e8bn4JaOM="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/132", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193151"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QnCMbHRKI5iZI4Y-I5aqp0ZgoxHLaosZl1e8bn4JaOM="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/133", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193152"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gKnuhH1eEN-t3-qVqMpnZZCI21ZYOBVzdlRsxCMzo2U="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/143", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193152"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ts6tOhZUxI3bEzboFwBttRUohkvMJo90xDnx69FbtEg="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/141", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193153"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2WOWbvk4p73s1UrlfiLpYt8mpQvwQgiT3J_2d4CjFQw="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/142", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193154"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gyIIOBm4KaEr2K73OnstQH2vBa3R4hi4jtVHytvBom0="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/140", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193154"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gyIIOBm4KaEr2K73OnstQH2vBa3R4hi4jtVHytvBom0="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/138", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193155"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t6eE7gLE1sN78Xz5ZXt_wfIrdmbEONHFbAxLdswMF94="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/139", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193155"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t6eE7gLE1sN78Xz5ZXt_wfIrdmbEONHFbAxLdswMF94="
      envelope = @pubnub.revoke(channel: "demo", read: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/149", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193156"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P_sBJojpNxD_0ZISheu1JHyx3RxDVBt3i4r9bRXT2qo="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/147", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193156"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P_sBJojpNxD_0ZISheu1JHyx3RxDVBt3i4r9bRXT2qo="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/148", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193157"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "73335HW3-KS_jXa4GYx9Qa_tY7lYWEtJmoA6wpR_QgQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/146", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193158"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YoxewapdusbSYoTnQWqw-gN9ie-Rgul-Jmvx1rrXtIk="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/144", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193158"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YoxewapdusbSYoTnQWqw-gN9ie-Rgul-Jmvx1rrXtIk="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/145", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193159"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "E1DfxgfGaf2N0xA9MxSBShpowj5nZ1OV32nO7gDwfIE="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/155", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193159"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1T0NvAbf7E0g2G02l_KAR2d0aL9ED_EYjCF4EubHQtY="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/153", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193160"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "22QGl7mOA_T4--j2bhf0jrMjG0U1GIjc8nPu8TrK3xI="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/154", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193160"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "22QGl7mOA_T4--j2bhf0jrMjG0U1GIjc8nPu8TrK3xI="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/152", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193161"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZQdXOO_RqhcWMVUFPDLduCwWohv82DA7G0ADEGKNxrU="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/150", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193162"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hoK5k7sGyHkbsW0enSWp8ifYbZVo8sfYmVxS3joIfBM="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/151", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193162"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hoK5k7sGyHkbsW0enSWp8ifYbZVo8sfYmVxS3joIfBM="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/161", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193163"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2jDqOkfJs5oNBNbnwJG69iWRuLjCpJMHYh1JrTVyu6U="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/159", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193163"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2jDqOkfJs5oNBNbnwJG69iWRuLjCpJMHYh1JrTVyu6U="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/160", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193164"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m9IYfVnE2LwGe9oIV9rw4bBSE51cjo0L035jhWQACsg="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/158", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193164"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m9IYfVnE2LwGe9oIV9rw4bBSE51cjo0L035jhWQACsg="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/156", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193165"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DOL-Nn9WfloiA2gRDb2FstlkseFPguhe3WyCL8ojUck="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/157", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193165"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DOL-Nn9WfloiA2gRDb2FstlkseFPguhe3WyCL8ojUck="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/167", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193166"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vBtXduQv84VR1v1r1floV91a-jWFl0tCCu1xjmSUsq8="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/165", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193167"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eCfaykUyHCjAJv4rOF8BruqMZs-5rsbWsb-XHRDY0I4="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/166", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193167"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eCfaykUyHCjAJv4rOF8BruqMZs-5rsbWsb-XHRDY0I4="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/164", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193168"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fy3E-HMEWQ7G2H5zt19PUuTBIy2CU4KK8LMIJuo4ppc="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/162", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193168"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fy3E-HMEWQ7G2H5zt19PUuTBIy2CU4KK8LMIJuo4ppc="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/163", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193169"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sqwbPGsaEdto_AJO6Ra7kspn9ESi1rEG4CIB0djqPvA="
      envelope = @pubnub.revoke(channel: "demo", read: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/173", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193169"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DF9WJkeHhImsbQZhfZaqsCAA2RZBFxEIciSkql4h5eM="
      envelope = @pubnub.revoke(channel: "demo", read: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/171", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193170"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p5d-6B6QIsLVsKuz1iOV0p9f4DL_q6Cv8zYNDJbWFEk="
      envelope = @pubnub.revoke(channel: "demo", read: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/172", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193171"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Bb6DLAW_dbXnvEwrptiVr-xSnBkR90AsuxE-k67TakA="
      envelope = @pubnub.revoke(channel: "demo", read: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/170", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193171"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Bb6DLAW_dbXnvEwrptiVr-xSnBkR90AsuxE-k67TakA="
      envelope = @pubnub.revoke(channel: "demo", read: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/168", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193172"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p6yloxjnd9LUUGzWEkkuvCpYysgsn9um-ecfF2ahDYw="
      envelope = @pubnub.revoke(channel: "demo", read: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/169", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193172"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p6yloxjnd9LUUGzWEkkuvCpYysgsn9um-ecfF2ahDYw="
      envelope = @pubnub.revoke(channel: "demo", read: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/179", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193173"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0bdtliNIQLga_oLZVK-p5X3yOCgGSsgz_rMgKV_Ihe8="
      envelope = @pubnub.revoke(channel: "demo", read: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/177", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193173"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0bdtliNIQLga_oLZVK-p5X3yOCgGSsgz_rMgKV_Ihe8="
      envelope = @pubnub.revoke(channel: "demo", read: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/178", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193174"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EvnVawjDyAUhD4IgTitKEcLrN3ft8BhCLQ5VoXvnoJI="
      envelope = @pubnub.revoke(channel: "demo", read: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/176", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193174"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EvnVawjDyAUhD4IgTitKEcLrN3ft8BhCLQ5VoXvnoJI="
      envelope = @pubnub.revoke(channel: "demo", read: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/174", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193177"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "khD1yJoGt5igzIslxm23LxToOSf6EaQf63sibKAeQx4="
      envelope = @pubnub.revoke(channel: "demo", read: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/175", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193178"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1GV_ArHlXHZxcCxuXizY0tdpBx3jniYGJ125Gn1rcE8="
      envelope = @pubnub.revoke(channel: "demo", read: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/617", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193178"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "br0Q2atitZ0OAytj3EZ67Gllr5-UhhNvCc-t6jSGAHE="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/615", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193179"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gib28FdiQD-TpMpRlpDoPPy0RdmzRCCGUrAQ8lhE_Jc="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/616", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193180"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LvYteWjaDn-ZCIBr73geqiMXSFRcnnN4cRaFrodrQ1g="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/614", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193180"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LvYteWjaDn-ZCIBr73geqiMXSFRcnnN4cRaFrodrQ1g="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/612", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193181"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lArewaiuKjemKELy1Nds2RlbcTfqCV_R4uCYssEdpLo="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/613", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193181"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lArewaiuKjemKELy1Nds2RlbcTfqCV_R4uCYssEdpLo="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/623", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193182"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ROGQ92LYySK8SVpF5fHuKtPu7zgeiAhayKkA61dpVi4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/621", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193182"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ROGQ92LYySK8SVpF5fHuKtPu7zgeiAhayKkA61dpVi4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/622", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193183"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vwaW44bqtMAXqoMHdEWzt5G6FpcdH7BAyJRTkDFUBWo="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/620", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193183"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vwaW44bqtMAXqoMHdEWzt5G6FpcdH7BAyJRTkDFUBWo="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/618", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193185"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JErpY9QcRllsoayibK53fDjXyfEyxQut-7mhYYX-Yaw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/619", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193186"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hQkD2Mr0M2zhRl1-K2Z7BDmRvt1VIeKDgyi119i5Icw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/629", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193186"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lwt0gFfgOUL-TSwQhseGk0WpBQoIbCP2jD-hJQbrwlY="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/627", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193187"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rQO_cSTeh4mVDM_71z4EmwPQZemu7AvXA950xFuG_No="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/628", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193187"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rQO_cSTeh4mVDM_71z4EmwPQZemu7AvXA950xFuG_No="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/626", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193188"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e0IqVjMIFd6JaNzhHmYF0t1uzGQVQO4u9o4n5RtX52s="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/624", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193188"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e0IqVjMIFd6JaNzhHmYF0t1uzGQVQO4u9o4n5RtX52s="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/625", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193189"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dzyAmu-_UnC5N8GscCt_Bo6i6ln4BHkxpSVK_4VmyOQ="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/635", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193189"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JAQ1oF9Ho7gFJoLrjxCYcDgZ680mXiS72vLeMF6CqZo="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/633", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193190"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EAujIImZy2FVVFxm4Gk__xIafskq0198D8FB06Ij4Co="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/634", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193191"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zLdivT_zhaTbBXExEQaKFENsTt2aAqbeS7K8NvADvhM="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/632", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193191"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zLdivT_zhaTbBXExEQaKFENsTt2aAqbeS7K8NvADvhM="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/630", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193192"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-ObDxxbUmpXy9L1Uu5QJkiooaGygukH3bcq2DyzDrw0="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/631", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193192"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-ObDxxbUmpXy9L1Uu5QJkiooaGygukH3bcq2DyzDrw0="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/641", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193193"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nZvR42Y92eyCfQQMCejA3p-yd9_-3cC9FWdHU4jvAxs="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/639", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193193"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nZvR42Y92eyCfQQMCejA3p-yd9_-3cC9FWdHU4jvAxs="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/640", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193194"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3KCLLYPj5oXnaLVA29dGxzwOnvPQq9EcCgFXa2UlfHg="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/638", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193195"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gPw2n2PLHNkhVY3TXG-_U1OCFK2yzT4pXuD6B8rNhqY="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/636", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193195"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gPw2n2PLHNkhVY3TXG-_U1OCFK2yzT4pXuD6B8rNhqY="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/637", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193196"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0DvVXGKN7PbT-QYSABQWbyixIN1P49HOmEKwmEjhB0k="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/647", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193196"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vG7ov-dJUTXp0lT6cNU4wJ51oOngkAivTr05HjwNNJI="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/645", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193197"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LrFND--7PYFKNOR0XdrhEoNoGBL9GjvH9rMPrYyy7EE="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/646", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193197"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LrFND--7PYFKNOR0XdrhEoNoGBL9GjvH9rMPrYyy7EE="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/644", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193198"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zf0iM4_MTTIVEM0HdUBD7RvtwHZoW4fQmGWcvA7CBho="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/642", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193199"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hozpJuyhjd0m_T1GtaqY2aT5xy8GgLLqsWtgRStD-iQ="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/643", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193199"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hozpJuyhjd0m_T1GtaqY2aT5xy8GgLLqsWtgRStD-iQ="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/545", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193200"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OYDJjMa9l7qCi_KbAilHrlndz9IPU5QPJCZGAncTtyw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/543", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193200"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OYDJjMa9l7qCi_KbAilHrlndz9IPU5QPJCZGAncTtyw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/544", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193201"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KoiVBkiayVDdmbp1ET1xitWEpLWUhBqYfT_baNx4r1Q="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/542", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193201"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KoiVBkiayVDdmbp1ET1xitWEpLWUhBqYfT_baNx4r1Q="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/540", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193202"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T-1vhBlkjLXRO-fp5S8crLqkqi2q5XBYwzAMqooMVZw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/541", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193203"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SDXRYFvpGp2QYL3WJlQpMfoHa5t-qS4s07qAW_9S1DI="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/551", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193203"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x2VqyZJ8apaHt7WIprpBbOq5nb-MhQOUs5Ns0Os2Pg8="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/549", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193204"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hOrF0cJPzb5rNvg5secxzX0V1Ye9n4m2MF6muCR8lAw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/550", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193204"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hOrF0cJPzb5rNvg5secxzX0V1Ye9n4m2MF6muCR8lAw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/548", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193205"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hyy4eXFnFPtwIaIh453LwZibpqdxYS9JoUSWATlEGU4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/546", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193205"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hyy4eXFnFPtwIaIh453LwZibpqdxYS9JoUSWATlEGU4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/547", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193206"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pKkIKcLGZMIgxcjeUHotFFMlCC1tp1Vno3HL0YzKnSg="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/557", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193207"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BodmQDMROEqsuFZZDUxXTqjssTHH5EOpHlUwldY8HvY="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/555", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193207"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BodmQDMROEqsuFZZDUxXTqjssTHH5EOpHlUwldY8HvY="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/556", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193208"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wsgDWtROfx8xgruUG0YHMysrTVjvMsuFxSA5luWlJiw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/554", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193208"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wsgDWtROfx8xgruUG0YHMysrTVjvMsuFxSA5luWlJiw="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/552", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193209"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LTX_TqDCDQBBlJnHHxBoBrcPfhgXIufrBStlgoi9LU8="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/553", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193210"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "I9Cbba4TpW-7778kb_kqk40jfiwF1rHMP2BJcHLeww4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/563", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193210"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Cy8qfLWGDKQwskRIjw7FNzFsc0SByRfXM9gH-YikeEE="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/561", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193211"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ScLLhu0_snRWmhDeLt_T3FJtN5bgYvjb-vMESalU9z4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/562", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193211"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ScLLhu0_snRWmhDeLt_T3FJtN5bgYvjb-vMESalU9z4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/560", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193212"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IL3FxFFpiw5MNBe95jKsDJ88AVIIxT4lvWl0h0W8Awg="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/558", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193213"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eVIHC5-oYoTO_qrt6Yllbnl7Doz4dmw62bvON3H0zzs="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/559", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193213"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eVIHC5-oYoTO_qrt6Yllbnl7Doz4dmw62bvON3H0zzs="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/569", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193214"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A0n7sUJvCs-PpyrXGJ9xzmuNJxyFtKw09FZ2bb9c2Wc="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/567", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193214"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A0n7sUJvCs-PpyrXGJ9xzmuNJxyFtKw09FZ2bb9c2Wc="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/568", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193215"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yHveaM0aKa3OzekNb09GjMFr-A_Uy2UkeciupCcDdYo="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/566", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193216"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k-1Avw7-JSFHNO2s4xdyqEBJPCqQxdOod0b9J79fNS8="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/564", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193216"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k-1Avw7-JSFHNO2s4xdyqEBJPCqQxdOod0b9J79fNS8="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/565", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193217"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z2DDYPl6-tgMMfbfwe-UNSbd7G9in129njm4cZ35xF4="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/575", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193217"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2jFLBwG0XUSegZzJVT1TVpdkUcsQDTw2mEFdrVhqbg="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/573", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193218"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KcvXXFOSS3mucyx_xJa53QdummGrBGh51Ltue-wBBbM="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/574", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193218"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KcvXXFOSS3mucyx_xJa53QdummGrBGh51Ltue-wBBbM="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/572", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193219"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GoAHXK-eiM2AySYayQ01mMpaqDQ4uMTf78YY3n5UnPI="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/570", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193220"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PluOxbzy3SkUBCTtx-74azLVBRLDpimyGBU1saH5-5k="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/571", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193220"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PluOxbzy3SkUBCTtx-74azLVBRLDpimyGBU1saH5-5k="
      envelope = @pubnub.revoke(channel: "demo", write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/581", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193221"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UP5dsSdRySSQNs-9ragpHv_weKVX6Ge9djUyV0S7gxc="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/579", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193221"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UP5dsSdRySSQNs-9ragpHv_weKVX6Ge9djUyV0S7gxc="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/580", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TvpoTr6L39Ku_u6qrgd2GOHQVccnyroQqTjfT2H9YMw="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/578", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TvpoTr6L39Ku_u6qrgd2GOHQVccnyroQqTjfT2H9YMw="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/576", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193223"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L7e8AyW9QhPeAIX8PGIpluKd6cow5TRlPBc7O5vbIUI="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/577", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193224"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9Jq9Q_ncziavjEsqeRyIn9M-elnDEtJNQzrPTbevHXg="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/587", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193224"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9OvH78WL-Q6Jn1mEMHLmrI1EBvN9a0RcvF5LasaCPao="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/585", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193225"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uCZQfuZFikRnjWYLGfT4oxhwat-QNEFf1hGzDENIIow="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/586", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193225"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uCZQfuZFikRnjWYLGfT4oxhwat-QNEFf1hGzDENIIow="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/584", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193226"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xyy8_BVNi1qZNQ3RzC3OPw2T2XgiRgNYU8scLTSKu0s="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/582", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193226"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xyy8_BVNi1qZNQ3RzC3OPw2T2XgiRgNYU8scLTSKu0s="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/583", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193227"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nVIU6jJB5obc-yybfiwrF1gS8F1ztrY4gln4hkdeYUg="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/593", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193227"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gbkZ3TcQrKP-kP2OVeImi876IYtmGXTguSqI5u_eSY0="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/591", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193228"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NXFpH1eN8gP2L5v37oVmaLNcQkxGinr0_10kgxuZrHA="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/592", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193229"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UCLKDZDENwH1EuPig6iiFTNiCYjbsu4U2MR1AG4-Gds="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/590", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193229"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UCLKDZDENwH1EuPig6iiFTNiCYjbsu4U2MR1AG4-Gds="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/588", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193230"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fKGSM0dkauZm8LhfmYSuLNhrltNWASvJEcaQq4ngmbs="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/589", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193230"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fKGSM0dkauZm8LhfmYSuLNhrltNWASvJEcaQq4ngmbs="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/599", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193231"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BWtb1BqEeIhRbFH8KCbacIu_wWFKYWSHq-bE1QX19Oo="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/597", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193231"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BWtb1BqEeIhRbFH8KCbacIu_wWFKYWSHq-bE1QX19Oo="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/598", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193232"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7FwO2CAlGNt5iT5ORV21yll16dva2RL7lbUHfyISaG4="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/596", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193233"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BIvzRRaJUtpfgjyn4dmZ7A3DvGkU1SgCMabA8J6Rnj0="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/594", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193233"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BIvzRRaJUtpfgjyn4dmZ7A3DvGkU1SgCMabA8J6Rnj0="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/595", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193234"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rVu9xtZTyejAMRXSR2HkeuTktT4bjJXrVAsc5pVpT5k="
      envelope = @pubnub.revoke(channel: "demo", write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/605", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193234"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nhkD6Iq0P7ik0RDBSy8NrWfILHMypC9XZO9DPD-XJBU="
      envelope = @pubnub.revoke(channel: "demo", write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/603", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193235"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e9uHvSmQ1dXfjPnqfbxrVHbj1QaQyk2du62BdPgl6rk="
      envelope = @pubnub.revoke(channel: "demo", write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/604", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193235"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e9uHvSmQ1dXfjPnqfbxrVHbj1QaQyk2du62BdPgl6rk="
      envelope = @pubnub.revoke(channel: "demo", write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/602", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193236"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6TFQlMFGIvit7Pchd03-N16LSi1xxjqThSWpYGtxtZY="
      envelope = @pubnub.revoke(channel: "demo", write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/600", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193237"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2FyOIUkaFNo341yVJw5Ja1XeoTP0gwYUtDYVqW-5Opw="
      envelope = @pubnub.revoke(channel: "demo", write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/601", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193237"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2FyOIUkaFNo341yVJw5Ja1XeoTP0gwYUtDYVqW-5Opw="
      envelope = @pubnub.revoke(channel: "demo", write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/611", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193238"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_Bx9is7IUJ_YU3rkcf_scny710mx2ui0pIm1xZ21EPw="
      envelope = @pubnub.revoke(channel: "demo", write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/609", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193238"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_Bx9is7IUJ_YU3rkcf_scny710mx2ui0pIm1xZ21EPw="
      envelope = @pubnub.revoke(channel: "demo", write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/610", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193239"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q7XorlxhUaValtUqxPNzSSEMJtq3iho3YZfReVVzCvA="
      envelope = @pubnub.revoke(channel: "demo", write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/608", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193239"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q7XorlxhUaValtUqxPNzSSEMJtq3iho3YZfReVVzCvA="
      envelope = @pubnub.revoke(channel: "demo", write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/606", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193240"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wV8dq2JxHbPyFgDn2NtWd5sH2hEB_c6xE07CxHqZIGw="
      envelope = @pubnub.revoke(channel: "demo", write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/607", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193241"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M0d_cgN8ztdh0byjpjvRnYqMGkmEktVf5STcVy6Czpk="
      envelope = @pubnub.revoke(channel: "demo", write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/401", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193241"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GVxul4mArZAyd8W5qpgIJ-z0R2HnzHZ_BkneqnEOnpY="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/399", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193242"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mriDlEksjddTj6OTuLvrtgGk7LF3iIt54KJQU-bIFAM="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/400", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193243"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZlIeJsvTf_mo-OdORZh2PY_r-YmwgskmkvJTsk5ZfBM="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/398", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193243"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZlIeJsvTf_mo-OdORZh2PY_r-YmwgskmkvJTsk5ZfBM="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/396", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193244"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "387W-HL9z95Dtb60cW4S_IfB2xj_WEqskyn1QsLtGpc="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/397", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193244"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "387W-HL9z95Dtb60cW4S_IfB2xj_WEqskyn1QsLtGpc="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/407", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GbdvTs-QJDjKrR6nF1hywXon2O1uXBQUQmC0zSuEHNQ="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/405", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GbdvTs-QJDjKrR6nF1hywXon2O1uXBQUQmC0zSuEHNQ="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/406", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U4UlF546_dMyx8vx34bQ8jn0HLGQRrh_tlzw1Qesxt8="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/404", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U4UlF546_dMyx8vx34bQ8jn0HLGQRrh_tlzw1Qesxt8="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/402", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193247"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rPYo_Rz951K48ayKNPE10x0PmU4gPp78J3bm22raQxo="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/403", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193247"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rPYo_Rz951K48ayKNPE10x0PmU4gPp78J3bm22raQxo="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/413", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CpVn4D-CBlCcWu6uy8Q97eeWFVXOfCBI8HG4ZDT-r8M="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/411", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CpVn4D-CBlCcWu6uy8Q97eeWFVXOfCBI8HG4ZDT-r8M="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/412", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KwtuJxumbxM02552UOjbFCICuQdYxJf8D3xHmYMKa90="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/410", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KwtuJxumbxM02552UOjbFCICuQdYxJf8D3xHmYMKa90="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/408", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G8cBMi4RulV490HB8Nd-0K_ZYqNCx9AZFCLxWhT7Ekk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/409", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G8cBMi4RulV490HB8Nd-0K_ZYqNCx9AZFCLxWhT7Ekk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/419", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193251"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cBacUhgtaIjMNu2gIJda-g0dNMJmdad-fimH_668VXI="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/417", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZgjeFqrGfmHYqCPWuuZvufBgeoweOP1f90IHSOIYmmw="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/418", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZgjeFqrGfmHYqCPWuuZvufBgeoweOP1f90IHSOIYmmw="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/416", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193253"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ABef39lEZotz3tnXijIwsbMb8y6nRf4fc_9YNrVJE2U="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/414", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193253"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ABef39lEZotz3tnXijIwsbMb8y6nRf4fc_9YNrVJE2U="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/415", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193254"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QolWNblrlfaVs94Uvy5aurp5AzX0izh-sNu7ec_6kH4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/425", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193254"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "625vCrj9a9FszDTbFr0LYQyXdYvpR38RB9nWpjap9yo="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/423", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193255"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XJkTdsYw_H_Sfsg4XGPHTPROcH4ZMMGSLtFexA4GJ6A="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/424", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193255"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XJkTdsYw_H_Sfsg4XGPHTPROcH4ZMMGSLtFexA4GJ6A="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/422", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u39c4hPKv2mfjQEwt0w0RMUzaDGEcKTW6bR_OfPB-t4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/420", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u39c4hPKv2mfjQEwt0w0RMUzaDGEcKTW6bR_OfPB-t4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/421", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193257"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rVACIqes64FcCvVaCX58xeT_o1ZQWRDF8quMU2wmze4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/431", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193257"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZaYl5fmzu-jhY3nZfcP82jzle0GthdhmKRrz7oLe2sw="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/429", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193258"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-9Oc0eefNV-MsonCT2OiYdguJV7PCW_Vlq_ENv8xbDk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/430", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193258"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-9Oc0eefNV-MsonCT2OiYdguJV7PCW_Vlq_ENv8xbDk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/428", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193259"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Jn6rcYqS9cMBojZSqZTSYhzOtudwy7Q5-YlIK58Hg_M="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/426", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193260"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UbBMjMBqKTVzLM4OVi_8kqevzu4dS9aEd_Yf0odA2mI="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/427", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193261"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MwsbqY8_2Wm9f1itk17_X1J9KLWFqS2RSw4-DIYXXfo="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/329", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193261"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "i6SUVgDqUGQPTkdtBkfI9izAqVa411kJ7dazx2avQ6s="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/327", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193262"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LGIbht7gRBSl9xwv-R5y37K_vkJ_9de5uiRdtbft0oA="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/328", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193262"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LGIbht7gRBSl9xwv-R5y37K_vkJ_9de5uiRdtbft0oA="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/326", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193263"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "baHwqzivk4ZUzGPzwIPA8yN-dnsEqIiEy1-L5JsN9Ho="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/324", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193263"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "baHwqzivk4ZUzGPzwIPA8yN-dnsEqIiEy1-L5JsN9Ho="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/325", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193264"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "feBRJcMCQjJmnI0l0vIH3TLvZdjHuHJgZCXhLKo8wfY="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/335", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193264"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RszcY4MzWw-JgEpehQPmCFgTcbjFKuSDUOtfI4PDqBg="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/333", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193265"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cNG1KI4Np-gmXAHFGkMn1w4VM0zDbfpDOs0qX6NtvG4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/334", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193265"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cNG1KI4Np-gmXAHFGkMn1w4VM0zDbfpDOs0qX6NtvG4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/332", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193266"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4udCwRaXzG7AhjSoYCuNNOtiAin57V-LMZmoOH-3YPw="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/330", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193266"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4udCwRaXzG7AhjSoYCuNNOtiAin57V-LMZmoOH-3YPw="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/331", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193267"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "30noIEYIXF88ZGhedbIaVZVKhcyZqwOVZnAYQnn-_ac="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/341", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193268"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "txYowvVJ3krms8Tsmc1THFts1K3R1zjtCpRIWC0qmdU="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/339", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193268"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "txYowvVJ3krms8Tsmc1THFts1K3R1zjtCpRIWC0qmdU="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/340", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193269"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9GOZSHxqAWE3t5acev3C6GX75dYJS578a_j4X6DE-lI="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/338", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193269"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9GOZSHxqAWE3t5acev3C6GX75dYJS578a_j4X6DE-lI="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/336", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193270"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oKrgLEatdIYOT9qhs9E87E9N4RV-RC0rf0HyotQHU7o="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/337", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193270"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oKrgLEatdIYOT9qhs9E87E9N4RV-RC0rf0HyotQHU7o="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/347", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193271"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aUduemsrFkaLQu_mQ_TZcavHup9mKIRZBxDFh4PZxJ0="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/345", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193272"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hfvTOWIIewA7VqZOZLca0dfzaYBhfP_xIfcPg6cgD4Q="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/346", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193272"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hfvTOWIIewA7VqZOZLca0dfzaYBhfP_xIfcPg6cgD4Q="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/344", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193273"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "82PiJ3-652ncss5TlUMFcfUG7wW5PxEgTEXvW_v-uYk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/342", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193274"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "trG5i2cJluqAhPwTwW33y5OFJBCpE3ycjNScVBqE_gg="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/343", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193274"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "trG5i2cJluqAhPwTwW33y5OFJBCpE3ycjNScVBqE_gg="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/353", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EzX7FLQ3izkt6BgFQ-KZH0r93m94Ie4C8ItK6FcFWw4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/351", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EzX7FLQ3izkt6BgFQ-KZH0r93m94Ie4C8ItK6FcFWw4="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/352", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193276"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IzKLWwzQKIZ0qEpCjGq1IM4sQTDIyoyx8XvFjOjKBeA="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/350", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193277"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tDpJ94YNq3sdDSaNV31LcWSz7lA0HhqCwvV7zYvcdpk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/348", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193277"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tDpJ94YNq3sdDSaNV31LcWSz7lA0HhqCwvV7zYvcdpk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/349", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193278"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9k2f2rUAwZRD50DJ8VpDX93Q2QmA1GWx7_iqMSaMlKk="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/359", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193278"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nQ6cEWuycouEx-Wyl8aOFmBDyQW3gik1AGRla1pTZdg="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/357", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193279"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "twzY500MNEqhhq3sH6Qb-0a78ZjzqgoMTYnU39gsjbo="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/358", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193279"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "twzY500MNEqhhq3sH6Qb-0a78ZjzqgoMTYnU39gsjbo="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/356", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193280"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8IFvJgQcjSZWXDv-ZKVitVIDdQ9XKP0WNBydEe0tB6Y="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/354", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-zbqoHJS3mRbZL_2ZtYLCUfWQNCNL5o4ZpaEsALjh38="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/355", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-zbqoHJS3mRbZL_2ZtYLCUfWQNCNL5o4ZpaEsALjh38="
      envelope = @pubnub.revoke(channel: "demo", write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/365", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9oueu2bHLTSJ8fR0LTmbFAxdWMzGQaonMhOXxgf6BAI="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/363", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9oueu2bHLTSJ8fR0LTmbFAxdWMzGQaonMhOXxgf6BAI="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/364", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eolQfy8l-rrxXU8c17nvzhw3-oC85OAZ1Ns_7tpueb4="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/362", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eolQfy8l-rrxXU8c17nvzhw3-oC85OAZ1Ns_7tpueb4="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/360", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jf5x22lT0Krdz6QP6DWBD6Jbe0frCvP8-H-siOVtblA="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/361", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jf5x22lT0Krdz6QP6DWBD6Jbe0frCvP8-H-siOVtblA="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/371", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7MxeSbdFOvgfAVOmZ7_D0jdsS15Fkb3fs2BG3pGCbdM="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/369", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7DWie921nMIVrtQ-CtBJsl8InneLR2gIHSXIyywYens="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/370", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7DWie921nMIVrtQ-CtBJsl8InneLR2gIHSXIyywYens="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/368", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4IkgJqXK-hWK62ux81ACDsYxVRvLb9xbAAtJX4LAKPI="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/366", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4IkgJqXK-hWK62ux81ACDsYxVRvLb9xbAAtJX4LAKPI="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/367", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193288"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wOj8U1V69l2_xhrGvmcjmJW8AtmbjUps8fR6lXht5h4="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/377", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193288"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nz5NBK0d207sleDbJtDcXjoX_Bl9CJLymuiDDe4X3bM="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/375", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "B9Jml0mt_CdfEN_7Hi0qhnKwdapClCqhamSscQSIWnY="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/376", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N1PlRkDk47XumJF54fQM-dOIB2ZNSSrMiM27EBzOfq0="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/374", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N1PlRkDk47XumJF54fQM-dOIB2ZNSSrMiM27EBzOfq0="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/372", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xj1Y_H-f_EuDEaCdQPsbUylLPNsKdtsYdwdTRI8BdAg="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/373", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xj1Y_H-f_EuDEaCdQPsbUylLPNsKdtsYdwdTRI8BdAg="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/383", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AJIQXVveEy8Awae06gC_H82zWpbqyUkKjBn6pKun8N4="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/381", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AJIQXVveEy8Awae06gC_H82zWpbqyUkKjBn6pKun8N4="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/382", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TXFrMu7_fhAlCc5DtEsv1R1HPNLDHxHqYnhR9D7u6QA="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/380", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TXFrMu7_fhAlCc5DtEsv1R1HPNLDHxHqYnhR9D7u6QA="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/378", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PXIBdI0sVuIe4FqQEkjBxjYFTLGFknAIamxEpjnMrIA="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/379", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q96gnGgbpBSlWRTqfpD1SVpQhGkW-wmJtjP4sV-IGWA="
      envelope = @pubnub.revoke(channel: "demo", write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/389", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G8zIS5u9woLCtnv-VUB9Wit0XVGu5L2BBsffXrq3gng="
      envelope = @pubnub.revoke(channel: "demo", write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/387", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SR7DqNUAyPMDzJ_0diz70RDZ6Zqy3jRUWr5LhwYDs_g="
      envelope = @pubnub.revoke(channel: "demo", write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/388", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SR7DqNUAyPMDzJ_0diz70RDZ6Zqy3jRUWr5LhwYDs_g="
      envelope = @pubnub.revoke(channel: "demo", write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/386", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bHzV76-GO8ojpvTrY5Ct2vOd9bvAOahHCGD9dx_QN5w="
      envelope = @pubnub.revoke(channel: "demo", write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/384", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bHzV76-GO8ojpvTrY5Ct2vOd9bvAOahHCGD9dx_QN5w="
      envelope = @pubnub.revoke(channel: "demo", write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/385", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193298"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Afq2FOLymsBMZPIsEbpeKb3sebxo2KPbfzuKDGy9Unw="
      envelope = @pubnub.revoke(channel: "demo", write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/395", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C_d5cY7WFvpMsSDjhODRLJ8MUsUuOk4CpNofGsty11Q="
      envelope = @pubnub.revoke(channel: "demo", write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/393", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C_d5cY7WFvpMsSDjhODRLJ8MUsUuOk4CpNofGsty11Q="
      envelope = @pubnub.revoke(channel: "demo", write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/394", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AunMUEYf7xtdhDkugjoFJGP1tsRsaXvnxRyK7Q6PJls="
      envelope = @pubnub.revoke(channel: "demo", write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/392", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AunMUEYf7xtdhDkugjoFJGP1tsRsaXvnxRyK7Q6PJls="
      envelope = @pubnub.revoke(channel: "demo", write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/390", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193301"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h4akYo_lGVj86em9lt7yEwJ1PHF4oyY2X1gxjMJhdHY="
      envelope = @pubnub.revoke(channel: "demo", write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/391", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193301"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h4akYo_lGVj86em9lt7yEwJ1PHF4oyY2X1gxjMJhdHY="
      envelope = @pubnub.revoke(channel: "demo", write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/509", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hkXtzAIg7jaQrHQKS7cl4J659KfTFsCAxcjUzPpJAH4="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/507", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0GOjtBR0JmkeM6UZIgAXaLj97vbmvNEChxzGij05CZE="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/508", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0GOjtBR0JmkeM6UZIgAXaLj97vbmvNEChxzGij05CZE="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/506", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vXYntwkgV-v87SaTw7lvRK6x8c3hLYQFVyVjC1lg2Xk="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/504", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vXYntwkgV-v87SaTw7lvRK6x8c3hLYQFVyVjC1lg2Xk="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/505", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "--9yYTwNl1S7LpqGG6hguIAF5IfOVANpbBEblogicxM="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/515", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o2Ctcfzc1hg6Frg8it5_0h11t2uatawCUY32O43PPCE="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/513", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193306"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "atmwXUqx8ogfHCqI0f8sHqIXsYrlnfYN3LGQBmwNKkU="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/514", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Li_GbL8i1repGDKwvguxP842k4tMqHRcg6ysa7oD-nU="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/512", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Li_GbL8i1repGDKwvguxP842k4tMqHRcg6ysa7oD-nU="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/510", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193310"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dfcJ3rmwUkKKOVTRQD9BqENjQ-jrxp0ZgRfHG2Ju4Lg="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/511", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1OEX1EyM1xQmayUhEVEiaGQbH7vChPqS35QQt3pyCJY="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/521", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N95kWY8tF1PXhUolhHxe5AUoR6Wi4YjNKUw88HboDas="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/519", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "piO5wmjrrBcqD7UIFKzbUsKWpHTzLarpRhxpkmnivsI="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/520", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "piO5wmjrrBcqD7UIFKzbUsKWpHTzLarpRhxpkmnivsI="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/518", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UFFsFE6zheeAexAUS4KcaWLV7m6x6tULLWLCdJw-vGw="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/516", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UFFsFE6zheeAexAUS4KcaWLV7m6x6tULLWLCdJw-vGw="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/517", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lzm5HQFCpSV8ZWGnwC3QdcvbOp5sD0pATnk0F2td60E="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/527", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rpPyTkQXqiHx8JEw0PazGIRjJ7dzI-UQwQ2Jwm5FYIk="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/525", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193315"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nZnCHJjwHuVndd14f-gPA6hnqGis0hfRFw2LgLw9K5o="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/526", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193316"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "siQLA46DvS3xxEz6ri1cVt6s8Sl9VHP90FFyY-c5W_4="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/524", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193316"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "siQLA46DvS3xxEz6ri1cVt6s8Sl9VHP90FFyY-c5W_4="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/522", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tkjps_JvVJJMYsiPiCKHJ7xFwgyqloMF7OOJ2lWQHhY="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/523", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tkjps_JvVJJMYsiPiCKHJ7xFwgyqloMF7OOJ2lWQHhY="
      envelope = @pubnub.revoke(channel: "demo", manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/533", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k2uYjtM8I7hIrDTkGd9kPhoRI_aYRP4TgM3-ZskuWzM="
      envelope = @pubnub.revoke(channel: "demo", manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/531", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k2uYjtM8I7hIrDTkGd9kPhoRI_aYRP4TgM3-ZskuWzM="
      envelope = @pubnub.revoke(channel: "demo", manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/532", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wNL8T0LjKTa8ngp0Ai4EQxQFLxRbl5ydtKM4oufqLAA="
      envelope = @pubnub.revoke(channel: "demo", manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/530", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wNL8T0LjKTa8ngp0Ai4EQxQFLxRbl5ydtKM4oufqLAA="
      envelope = @pubnub.revoke(channel: "demo", manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/528", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_I9-zeEUv5MQIe9b_rqRK3_8NMtTw2FnlYUl6WRy54s="
      envelope = @pubnub.revoke(channel: "demo", manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/529", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_I9-zeEUv5MQIe9b_rqRK3_8NMtTw2FnlYUl6WRy54s="
      envelope = @pubnub.revoke(channel: "demo", manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/539", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OjUbePHgqSgbjJCXJyGFEsxVjXOI4WMid92REAWwXDA="
      envelope = @pubnub.revoke(channel: "demo", manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/537", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OjUbePHgqSgbjJCXJyGFEsxVjXOI4WMid92REAWwXDA="
      envelope = @pubnub.revoke(channel: "demo", manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/538", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193322"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xwyTMCrC2d4Z03vPYWzZlUPxndYkdupv83yR6x0WxUw="
      envelope = @pubnub.revoke(channel: "demo", manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/536", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193322"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xwyTMCrC2d4Z03vPYWzZlUPxndYkdupv83yR6x0WxUw="
      envelope = @pubnub.revoke(channel: "demo", manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/534", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193323"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VBz-z0a5c30PiH5luzc9pMmjzzOkorEsM3sxNX8AqEg="
      envelope = @pubnub.revoke(channel: "demo", manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/535", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TMoP87MrBef5HWCiI5Dh8FGAj732ZB2qvAjbiDHomOE="
      envelope = @pubnub.revoke(channel: "demo", manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/437", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oxkZRKgXpzlpTjf9_TjAGTXyGCgq0O0U4LYEI6TsGhM="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/435", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193325"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2GF27bLpaunzpU9JoO3Z7XgULiwE-ZnpJKGvKFOoldA="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/436", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193325"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2GF27bLpaunzpU9JoO3Z7XgULiwE-ZnpJKGvKFOoldA="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/434", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7bdInHYJnfsCEcT3SDWpiqaZnDGN591tbxf6Gc33RNY="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/432", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7bdInHYJnfsCEcT3SDWpiqaZnDGN591tbxf6Gc33RNY="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/433", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w_Y8hBejxzx15_ydiLNcxpa79p7htVMwI9-XNKbJLaQ="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/443", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AusbehvuGGHKmJvD2x1FL0tjQaRF8UWAZ6nz8r6bcF8="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/441", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6JVysIiyzSnkEsSHhqEd1Zrq9AmrWqn4fmjFRS1cgJ0="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/442", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6JVysIiyzSnkEsSHhqEd1Zrq9AmrWqn4fmjFRS1cgJ0="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/440", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193329"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oCvEDSKgaD7nA7SQakqKDX9RYFKG2ZRW24ZEOKO2Ea4="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/438", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193329"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oCvEDSKgaD7nA7SQakqKDX9RYFKG2ZRW24ZEOKO2Ea4="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/439", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DFEIHIUuYw-CkiBzr453LDlfnedzlsirJie-50tafzo="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/449", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jCIogwpr4ogYNHxv0M46Ineo-jozvTU8UaJ1cSIwO70="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/447", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193331"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xGtEs7fBuKkU-P3LhtfjnwX41sD0aTBopSGbN4bzoHs="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/448", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193331"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xGtEs7fBuKkU-P3LhtfjnwX41sD0aTBopSGbN4bzoHs="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/446", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FsIN95BugkHPcAeXNFlrDSGLNlO3qpxbGnQyGbHf2hw="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/444", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193333"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "48FIkTe0AAgquKJhgPGzWl0L59b7AwSDH0XrWOiK2Lo="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/445", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193333"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "48FIkTe0AAgquKJhgPGzWl0L59b7AwSDH0XrWOiK2Lo="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/455", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193334"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0-IpCzuLjLs23tbd8nk8AbCQ33pUN7QeEWlGxDpAw-U="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/453", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193334"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0-IpCzuLjLs23tbd8nk8AbCQ33pUN7QeEWlGxDpAw-U="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/454", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193335"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HI_r9tTtwMleOOis7FetQDA6cYa00SviO4NtN1sHuf8="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/452", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193335"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HI_r9tTtwMleOOis7FetQDA6cYa00SviO4NtN1sHuf8="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/450", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tse7RiS_2TfsQ4iVYqclWJN1tVKEthLx-IVttukC-lc="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/451", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tse7RiS_2TfsQ4iVYqclWJN1tVKEthLx-IVttukC-lc="
      envelope = @pubnub.revoke(channel: "demo", manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/461", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193337"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a34pybQL9LdSxG_QsucKR5R-BS1TUpVeGpDqDkti13Q="
      envelope = @pubnub.revoke(channel: "demo", manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/459", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193337"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a34pybQL9LdSxG_QsucKR5R-BS1TUpVeGpDqDkti13Q="
      envelope = @pubnub.revoke(channel: "demo", manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/460", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0v-RnaXv2KcXXTXUe2JSvgCs8bmwfyr6Vtw1KDAzzfY="
      envelope = @pubnub.revoke(channel: "demo", manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/458", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0v-RnaXv2KcXXTXUe2JSvgCs8bmwfyr6Vtw1KDAzzfY="
      envelope = @pubnub.revoke(channel: "demo", manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/456", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oLp2COXgOGKoTFOhE26EnHq1BreeT5E0TCHTGfm801Y="
      envelope = @pubnub.revoke(channel: "demo", manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/457", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oLp2COXgOGKoTFOhE26EnHq1BreeT5E0TCHTGfm801Y="
      envelope = @pubnub.revoke(channel: "demo", manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/467", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193340"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "caNajbspANvlu4PZnvvWl90W483xGt1TgJbylc3Wu4o="
      envelope = @pubnub.revoke(channel: "demo", manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/465", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193340"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "caNajbspANvlu4PZnvvWl90W483xGt1TgJbylc3Wu4o="
      envelope = @pubnub.revoke(channel: "demo", manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/466", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193341"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "re4zes1gFHb10rBlkPmbsEA_YMzk5sR5kCgEHxJE-fc="
      envelope = @pubnub.revoke(channel: "demo", manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/464", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3RJyUJWZiCoXOzyfAInOBdCkVh1twj6gb6zycw0ZYDo="
      envelope = @pubnub.revoke(channel: "demo", manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/462", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3RJyUJWZiCoXOzyfAInOBdCkVh1twj6gb6zycw0ZYDo="
      envelope = @pubnub.revoke(channel: "demo", manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/463", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193343"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Pctp3ekXmZUbxE7rPATP6sIBhBkm22Yr2HkwX9QGO9Q="
      envelope = @pubnub.revoke(channel: "demo", manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/473", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193343"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UF1l-wV8SfwhAzAtnRiBQjLxeV9TIGDFmWJ_v-HdQi8="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/471", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eYnMrQYSqUV5QnRi6XsPLY8Q7-ktN8eZq_TKsikFhus="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/472", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eYnMrQYSqUV5QnRi6XsPLY8Q7-ktN8eZq_TKsikFhus="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/470", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193345"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TCg72aLa3ivfh-ri3bd0EANCWWo4J_k2BnWAfkbSw1M="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/468", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193345"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TCg72aLa3ivfh-ri3bd0EANCWWo4J_k2BnWAfkbSw1M="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/469", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ptgmCh9v4gVlmLB2G1obaHZCI6h-a_mfzb1f9xRrpQE="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/479", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZoS7Io0tHpTbwTd2sJH1fcYbLwzU_zj8y_x-sX2fGNk="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/477", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193347"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tTDoMoULEr4jWGc0bzLlOEhvx47s7X6nRRq6oKmbJZc="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/478", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193347"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tTDoMoULEr4jWGc0bzLlOEhvx47s7X6nRRq6oKmbJZc="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/476", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2rWwuptKHThNgyyYKV67LzeP69KyYUIbv-VEYTrA2f0="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/474", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2rWwuptKHThNgyyYKV67LzeP69KyYUIbv-VEYTrA2f0="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/475", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "djJ0PwX_FN6A9QgsRZmRD_E1uFyuHM0tHPX8HJEtauo="
      envelope = @pubnub.revoke(channel: "demo", ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/485", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7iJAcX4QNdWOwcGPAz1x4k0orTVCHH1J5RcdquDq2mA="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/483", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193350"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p1k5ZLALYiwqnvAnQvRiv4_NrBku1Y5kuRoqiRQlV6A="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/484", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "drNc2pZ2eU2oFbLxlQKJGmk_LDZ93D1pMLhdeuqioZg="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/482", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "drNc2pZ2eU2oFbLxlQKJGmk_LDZ93D1pMLhdeuqioZg="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/480", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vhKTC3aONVpUDGn5e__-GBf6G7IeuGFQ_i-2uxhQuqw="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/481", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vhKTC3aONVpUDGn5e__-GBf6G7IeuGFQ_i-2uxhQuqw="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/491", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1NuAX1CFWXPZWCbr0O_x6hvQBvkqJmAhk2FosE57Z_g="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/489", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1NuAX1CFWXPZWCbr0O_x6hvQBvkqJmAhk2FosE57Z_g="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/490", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k-GIK9TVY2gPe7zqB0PgaqzJ9Ok8JFi-KJLZ1-MLhRk="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/488", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k-GIK9TVY2gPe7zqB0PgaqzJ9Ok8JFi-KJLZ1-MLhRk="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/486", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KIFnX9Cy9YsQzNz2Y19WnHB8IZTfIj9d4Hdf0etfa7w="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/487", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KIFnX9Cy9YsQzNz2Y19WnHB8IZTfIj9d4Hdf0etfa7w="
      envelope = @pubnub.revoke(channel: "demo", ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/497", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "odnonpSUYe4BygXYBcLGfawFHPmULiLinTI5MXZ5EXE="
      envelope = @pubnub.revoke(channel: "demo", auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/495", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "odnonpSUYe4BygXYBcLGfawFHPmULiLinTI5MXZ5EXE="
      envelope = @pubnub.revoke(channel: "demo", auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/496", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vpyd8xYwEkPG198W4NbTWpvjyRWlrn7xfU31yJCr6bU="
      envelope = @pubnub.revoke(channel: "demo", auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/494", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vpyd8xYwEkPG198W4NbTWpvjyRWlrn7xfU31yJCr6bU="
      envelope = @pubnub.revoke(channel: "demo", auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/492", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DGPjVC76V-2IJBiNJc6S0AEazF8Tt4g4pRZHg3cJYj4="
      envelope = @pubnub.revoke(channel: "demo", auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/493", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ATZTOV2ed2i_uhukuRvPf5bJOLf8JKfnO8Wz65c_5TA="
      envelope = @pubnub.revoke(channel: "demo", auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/503", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9YNBHClTAAgkj-4ef-R8R2EKy-LDkHf6UfIvQakAHlE="
      envelope = @pubnub.revoke(channel: "demo", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/501", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193360"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wGrIjglePPC37bueFeS3hLI6KUjO2JFwjjG7UJYkOIE="
      envelope = @pubnub.revoke(channel: "demo", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/502", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193361"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S2iVO6QaLnw95bcBTCPtRn3puCqUEemmAgQ-caSN8zs="
      envelope = @pubnub.revoke(channel: "demo", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/500", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193361"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S2iVO6QaLnw95bcBTCPtRn3puCqUEemmAgQ-caSN8zs="
      envelope = @pubnub.revoke(channel: "demo", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/498", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0qMtKMURygIihVvjNf-8dKAUOGV_JrFXDUAfUa24NCc="
      envelope = @pubnub.revoke(channel: "demo", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/499", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0qMtKMURygIihVvjNf-8dKAUOGV_JrFXDUAfUa24NCc="
      envelope = @pubnub.revoke(channel: "demo", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3857", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bLBqZ05Dqm3JWjyAkzBV81V2C6OYai2q84n5RmlCbDk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3855", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qGYie9QzPr2DN__0F3drSbzvo2MANVhVikayjnI2xnc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3856", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qGYie9QzPr2DN__0F3drSbzvo2MANVhVikayjnI2xnc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3854", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193366"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ja1On6j1_1sOCgK_eZxv_oW-v2Nziu90-3228zUe5ns="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3852", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mUfqyDdofDk6OJgwSSwMflMpY8-yfBZGfzy86AeyxOM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3853", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mUfqyDdofDk6OJgwSSwMflMpY8-yfBZGfzy86AeyxOM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3863", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314208"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "58lYkSzd06TGMG-_BOWG6GuQMgfQ9ELYWURyB2XWWFQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3861", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314209"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sb8e6pGy2H2QkDhqEv1pxnkhjkBnTYUXZndZULpT7jE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3862", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314209"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sb8e6pGy2H2QkDhqEv1pxnkhjkBnTYUXZndZULpT7jE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3860", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314209"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sb8e6pGy2H2QkDhqEv1pxnkhjkBnTYUXZndZULpT7jE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3858", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314210"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ChYWqCpinmAxXFX4zcSyYaGHu_Ncvl9UHWn-A_q0XHs="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3859", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314210"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ChYWqCpinmAxXFX4zcSyYaGHu_Ncvl9UHWn-A_q0XHs="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3869", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193368"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NSyXUR4Yk72gp_X4CNI5fKjWwLo-m6yDQxmVnXqKMpU="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3867", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EjUeGG73LLlv92XuUnn_nFxH5vk1fwPKvt1sQgqOZmM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3868", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EjUeGG73LLlv92XuUnn_nFxH5vk1fwPKvt1sQgqOZmM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3866", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193370"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yg-CMV89vttsLadYFN8urf8J5ZoLNKf9u6LnuGhwd5A="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3864", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Du9OP-Jze_nzV0sJJYpV-4Rk02vrUiA26hEJP5fzVGM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3865", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Du9OP-Jze_nzV0sJJYpV-4Rk02vrUiA26hEJP5fzVGM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3875", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314210"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Eu95Eww5Np9v3P8Y0kQQ26U2f0cq3V-r9U1mnrDdm_g="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3873", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314211"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2su5rXQwLc2f6xsHZ4OnPDNzOIQ6DQy07AjFJ8mruk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3874", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314211"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2su5rXQwLc2f6xsHZ4OnPDNzOIQ6DQy07AjFJ8mruk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3872", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314211"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2su5rXQwLc2f6xsHZ4OnPDNzOIQ6DQy07AjFJ8mruk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3870", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314211"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2su5rXQwLc2f6xsHZ4OnPDNzOIQ6DQy07AjFJ8mruk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3871", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314212"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LPut7n2S6fBizF9Od9RFkIud6hCu4q28oNpI3JRD9_Q="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3881", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ebZe4qIFW-Ojz00TsR93kjWalFk8q8-Urn2sjqGXsjs="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3879", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ebZe4qIFW-Ojz00TsR93kjWalFk8q8-Urn2sjqGXsjs="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3880", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fkeZALTcTH3Lbee-uEcraHggD-T6Vwp-sYAhnTYIsQU="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3878", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5j12N_0atZwverfBh7JXy9VOqKIlhz8qbOS9AHCC7vw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3876", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5j12N_0atZwverfBh7JXy9VOqKIlhz8qbOS9AHCC7vw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3877", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193375"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "b6_sFN6KaxYYL4O6NTgkh3g4VtR3QJIy1tn3VnCH8So="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3887", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314212"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CXbl_L6UwSBRYPOAjIHPazjWQP6n_ULEbrGJu5hMxpc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3885", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314212"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CXbl_L6UwSBRYPOAjIHPazjWQP6n_ULEbrGJu5hMxpc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3886", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314212"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CXbl_L6UwSBRYPOAjIHPazjWQP6n_ULEbrGJu5hMxpc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3884", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314214"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NMkIL_mUeVrExYqxBISD32dPFzqW_PFtqllPa5THNM4="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3882", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314214"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NMkIL_mUeVrExYqxBISD32dPFzqW_PFtqllPa5THNM4="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3883", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314214"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NMkIL_mUeVrExYqxBISD32dPFzqW_PFtqllPa5THNM4="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3785", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RxZ3gj_XCkjY7-kF3358ccv9nTWm-sHm2zDj-t3WFBo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3783", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RxZ3gj_XCkjY7-kF3358ccv9nTWm-sHm2zDj-t3WFBo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3784", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fRZDiFJc6xsvJj0UwBh3VRu-v3NWyCJuwO-mg5hdngI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3782", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dt6R8OxaJZF8dPZot8Xl7eUMk_WIgY1zvFXDCjjARe0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3780", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dt6R8OxaJZF8dPZot8Xl7eUMk_WIgY1zvFXDCjjARe0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3781", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x88Nu3x0mRJHA6B18QQG6VtgOM0D-NxnlZQeOsL16v8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3791", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314214"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WT0-EkFEeUchEUcDBSAnpjHpyuiIwlaSqqqanoeg24g="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3789", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314215"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mcF-STGpFDaYzEiY81TWQAdFUR8Liz-VBjglDpIznbE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3790", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314215"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mcF-STGpFDaYzEiY81TWQAdFUR8Liz-VBjglDpIznbE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3788", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314215"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mcF-STGpFDaYzEiY81TWQAdFUR8Liz-VBjglDpIznbE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3786", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314216"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g_HvFegCJEHoc1YuPXVKiQeDQk49s2Unnjadnq-0TJo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3787", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314216"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g_HvFegCJEHoc1YuPXVKiQeDQk49s2Unnjadnq-0TJo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3797", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fOWdC4Dq6QxBbmOMg2SHKrj7xXk-BDybu6LpZxtUZO8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3795", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rRrJnCYLokDO8JxWNgRHPlBWuGY6jLDTJYA1nTynK-U="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3796", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rRrJnCYLokDO8JxWNgRHPlBWuGY6jLDTJYA1nTynK-U="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3794", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C5s_2MD8ahK52wIKnYcY25NLZDQBHIPZEnIeTgYRETM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3792", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C5s_2MD8ahK52wIKnYcY25NLZDQBHIPZEnIeTgYRETM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3793", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6nbUUQZt_REdVoYIh-mCgguBL19jcyAOXa4rEwPammI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3803", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314216"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hd2SFcixNxLlOECqHtORS_SbvFku_WAzHlqF5zyReYM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3801", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314217"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2blyuHToFuTcpw6OWyKiy4iZ9jxznboOVW5SjzivSs8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3802", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314217"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2blyuHToFuTcpw6OWyKiy4iZ9jxznboOVW5SjzivSs8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3800", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314217"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2blyuHToFuTcpw6OWyKiy4iZ9jxznboOVW5SjzivSs8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3798", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314217"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2blyuHToFuTcpw6OWyKiy4iZ9jxznboOVW5SjzivSs8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3799", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314218"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cJAY9bp0tNIq_6ZiuBBpWpggNUpbe2JDdJt4xEjGmzo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3809", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nk1XZktmugej80Jshdxu5BDLvsBOewq8jX96Pb5BHSI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3807", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q9fgEhD0fco6I9SZq9G5DkOp15c5bbjj0KuhCLNRzlc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3808", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VQ4sYo5kCQ8dcAe52Qiwi7nqp6VTUTOo8xeCdU3fssU="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3806", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VQ4sYo5kCQ8dcAe52Qiwi7nqp6VTUTOo8xeCdU3fssU="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3804", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tcOVSRodJHTh2vMK9X2Ck9ulKIidh8pWLMPi9FG2H94="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3805", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193389"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_rGJKv7AoZfENJvlQIeBzXWb08RpeeUFcpSN0nP5uQ8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3815", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314218"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vGLWGjGCXHGFZNvWHfbtWyovdp11kRKb8ZdQgHu2ix8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3813", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314218"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vGLWGjGCXHGFZNvWHfbtWyovdp11kRKb8ZdQgHu2ix8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3814", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314218"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vGLWGjGCXHGFZNvWHfbtWyovdp11kRKb8ZdQgHu2ix8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3812", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314219"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8vxvED1m7ujAGCAjhQFpNxoOS-BYvao6PolJJMnLdGE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3810", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314219"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8vxvED1m7ujAGCAjhQFpNxoOS-BYvao6PolJJMnLdGE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3811", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314219"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8vxvED1m7ujAGCAjhQFpNxoOS-BYvao6PolJJMnLdGE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3821", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CAlD_MUCVr7ZIRgN0HO_CvUPJT4G8HQDuAG-pN6UXtM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3819", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IA8sICOxLOYGo6clkY79Iez3V40dIKb55VJitGIq-UI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3820", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IA8sICOxLOYGo6clkY79Iez3V40dIKb55VJitGIq-UI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3818", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3qZnvPBbnwM00z4du_8ktU-hmEc8WXCxWAfi5qI0bpg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3816", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VrGQQYiapgWrNC-87CDL6wpe6DJ2Z5VzjHnlCSKMBCo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3817", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VrGQQYiapgWrNC-87CDL6wpe6DJ2Z5VzjHnlCSKMBCo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3827", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314219"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6Yi6Yoj_CSluwfzJHbmFFxJmGk5ngjZvEeLpKE7DzUc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3825", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314220"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2RNoS1RlS5zCyP3HL6o2PyJ24AGm1Qp8SmHJF_IVidc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3826", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314220"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2RNoS1RlS5zCyP3HL6o2PyJ24AGm1Qp8SmHJF_IVidc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3824", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314220"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2RNoS1RlS5zCyP3HL6o2PyJ24AGm1Qp8SmHJF_IVidc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3822", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314220"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2RNoS1RlS5zCyP3HL6o2PyJ24AGm1Qp8SmHJF_IVidc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3823", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314221"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AnDsGPbdmZMW3C9mPMMUlsv2wBvWWEdC788AazcAFGw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3833", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WX2sQSM8wEfiHDrtzGZny4r5KSKJzoJDOBWsKVNovNk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3831", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WX2sQSM8wEfiHDrtzGZny4r5KSKJzoJDOBWsKVNovNk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3832", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193395"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aO0K1dmz0wcItvI_aldo-lmrtuLMrKDUsBdk3oFac-E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3830", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rO_aAId8VnRpwh3OzuBtYKHWyK-4hipYTY5QaVJ9Z0w="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3828", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rO_aAId8VnRpwh3OzuBtYKHWyK-4hipYTY5QaVJ9Z0w="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3829", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193397"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3v1WiN_EdbT_jSVTOVQloCVJ-kyWLd5FHpSdOLyvHPI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3839", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314221"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hxRV80RkEiMCLM6AzArpNJP_-jg_uMZCCPDNaRAPafI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3837", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314221"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hxRV80RkEiMCLM6AzArpNJP_-jg_uMZCCPDNaRAPafI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3838", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314221"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hxRV80RkEiMCLM6AzArpNJP_-jg_uMZCCPDNaRAPafI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3836", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "49aZQ7WQbKSh6YGRTZIupKh5gk7qv_j50xZlYDWQm7E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3834", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "49aZQ7WQbKSh6YGRTZIupKh5gk7qv_j50xZlYDWQm7E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3835", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "49aZQ7WQbKSh6YGRTZIupKh5gk7qv_j50xZlYDWQm7E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3845", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193398"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4Ama7xG8rniT34DZyFZYHX_ATtA9BZVFr9qe0Y_3rI4="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3843", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193398"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4Ama7xG8rniT34DZyFZYHX_ATtA9BZVFr9qe0Y_3rI4="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3844", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193399"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bWBKPbQfQtbcjC6oKMjhI-yaiY-RTpgpzIBxChcRlmk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3842", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193400"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DV4RR02ECSXkW_L6d5kQKK_q2de0hyO_SH_3bAQ1uMY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3840", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193400"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DV4RR02ECSXkW_L6d5kQKK_q2de0hyO_SH_3bAQ1uMY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3841", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dhdEur04DNsti84-xuhFCcSuslUqSeooRZLrsp2YFpo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3851", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7M_oKNxEkks0S5aXjrclHL5PJoUL8rJRIFSPTzXVxCM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3849", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314222"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7M_oKNxEkks0S5aXjrclHL5PJoUL8rJRIFSPTzXVxCM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3850", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314223"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vbhuRbzScdr2Ot2L2MBp9ln5YHyWnIbZtFQyi_Dd30E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3848", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314223"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vbhuRbzScdr2Ot2L2MBp9ln5YHyWnIbZtFQyi_Dd30E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3846", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314223"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vbhuRbzScdr2Ot2L2MBp9ln5YHyWnIbZtFQyi_Dd30E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3847", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314223"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vbhuRbzScdr2Ot2L2MBp9ln5YHyWnIbZtFQyi_Dd30E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3641", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dE8q_z8HG4kY4Wzi8uaLcJofnYdceBw6G3LFKI0_NYY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3639", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7RlrIVtNLV8fxBOqu3VV98ty3SgZ2gkV0KYNvoTpLUI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3640", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8K51FtjLULjLe8Io-aw-mWBOV2V0qtCu8FsoMnzrLiE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3638", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8K51FtjLULjLe8Io-aw-mWBOV2V0qtCu8FsoMnzrLiE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3636", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193404"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VfDSeiiJ0OlC5HUfRdDckOgpj2OAAO9WGJTNVs_Gehg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3637", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qw9gs9DdnSrDOrlhW5PEuIy64vf0zrjmqPgENLCcixM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3647", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314224"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ai3PQSlsZVnXnv8FxeC-q1F3A8q2pJApcuIKKgxLs9Y="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3645", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314224"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ai3PQSlsZVnXnv8FxeC-q1F3A8q2pJApcuIKKgxLs9Y="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3646", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314224"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ai3PQSlsZVnXnv8FxeC-q1F3A8q2pJApcuIKKgxLs9Y="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3644", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314224"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ai3PQSlsZVnXnv8FxeC-q1F3A8q2pJApcuIKKgxLs9Y="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3642", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314225"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cIOevpn0Zs89a6Z17s0tCCzD0m4ku2gDq0DKlzEFV2g="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3643", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314225"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cIOevpn0Zs89a6Z17s0tCCzD0m4ku2gDq0DKlzEFV2g="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3653", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jxhGQ8ddYqRFgEubPELXPg_J1rwYgoozMhWbBRkoRyk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3651", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193406"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "moYH2ygsUWiiyy8AuacZlxhPb7Yp8qrus5khQY1dlVw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3652", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V9l_p4_W7w-8joUiya8k5rF0tXSzrRdjl6-YxW8IKXo="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3650", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_lBlhtjEjTbtDR4TvGmVO6UMl703ae-e6mOaNVwNIAQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3648", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_lBlhtjEjTbtDR4TvGmVO6UMl703ae-e6mOaNVwNIAQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3649", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193409"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fv3RMtqP6oT-USwRT-fmRCJpHPYiW96OcRuspfbX7p8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3659", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314225"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "07tVDIifIhngtKrj5cWInuS3TaYGidiFj7y-FlrvERE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3657", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314225"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "07tVDIifIhngtKrj5cWInuS3TaYGidiFj7y-FlrvERE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3658", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314226"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CAtyJGMCXltPNrATYqrkUICWMvDKR4kZkAnJhIrq7aw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3656", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314226"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CAtyJGMCXltPNrATYqrkUICWMvDKR4kZkAnJhIrq7aw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3654", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314226"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CAtyJGMCXltPNrATYqrkUICWMvDKR4kZkAnJhIrq7aw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3655", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314226"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CAtyJGMCXltPNrATYqrkUICWMvDKR4kZkAnJhIrq7aw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3665", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z442l3_O-U4uJJP3BMut3FHxNzgK-i2C6jO_w_S82o0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3663", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z442l3_O-U4uJJP3BMut3FHxNzgK-i2C6jO_w_S82o0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3664", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "413DT0qAHsytCXPkm5aSdVUBeU0Vqn249R0sFWVzZKw="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3662", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0VjliAmNCSKHpS9r_pfnG0N51bh6o9Xgf6QNjDW9Nd8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3660", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0VjliAmNCSKHpS9r_pfnG0N51bh6o9Xgf6QNjDW9Nd8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3661", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sfkqoLouglKxW-NqAknz4GzdzeU6QXqzlDP_LMY7-3E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3671", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314227"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WkyUcCc1SDcZje4z3tpxj5qRvEVEVoGluld6ZKQ-tZg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3669", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314227"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WkyUcCc1SDcZje4z3tpxj5qRvEVEVoGluld6ZKQ-tZg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3670", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314227"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WkyUcCc1SDcZje4z3tpxj5qRvEVEVoGluld6ZKQ-tZg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3668", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314227"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WkyUcCc1SDcZje4z3tpxj5qRvEVEVoGluld6ZKQ-tZg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3666", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314228"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KvEf0GAasN-kUUDhSLhNIJJLB5IbNV-b2mGUDBAo6B0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3667", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314228"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KvEf0GAasN-kUUDhSLhNIJJLB5IbNV-b2mGUDBAo6B0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3569", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6fXcsGZ0bxEvaI5ZN93XdQIhxh9A_mZeBL7yhf_x6Wc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3567", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193414"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1QxIfVTNULVcDlJIq4q6wBB1x7fExCukqlhNdX0_3o0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3568", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IW65E8tV_Kso2KKzKEpm9zQceFzo-vHM9O7hJwAdTe0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3566", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IW65E8tV_Kso2KKzKEpm9zQceFzo-vHM9O7hJwAdTe0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3564", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193416"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dGY7p014DamplErsrOFqn3JkfRTKaa1vb4FKtZ-7Kjc="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3565", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193417"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jIZVWbMBopDd-7p04MdrW4J2FAQKmXBy5LJZki7Cfr0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3575", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314228"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zBZfOxG-ERMVTbjGNogQK5XuauKIqn9njNe4qIRJNYM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3573", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314228"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zBZfOxG-ERMVTbjGNogQK5XuauKIqn9njNe4qIRJNYM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3574", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314229"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F1B5sdhxRqmNQTFtBPmpNCwza2VUylGDPHrmy70x-e8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3572", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314229"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F1B5sdhxRqmNQTFtBPmpNCwza2VUylGDPHrmy70x-e8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3570", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314229"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F1B5sdhxRqmNQTFtBPmpNCwza2VUylGDPHrmy70x-e8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3571", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314229"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F1B5sdhxRqmNQTFtBPmpNCwza2VUylGDPHrmy70x-e8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3581", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193418"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6eMb0rowI0LcIdJjst6HODnVrPaSPUKIwxKPsHxfo7M="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3579", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193418"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6eMb0rowI0LcIdJjst6HODnVrPaSPUKIwxKPsHxfo7M="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3580", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193419"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "d-gZGqiRXNjzf9SkC52D6LAJQRnFJ7ejwHxc9kAfrWg="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3578", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vLAlrMcsGLmnc5Up3WStoJRQSzx1z4tzO8qYtsT81MI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3576", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vLAlrMcsGLmnc5Up3WStoJRQSzx1z4tzO8qYtsT81MI="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3577", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7p-kzYsc36kJlsD-s_Ip4Nj8aUEADKUefhObD38Sw3s="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3587", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314230"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PclwzAY0gxVO3YU0nEuQWllnlWwvpu8nfq1EcVuj9Ik="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3585", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314230"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PclwzAY0gxVO3YU0nEuQWllnlWwvpu8nfq1EcVuj9Ik="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3586", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314230"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PclwzAY0gxVO3YU0nEuQWllnlWwvpu8nfq1EcVuj9Ik="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3584", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314230"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PclwzAY0gxVO3YU0nEuQWllnlWwvpu8nfq1EcVuj9Ik="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3582", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314231"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uAN-WbqjUToxS5ysgMfjR_hzBo3NkMEOqjU8wvZHnBM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3583", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314231"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uAN-WbqjUToxS5ysgMfjR_hzBo3NkMEOqjU8wvZHnBM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3593", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uNUy60h3b01C0XAB0ZrM3IaF2mLANRYM8JAjq5vpnZM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3591", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uNUy60h3b01C0XAB0ZrM3IaF2mLANRYM8JAjq5vpnZM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3592", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193423"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Vc1jC7Qx2ubQt_5aR1X8Uc148284vb-MM7k3wauKWqY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3590", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aey8NlHLsMZ3MixJk0qQVmECB3dBgLPnpXEv8ohOBkQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3588", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aey8NlHLsMZ3MixJk0qQVmECB3dBgLPnpXEv8ohOBkQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3589", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0cYKaAImeZ5aEKBa2NlEQCBd2G7kwQBCfy26Jo5Tx2M="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3599", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314231"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "94IGglYTo-blly0ACf5okppk8QgpOWZiyhY4OtVJf_E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3597", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314231"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "94IGglYTo-blly0ACf5okppk8QgpOWZiyhY4OtVJf_E="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3598", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314232"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9ApYQZa9Ymt78iZxGZC7Js0_fUAxl5fHUNAWnBE0V4o="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3596", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314232"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9ApYQZa9Ymt78iZxGZC7Js0_fUAxl5fHUNAWnBE0V4o="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3594", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314232"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9ApYQZa9Ymt78iZxGZC7Js0_fUAxl5fHUNAWnBE0V4o="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3595", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314232"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9ApYQZa9Ymt78iZxGZC7Js0_fUAxl5fHUNAWnBE0V4o="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3605", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VWaWwidVPpR8RISWxrnfddr7KP6HzkGDqCPnsATFXJA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3603", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VWaWwidVPpR8RISWxrnfddr7KP6HzkGDqCPnsATFXJA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3604", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193427"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "60FtNBUc4N6rRrlJMdCN3-vEGWKR0lippVckueeusW0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3602", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193427"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "60FtNBUc4N6rRrlJMdCN3-vEGWKR0lippVckueeusW0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3600", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JN7qvSGJnmCFgQO-Ag7X9Z3bRFLabzJZQcy9o-1nwJM="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3601", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MP_l3J2cq31JMnS1DwhUwBk4yUp57W5s6GsRjdUIgxU="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3611", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314233"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NiIxczsRe15fmiBgVAyM1IzRW9R7nG4lUP0mxOttG6o="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3609", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314233"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NiIxczsRe15fmiBgVAyM1IzRW9R7nG4lUP0mxOttG6o="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3610", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314235"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "11bNEaKLc2X3-RhPrbIlDO93_eqkvZ1eWxV8oMUW4aA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3608", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314235"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "11bNEaKLc2X3-RhPrbIlDO93_eqkvZ1eWxV8oMUW4aA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3606", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314236"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CTEz7zfx5sPjTsoBESfUHeJI5Buvk-oAr1EqpP5Brsk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3607", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314236"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CTEz7zfx5sPjTsoBESfUHeJI5Buvk-oAr1EqpP5Brsk="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3617", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zozH2ATNRqdvI9HizPm4Ja5_pLhilQm01l9z3vYLc3s="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3615", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193430"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "joE7UxFu41jrSM6J1tMdS_GBpiNGNpLBZl9de8vWkHE="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3616", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KPIBDys_hwenlDWKa4cyzJtoz7MsyEoOhc3ERkU0dis="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3614", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zkko9KOcPnXqxq8pir5kEoBqJabFcjmLIvEQE5XatI0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3612", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zkko9KOcPnXqxq8pir5kEoBqJabFcjmLIvEQE5XatI0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3613", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193433"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y4oqXdaygq1I9kLAGFZlk0QcoKXMTs1SqAX9xWo4d9A="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3623", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314236"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RUVkaCqgY1NFQSZkQHMpIsuC6mXMpKheYgPr72Ntmf0="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3621", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314237"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iNN65uaZ7hxEW3UzkymlPrpsWZ00Vg6JqzfAeNAh7xQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3622", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314237"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iNN65uaZ7hxEW3UzkymlPrpsWZ00Vg6JqzfAeNAh7xQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3620", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314237"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iNN65uaZ7hxEW3UzkymlPrpsWZ00Vg6JqzfAeNAh7xQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3618", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314238"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UCQ1_n4Z7XuUDuebz4S6-s8fuwSQ2MMfvPht3yiE9nY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3619", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314238"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UCQ1_n4Z7XuUDuebz4S6-s8fuwSQ2MMfvPht3yiE9nY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3629", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7IAkG5zbIGrkJBA9db1IKjb_Ycn-UK-CWXHI3xftM4g="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3627", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193435"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VdIsTGWk0nnEZwFjqwTwci9U5dZUZiYQLN645XydsyQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3628", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193435"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VdIsTGWk0nnEZwFjqwTwci9U5dZUZiYQLN645XydsyQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3626", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qTu8aBF5yNUz1ouyp6FyNBbbqg3EaN7y3jS-6SHzRAY="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3624", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8pxVqiWO6NqJVuoXgAi3MlIfiCB1KpqZgSGK4ASE56U="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3625", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8pxVqiWO6NqJVuoXgAi3MlIfiCB1KpqZgSGK4ASE56U="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3635", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314238"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "878J9sDxd_Bl9HtK-_q0525PWAamgy2iIuM7mzzq2dA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3633", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314238"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "878J9sDxd_Bl9HtK-_q0525PWAamgy2iIuM7mzzq2dA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3634", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314240"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fz-447Dq1c3tkCGgWX9vspmRV79q-JW-GcXWCaSKPfA="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3632", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314241"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KKAGDDtw3ZeXrmHdW9Ez8EcmAjBg4H-wupIdHstYxSQ="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3630", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314242"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Jkkw1hRsZEHFjAlTClrmsaf-pagW0vD0FXuocNZXB9I="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3631", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314243"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kQxfYeYK-rdV_N9RKTEGXo61APm8V6tRTJ_sPNSqre8="
      envelope = @pubnub.revoke(group: :demo, read: true, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3749", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PXBoxaEM1UkiWMZOj-5qK0yxcFnyadDqTn-WoHzFXJs="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3747", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PXBoxaEM1UkiWMZOj-5qK0yxcFnyadDqTn-WoHzFXJs="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3748", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_j2-ul4FJOzZVM6CCvJznbwmYrYrMaKFuso0qn5XukU="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3746", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iI69Ewc01d6ym-3eJwOiWYRXw7ndPhn4veNKuKjQHkQ="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3744", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iI69Ewc01d6ym-3eJwOiWYRXw7ndPhn4veNKuKjQHkQ="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3745", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NUCkdq0jOjE3kYdiRJ1fno311mKzMLKS4uYTTx3fe00="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3755", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314243"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sLW9hKiZc3KdfroUMKXHrsJefQG9SLMAQbxp7_WDiNw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3753", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314243"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sLW9hKiZc3KdfroUMKXHrsJefQG9SLMAQbxp7_WDiNw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3754", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314244"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ngw9Y6Syo76J_rLHAOq9kd8_YvEBBCgZmxKBDv521U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3752", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314244"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ngw9Y6Syo76J_rLHAOq9kd8_YvEBBCgZmxKBDv521U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3750", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314244"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ngw9Y6Syo76J_rLHAOq9kd8_YvEBBCgZmxKBDv521U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3751", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SCPQsVYctu8pAHK7SnQ8RRdhvOAokHXuA2cQrr1bHOo="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3761", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z_2Neivyq4SzgTRe4JvljNAXKJzVBek2jkpWVhMsuyE="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3759", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z_2Neivyq4SzgTRe4JvljNAXKJzVBek2jkpWVhMsuyE="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3760", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mYhArYXkD8twMfK9fSzMUUi617qxdL_Ga2xNAvu9eIU="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3758", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OpffSH-lcnsIaz2HOvSJJcE1hqOOqiovaWqatFz2Mo4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3756", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OpffSH-lcnsIaz2HOvSJJcE1hqOOqiovaWqatFz2Mo4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3757", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193445"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r9SJ87VidQs-eYBKvz3B1eTGux54YA_7u_7UHbE6Jiw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3767", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j6erACQK9FqZ6ix3vIs-IXf1jq25ziR04SNncLZsQl0="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3765", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j6erACQK9FqZ6ix3vIs-IXf1jq25ziR04SNncLZsQl0="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3766", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j6erACQK9FqZ6ix3vIs-IXf1jq25ziR04SNncLZsQl0="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3764", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tA5A0ITmJ2Acq-4VsWA0Mx25RyiaNLRHd_0cEqojolw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3762", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tA5A0ITmJ2Acq-4VsWA0Mx25RyiaNLRHd_0cEqojolw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3763", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tA5A0ITmJ2Acq-4VsWA0Mx25RyiaNLRHd_0cEqojolw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3773", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FqvXACtx4QH-DbJOgnsl4QP6W4zOs8N6h8isOrwwsQ4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3771", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FqvXACtx4QH-DbJOgnsl4QP6W4zOs8N6h8isOrwwsQ4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3772", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EAeWWSQyxGKT6pkK_IH-Ai2Brk1O9MheIi_lO7Cc4QI="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3770", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5rREvKTPUszxLJYKbUt3P6vjGZ0O5cApyWC9QNSyl9U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3768", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5rREvKTPUszxLJYKbUt3P6vjGZ0O5cApyWC9QNSyl9U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3769", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zp0DeMIba3ngi5MEUio9M5L0LRVR3CnsmY6SEqyiHL8="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3779", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_KHVZfj7fmuBg_BZk9L1IVtbg9MNcKi4xfjjEwnVKVE="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3777", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_KHVZfj7fmuBg_BZk9L1IVtbg9MNcKi4xfjjEwnVKVE="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3778", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314247"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FRbVB7n7JO5HVBfPlf4NTJQ0yITa-7JUP-nNl2NNi8g="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3776", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314247"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FRbVB7n7JO5HVBfPlf4NTJQ0yITa-7JUP-nNl2NNi8g="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3774", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_ysX8IHPVmZBgydvJqA1e7jx8N8dKEC2CKa51LFrPCM="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3775", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_ysX8IHPVmZBgydvJqA1e7jx8N8dKEC2CKa51LFrPCM="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3677", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N88eK844_O4n4ygPZ5_3CAoSdgohUExQCkOV8EqcFfI="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3675", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J6QRsvBJhhUHZ8aln1lNah3sDNkI3XNPrUqR-hDvyPE="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3676", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193453"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wSZ8PkdqRcop1fo4RDqFlzfeIg3CdPVvNnVGqcuPJEE="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3674", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zyY4e6pH60Rxr0ov54tdAOyZWkVrsVCY9ZUqAfhLk7U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3672", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zyY4e6pH60Rxr0ov54tdAOyZWkVrsVCY9ZUqAfhLk7U="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3673", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mKHi51liAUIMbxNyb_m2AL9HMWTXj8LlRQnXt4zXWn4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3683", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nloqt0Q8gcBb4nc8AjrU1U_Lco1Q8VbzMMYzwWKa1y4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3681", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eXBvh774Dm7vtFOHhru1QlaHMIYJDSP5hT5rRaLfuDg="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3682", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eXBvh774Dm7vtFOHhru1QlaHMIYJDSP5hT5rRaLfuDg="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3680", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eXBvh774Dm7vtFOHhru1QlaHMIYJDSP5hT5rRaLfuDg="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3678", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lZOfKhw82cSMtMtkCoOBGLF3F0qW4t_7dNIGSiCp-Ck="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3679", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lZOfKhw82cSMtMtkCoOBGLF3F0qW4t_7dNIGSiCp-Ck="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3689", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nHvQieJu1gF3vvzCgwXIe6T96lecA_PhxAg8bCudaIA="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3687", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nHvQieJu1gF3vvzCgwXIe6T96lecA_PhxAg8bCudaIA="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3688", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vh9g5sApHjMzO6Fo9JETs5W5gjy6gtKS5kaUlcxwWVw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3686", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yiqAR-jmHW6q_KCh0TlZk3iIfPrvuFWiqC0RyWUgkDU="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3684", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yiqAR-jmHW6q_KCh0TlZk3iIfPrvuFWiqC0RyWUgkDU="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3685", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LEJNwNCBhvpdd_GY9wu0JlmgjBLpQ8ryzc6idhBTFDc="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3695", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BKIrhViBFTj6izq71qLSVzd2SVAdiX1FUamhWe9gO2M="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3693", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BKIrhViBFTj6izq71qLSVzd2SVAdiX1FUamhWe9gO2M="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3694", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314251"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "01zAy1l_bJ_f-qQmzVdjMkizTObidDzMNarcHStftBs="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3692", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314251"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "01zAy1l_bJ_f-qQmzVdjMkizTObidDzMNarcHStftBs="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3690", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314251"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "01zAy1l_bJ_f-qQmzVdjMkizTObidDzMNarcHStftBs="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3691", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3SfQuT8e8dHoAIIE8EPHmi2TL5ri04tHFj5uig7blz0="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3701", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193460"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UWjSFOe2hHUCk7QfXO2ms-9xAKOZh9JROi9zDcjl8pc="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3699", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193460"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UWjSFOe2hHUCk7QfXO2ms-9xAKOZh9JROi9zDcjl8pc="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3700", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-aqNlfaJROErSnOKb6eDhJlQqYhWF7HES4NQov8EZO0="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3698", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193462"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yLJJfpXItcVSZeFcVxy1CJQ1GgIVy_RLcVOlDeqEGiQ="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3696", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dzpSDc2-ez4DM0ou3Gxs8SPwy9v0vvYEn-atfGu7jIM="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3697", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dzpSDc2-ez4DM0ou3Gxs8SPwy9v0vvYEn-atfGu7jIM="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3707", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MHJDcgfXiKz5ztdapyW7ZNRhqRdhadano4CJZ6swl90="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3705", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MHJDcgfXiKz5ztdapyW7ZNRhqRdhadano4CJZ6swl90="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3706", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MHJDcgfXiKz5ztdapyW7ZNRhqRdhadano4CJZ6swl90="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3704", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314253"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JnDzPXuObhtTTHO6i0ztQnLJDRygAh0Iyj5mDYdEjE4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3702", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314253"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JnDzPXuObhtTTHO6i0ztQnLJDRygAh0Iyj5mDYdEjE4="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3703", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314254"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PjHOioHFVErSJMuMGq0XUg7E13wbQjgy-kHQvkNX-Pw="
      envelope = @pubnub.revoke(group: :demo, read: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3713", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193464"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8iXGw-1nBM54Rba2_oQgNI-fm5h4Q9PgbhMoMc7hoGE="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3711", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193465"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ckIOluafI02ucKPR0pHz6R7KWVCmc4EjFkzfswl5H5g="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3712", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193465"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ckIOluafI02ucKPR0pHz6R7KWVCmc4EjFkzfswl5H5g="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3710", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KQY7wI0LLWLlLe20KLKrQdMdibMSpIYdHDIQsoqL4-Y="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3708", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9Dw2x3Cmw7Bn_eXOx-ydJAYJIwHa3nEoDqhz_cR8wBQ="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3709", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9Dw2x3Cmw7Bn_eXOx-ydJAYJIwHa3nEoDqhz_cR8wBQ="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3719", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314254"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fBxr4VsC4kj52UbhhFo49JtvlVlmvpZpTOkH9iDqURE="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3717", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314255"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZqBmH_Z-vY5Nkg9GhqveZ7PyMF5-qfeiiX4r5gLQc1Y="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3718", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7oi71oTF-XvHWMo9VN--gtl1p6b09nrDn27d0mkRDwU="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3716", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7oi71oTF-XvHWMo9VN--gtl1p6b09nrDn27d0mkRDwU="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3714", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7oi71oTF-XvHWMo9VN--gtl1p6b09nrDn27d0mkRDwU="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3715", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7oi71oTF-XvHWMo9VN--gtl1p6b09nrDn27d0mkRDwU="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3725", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2nB0jT_EzVfmxHuCF0QK4aS3LS4FTznToLhsyrPU5rw="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3723", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z4SXopm-veJDzou1pB3ushkWk8uTwHTW1wOGjIbmv4E="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3724", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z4SXopm-veJDzou1pB3ushkWk8uTwHTW1wOGjIbmv4E="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3722", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6iDVD5vIArD6X8-MZblZBUcAOE0M1NM7yqS254GK71Q="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3720", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WZrUTMQ7ACrDHSevtu-FP93FUti3kMlhnCBaOwXlfNE="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3721", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WZrUTMQ7ACrDHSevtu-FP93FUti3kMlhnCBaOwXlfNE="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3731", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314269"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TGzSdZvAczuJB64wWBpETDQKbizdKGob2Y4svBrfWmM="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3729", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314269"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TGzSdZvAczuJB64wWBpETDQKbizdKGob2Y4svBrfWmM="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3730", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314271"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jFWNR2f4NCkVC6jS72iGL1utA9Qpve4ZV9kSgp1ToG8="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3728", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314273"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MBmf60UOT2tsGMGzUOk8cbb3S8zz4PF49Gjx6Qaikbc="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3726", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314274"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uQ5zQLz7-0sAuCTdEs7x_tgAW_A90Nu61iwtHG0lseA="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3727", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314274"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uQ5zQLz7-0sAuCTdEs7x_tgAW_A90Nu61iwtHG0lseA="
      envelope = @pubnub.revoke(group: :demo, read: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3737", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193472"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UghU6KEQhhn6WPZSvbWAP8G_PZ55bZYh3mmSB5IbNrE="
      envelope = @pubnub.revoke(group: :demo, read: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3735", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193473"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iWwJmxLwLEmxu5DImFNR_9XkZIS5PZ2RYZXNrGKs5h8="
      envelope = @pubnub.revoke(group: :demo, read: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3736", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SILC4le3fLZ5oy3PJP_a-xJ9PVN2HNMBDErRKt9ZCTI="
      envelope = @pubnub.revoke(group: :demo, read: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3734", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Iwe9xRlFc0ac1VGcOn12LGH9rs0CtymXQ3L8aU2js1g="
      envelope = @pubnub.revoke(group: :demo, read: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3732", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Iwe9xRlFc0ac1VGcOn12LGH9rs0CtymXQ3L8aU2js1g="
      envelope = @pubnub.revoke(group: :demo, read: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3733", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fiNkU8bDs-jy1MXFEDYBIg4IjJGOnwUkR1xpoevGrqM="
      envelope = @pubnub.revoke(group: :demo, read: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3743", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lPP2VgszqK5hxLXeoleZQ2njw8H51cCLj8MqN2cKt7A="
      envelope = @pubnub.revoke(group: :demo, read: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3741", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lPP2VgszqK5hxLXeoleZQ2njw8H51cCLj8MqN2cKt7A="
      envelope = @pubnub.revoke(group: :demo, read: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3742", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lPP2VgszqK5hxLXeoleZQ2njw8H51cCLj8MqN2cKt7A="
      envelope = @pubnub.revoke(group: :demo, read: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3740", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lPP2VgszqK5hxLXeoleZQ2njw8H51cCLj8MqN2cKt7A="
      envelope = @pubnub.revoke(group: :demo, read: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3738", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314276"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KAefJVAO23PeUnK472ldBZZxFRaL5lnwWRHJeYk6Gmg="
      envelope = @pubnub.revoke(group: :demo, read: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3739", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314276"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KAefJVAO23PeUnK472ldBZZxFRaL5lnwWRHJeYk6Gmg="
      envelope = @pubnub.revoke(group: :demo, read: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3209", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m6zLHYcQGyk2Tq9wHWvMal10xPi7J-2Kdo-Qy1ZaSk8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3207", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "weZ3zZ4ELckgVt0GkH-xDYtUvXpbTf4V0SvZxQX1kMg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3208", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6Fz_4BdKRQpUAvOXpQN5wT8sE63RiJjOj_c_Y3jmIko="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3206", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6Fz_4BdKRQpUAvOXpQN5wT8sE63RiJjOj_c_Y3jmIko="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3204", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Gw7ndERAdt3_lEUm_DGpdiEL9x5efIyBABIOyFNuJxA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3205", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AlWou33OrVVuIF399_Yu0ZiovOp9x7NdWpYY8Zu_dx0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3215", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314276"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UAn1OngD7chkQyCn9SSsnOjTm2AvAhJaqUrRPqTeJ-M="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3213", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314277"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oR9AKSyu5zCVyy6Pr30YhUobnWXa0xaWToOd_-uBE08="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3214", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314279"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vN1w6trwp6dOFO6RO8ppd4QK0oS3GXAULe91G9GRgtA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3212", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314279"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vN1w6trwp6dOFO6RO8ppd4QK0oS3GXAULe91G9GRgtA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3210", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314280"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4sDsUQJH2Wf_X6jI3qH1HnoWSMPtSte29Flqb2bhHaU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3211", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314280"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4sDsUQJH2Wf_X6jI3qH1HnoWSMPtSte29Flqb2bhHaU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3221", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "f8JjurPJXqiGp5Nnomtn_Ls1-vW3tpIWli6oFPdpJTo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3219", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193481"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F7tuv3tjdUzz7sZoFHNsaHGZ2FvhfK4_Tn3fPsN4C8U="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3220", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193482"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jfN46o7mWJitkAaUCdiIwtzpDIOwPSaTPkGOGQPo3Yg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3218", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193482"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jfN46o7mWJitkAaUCdiIwtzpDIOwPSaTPkGOGQPo3Yg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3216", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193483"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MjdVNVtCUl4_mfFix9OpbKw833i6Sl12OxJzolsLYqI="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3217", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193484"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jIWzHuD9QAIKwj0mViuB0Am5IVfgUOMXMi1jDKUa77c="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3227", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qJB19ELcSALXgFUv7A4XYt-1-Dwe-SJTq4UoO-mOR74="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3225", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qJB19ELcSALXgFUv7A4XYt-1-Dwe-SJTq4UoO-mOR74="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3226", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qJB19ELcSALXgFUv7A4XYt-1-Dwe-SJTq4UoO-mOR74="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3224", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qJB19ELcSALXgFUv7A4XYt-1-Dwe-SJTq4UoO-mOR74="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3222", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nqUnW9pFFeM2lNYW-CKhJRHadstjeTvMca0m_GbBE6w="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3223", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nqUnW9pFFeM2lNYW-CKhJRHadstjeTvMca0m_GbBE6w="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3233", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193485"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n2vqehOnS1rkPkE0IRvZo_Yxd5FKIBa1R2bf8D-2x7o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3231", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193485"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n2vqehOnS1rkPkE0IRvZo_Yxd5FKIBa1R2bf8D-2x7o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3232", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193486"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5KyILBc9aZzcVRIr8C6aoWtIGf8ux0Kw3wznDRgCUcA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3230", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o6FX0aVoFX42Gaf0MLg--i54gUur53h9mJc105hfuwY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3228", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o6FX0aVoFX42Gaf0MLg--i54gUur53h9mJc105hfuwY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3229", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kbfIUhuqGRp2C5zLxj8gfUQy2HVwhQIagA-DeYI6rvM="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3239", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Oav9DWH2eBfm6YgAASwxyoQsLMczsRBiGZhTxFwjMvo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3237", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Oav9DWH2eBfm6YgAASwxyoQsLMczsRBiGZhTxFwjMvo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3238", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lqm8eglARfHFK2lTa5F326pRWdaF5Ekz1w3qIcY_-BE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3236", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lqm8eglARfHFK2lTa5F326pRWdaF5Ekz1w3qIcY_-BE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3234", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lqm8eglARfHFK2lTa5F326pRWdaF5Ekz1w3qIcY_-BE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3235", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lqm8eglARfHFK2lTa5F326pRWdaF5Ekz1w3qIcY_-BE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3137", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xPA-j0usBMJj8AjqAAbsC5IFcY_UQh1x42YiblUq6-M="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3135", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xPA-j0usBMJj8AjqAAbsC5IFcY_UQh1x42YiblUq6-M="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3136", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YofC30vd6SX-N0sTznQ4FQLZj-r0NTWdW44DFZtw7SA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3134", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193491"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uyjQN6vrog0pK-xIcaxh2JHatc1fW497osoy8Z3YQ88="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3132", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193491"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uyjQN6vrog0pK-xIcaxh2JHatc1fW497osoy8Z3YQ88="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3133", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u6M_SyHoh0HFGgzoRdLtWI-CPw6OLJxMCmKYI1ZxJ9w="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3143", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O13EiCnxrBzmhtJLkN8VKqSiWz9lnNVY28136Xc10zU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3141", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O13EiCnxrBzmhtJLkN8VKqSiWz9lnNVY28136Xc10zU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3142", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O13EiCnxrBzmhtJLkN8VKqSiWz9lnNVY28136Xc10zU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3140", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O13EiCnxrBzmhtJLkN8VKqSiWz9lnNVY28136Xc10zU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3138", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NdbRMgNx1vOts89t2yEplvJvnH9NYH4O4mw4j4kawww="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3139", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NdbRMgNx1vOts89t2yEplvJvnH9NYH4O4mw4j4kawww="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3149", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fDKvsb2BU3xyr8jE9gINkRx37kYN0qDenQlT2ra8t9I="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3147", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fDKvsb2BU3xyr8jE9gINkRx37kYN0qDenQlT2ra8t9I="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3148", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193494"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zHxZHDyEXl9ZkoOlkLhCdUAwbf-HxPXz5VYR2LTkHhc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3146", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193495"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TNDTagNy4u-IUDtgwUcmfvxJKhJMngFe79PDQ3wteVs="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3144", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193495"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TNDTagNy4u-IUDtgwUcmfvxJKhJMngFe79PDQ3wteVs="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3145", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193496"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mV9v_ivErlxTJeW5PBiGm6LXqrYiRWUsmk_9JSxVvHE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3155", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oNe6htOnDTgvZRJXEXnB1AsVw8C6Tn8f5gXLmtaitgc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3153", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oNe6htOnDTgvZRJXEXnB1AsVw8C6Tn8f5gXLmtaitgc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3154", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GaZaPe-41ZdKOOefCWphV_mvOk6zSjCnooStU4E4k54="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3152", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GaZaPe-41ZdKOOefCWphV_mvOk6zSjCnooStU4E4k54="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3150", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GaZaPe-41ZdKOOefCWphV_mvOk6zSjCnooStU4E4k54="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3151", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GaZaPe-41ZdKOOefCWphV_mvOk6zSjCnooStU4E4k54="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3161", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193497"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "89OpLueI_3LBWejI-I8vOjzOn9PPZoOUD0ZKb-tpr6w="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3159", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193497"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "89OpLueI_3LBWejI-I8vOjzOn9PPZoOUD0ZKb-tpr6w="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3160", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193498"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e2dqhEMTrVYQSHj_l2Ey08D9O4MAkKmQyTu4zPY2hZQ="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3158", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PAA9n0_IFD63Xa5BRzhOwT33ns3Tem4oL8FqDtVeHmE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3156", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PAA9n0_IFD63Xa5BRzhOwT33ns3Tem4oL8FqDtVeHmE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3157", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193500"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8d5ibN4xvfhxikKgpf4qSjsj_s4DNJG8-Szeog_hhY8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3167", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LE1AfsNkANwtqCEIveR4tWMNf-6DNj0J2y1LPHYlSdo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3165", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LE1AfsNkANwtqCEIveR4tWMNf-6DNj0J2y1LPHYlSdo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3166", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LE1AfsNkANwtqCEIveR4tWMNf-6DNj0J2y1LPHYlSdo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3164", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314288"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_V5nFCMHxhNBsDhVr0EysOdfbeZEgETENWFI-e2VYl0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3162", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314288"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_V5nFCMHxhNBsDhVr0EysOdfbeZEgETENWFI-e2VYl0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3163", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314288"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_V5nFCMHxhNBsDhVr0EysOdfbeZEgETENWFI-e2VYl0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3173", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KSj0dlAJ-EF69RRYpFMk8wyQQk9YjSMEohFN7EuX--c="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3171", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KSj0dlAJ-EF69RRYpFMk8wyQQk9YjSMEohFN7EuX--c="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3172", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193502"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "89wr3UMlXhxHh4G1uQUCUaqWjzrYmfK0yWyr9vmOdOc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3170", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RbICA4bOzUpcNSJahLvJUX7zGdyNBHU7EA7m4JpwoUg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3168", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RbICA4bOzUpcNSJahLvJUX7zGdyNBHU7EA7m4JpwoUg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3169", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193504"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Uu5gW2dd24x7Ltnuj3ThD47OrMizDbKEQAg20ufHl3Y="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3179", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sgJpCrN-wWxo1wppZxuGYa9QkeWLXDSmy9YhgIgWgZc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3177", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sgJpCrN-wWxo1wppZxuGYa9QkeWLXDSmy9YhgIgWgZc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3178", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sgJpCrN-wWxo1wppZxuGYa9QkeWLXDSmy9YhgIgWgZc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3176", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sgJpCrN-wWxo1wppZxuGYa9QkeWLXDSmy9YhgIgWgZc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3174", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pJEMT4-TF-9Q_VnzojQTqFl1-4lYVcsUQdaBcCwZYm4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3175", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pJEMT4-TF-9Q_VnzojQTqFl1-4lYVcsUQdaBcCwZYm4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3185", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mFibfu6vUphJIVWYqUff-3ZCFz8j--Mu_Z58EHXfNzE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3183", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mFibfu6vUphJIVWYqUff-3ZCFz8j--Mu_Z58EHXfNzE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3184", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l1FAQzT_DZeKXdE9hOYimeqPwnwi2IjmIZZ52A5HDCU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3182", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G95qU5FFzdW_QYlnYrsS33QB5uTB9djvWClzi7i_e-o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3180", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G95qU5FFzdW_QYlnYrsS33QB5uTB9djvWClzi7i_e-o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3181", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CGZItfuI4-jkLY5R22DPXxGbW19feu-pyY-8UxJmMiY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3191", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ILUjYnmGYZBiHpp6P1ac3pVc9hmbJpGonMb4Tbf2_-Y="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3189", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ILUjYnmGYZBiHpp6P1ac3pVc9hmbJpGonMb4Tbf2_-Y="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3190", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j11UfC5Dbb58-pQeLlqHBOh-lXYMYqTVmIfHu3QYbm4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3188", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j11UfC5Dbb58-pQeLlqHBOh-lXYMYqTVmIfHu3QYbm4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3186", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j11UfC5Dbb58-pQeLlqHBOh-lXYMYqTVmIfHu3QYbm4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3187", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j11UfC5Dbb58-pQeLlqHBOh-lXYMYqTVmIfHu3QYbm4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3197", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "b1upEYqeV1v9m2Cx873jD40kMdobuOW_hnvOOa2gRak="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3195", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "b1upEYqeV1v9m2Cx873jD40kMdobuOW_hnvOOa2gRak="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3196", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Tz0hgCcwRVduVkVylu-dxoX1fg3fJK2yioKV8JhZNU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3194", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6tGo83ecNQO9HuEfFpKbphYxvKj7yuYUtEaoX6QX3mA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3192", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6tGo83ecNQO9HuEfFpKbphYxvKj7yuYUtEaoX6QX3mA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3193", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DjzaNvQI4sysGqaj4VOf6QDR35ZeaaJvLFqi5DmxEds="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3203", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K1orfBBLu8jcQCDMs6oWaXJvEi4H7RluGP9VvlUjtaY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3201", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K1orfBBLu8jcQCDMs6oWaXJvEi4H7RluGP9VvlUjtaY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3202", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K1orfBBLu8jcQCDMs6oWaXJvEi4H7RluGP9VvlUjtaY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3200", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K1orfBBLu8jcQCDMs6oWaXJvEi4H7RluGP9VvlUjtaY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3198", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S73xD92VC9lkiQl5N4P1i7mP2i4IL-seidSnbv_mG6g="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3199", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S73xD92VC9lkiQl5N4P1i7mP2i4IL-seidSnbv_mG6g="
      envelope = @pubnub.revoke(group: :demo, read: false, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2993", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S4XsaCUS-OuQ5lgp9jONaAsDUP-ESt7t5amHwrr6N0M="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2991", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S4XsaCUS-OuQ5lgp9jONaAsDUP-ESt7t5amHwrr6N0M="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2992", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193514"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nxF6hkJEl4_JSPS9sfarn7Lrxv5IDyjnXfPdYwAguvw="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2990", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193515"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jHIoPuavcs6FLWTo27wScnO1mF1b8myXC6oTQpv1vK0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2988", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193516"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xgetUP18sw9c6ELQL2bilquelXxml-wtCAEOOooBVek="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2989", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193516"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xgetUP18sw9c6ELQL2bilquelXxml-wtCAEOOooBVek="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2999", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gN4DQKsQGOOwWvtOzDJgiB4IBRMO_TCmD29Kbzo292Q="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2997", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gN4DQKsQGOOwWvtOzDJgiB4IBRMO_TCmD29Kbzo292Q="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2998", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NrGxxVhPLjeSLQc4vfHio2csQZFCRWGhV8yS5DXvWe8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2996", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NrGxxVhPLjeSLQc4vfHio2csQZFCRWGhV8yS5DXvWe8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2994", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NrGxxVhPLjeSLQc4vfHio2csQZFCRWGhV8yS5DXvWe8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2995", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NrGxxVhPLjeSLQc4vfHio2csQZFCRWGhV8yS5DXvWe8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3005", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193517"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5C0AeIj_XEwMfAPWlWSoVxlnd78ROioUgDYhWnqyQx8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3003", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193518"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qrg1zJQn7kP4n6f6UeAMSeNqEMIFFfApBJXMBhExpO0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3004", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193518"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qrg1zJQn7kP4n6f6UeAMSeNqEMIFFfApBJXMBhExpO0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3002", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193519"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JlsEMfwTS8hI1qDi3zHhYXjsFAzMnZ1Im7dV_FklL-4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3000", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193520"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wl5jE5wikeVh1yG5QKBMydtIveyoU1sPhd6ZPja3pBk="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3001", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193521"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tz5W5fZgV1nIBfOmwVq2IIWucIKL2qw3DMAooVlS2ho="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3011", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-oaEzgT5Y3MaMLgBsU7hkT-ismi-Y_NHWAG47XkU-_Y="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3009", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2VWwnckrG8rg5UZeQ5QR7wdpca8chrZiBDp97ZfSarM="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3010", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2VWwnckrG8rg5UZeQ5QR7wdpca8chrZiBDp97ZfSarM="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3008", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2VWwnckrG8rg5UZeQ5QR7wdpca8chrZiBDp97ZfSarM="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3006", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_XSxlP7eFbQFcEZk-yMBbw53fkehqY17hDGH9G1w1jU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3007", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_XSxlP7eFbQFcEZk-yMBbw53fkehqY17hDGH9G1w1jU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3017", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193522"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Kg0nImnzCrPEJjCoKhMdIuwOWPGkZgxyRPkGkG39r4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3015", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193522"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Kg0nImnzCrPEJjCoKhMdIuwOWPGkZgxyRPkGkG39r4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3016", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193523"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yIVbes25kE3GTS8jDe_PEqufjNWiU94MtGk7H78bmmY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3014", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193524"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5G3B1i-rv4EYhXIGQ7X-7NXEZCMExzo-hDG4K8wKc8o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3012", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193524"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5G3B1i-rv4EYhXIGQ7X-7NXEZCMExzo-hDG4K8wKc8o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3013", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193525"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gkBvSxFYd1_xzyIC31txnuRBKWBZcYkAfBMUbXZbDxc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3023", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sWpvIrMOtBURdhqpknwW6nWNthN5hbKXV8_Vc886HF4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3021", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sWpvIrMOtBURdhqpknwW6nWNthN5hbKXV8_Vc886HF4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3022", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sX7QBPtyimUdQylyt09d2WGJHUU5E2gn1kE4qyeig2k="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3020", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sX7QBPtyimUdQylyt09d2WGJHUU5E2gn1kE4qyeig2k="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3018", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sX7QBPtyimUdQylyt09d2WGJHUU5E2gn1kE4qyeig2k="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3019", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sX7QBPtyimUdQylyt09d2WGJHUU5E2gn1kE4qyeig2k="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2921", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193525"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xdeFGBaNZbRQ6aHhs1pdQm90CrhSzlbEGz4kLg9DyWY="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2919", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193526"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KNV62NbcQKr00_s89NC0LU7LGIIjNSCJiobyGneSamg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2920", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193527"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hn1gH0lD-RQNJXc8hqOsZ8sscc_ryAAp9wudeN6zfGA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2918", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193528"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aRNCLQ_uxQqNCSoV4iNz_Nm7y0KnGovkPjwPfFqT5kg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2916", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193528"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aRNCLQ_uxQqNCSoV4iNz_Nm7y0KnGovkPjwPfFqT5kg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2917", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193529"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qdKSHnvABiDZkStg1K4HOvp8xfxzVYAxUh0ZgIQ4WMQ="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2927", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314298"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OSKMctl04dqqlhRQA_5Tks6t3Uag7OD3K9Z5c19JQz8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2925", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314298"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OSKMctl04dqqlhRQA_5Tks6t3Uag7OD3K9Z5c19JQz8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2926", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314298"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OSKMctl04dqqlhRQA_5Tks6t3Uag7OD3K9Z5c19JQz8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2924", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hHkk-74KUjG-02OKpKV7BYZOvpIJuXpbt6dGggD9bMo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2922", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hHkk-74KUjG-02OKpKV7BYZOvpIJuXpbt6dGggD9bMo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2923", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hHkk-74KUjG-02OKpKV7BYZOvpIJuXpbt6dGggD9bMo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2933", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193530"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PZDleIgLK_aDwP7_9O3DDntb0o-gz2FmN1QXYqbo6iI="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2931", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193531"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A6bIlB44mnICvebEoVlMQiuL1llN1qe-xtsXkW5Hg8A="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2932", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193531"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A6bIlB44mnICvebEoVlMQiuL1llN1qe-xtsXkW5Hg8A="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2930", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193532"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VwwP00WgrwTNVBbTzZrVbWQN5Rt9jKNCJ7zMPEDEZGg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2928", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193533"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ccQmeyDDqNfjX8b93P6twncpm0QsxfCcuI1M1KVl79c="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2929", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193533"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ccQmeyDDqNfjX8b93P6twncpm0QsxfCcuI1M1KVl79c="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2939", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0QmvarTXhIjDEK4wz5SX88C13PCNZKFO9ziYcjzLv98="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2937", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0QmvarTXhIjDEK4wz5SX88C13PCNZKFO9ziYcjzLv98="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2938", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0QmvarTXhIjDEK4wz5SX88C13PCNZKFO9ziYcjzLv98="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2936", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0QmvarTXhIjDEK4wz5SX88C13PCNZKFO9ziYcjzLv98="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2934", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314301"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8qS4TLooCutmlW7g0NWk7-WIKLi4_AiuCHW9-G-RMOc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2935", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314301"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8qS4TLooCutmlW7g0NWk7-WIKLi4_AiuCHW9-G-RMOc="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2945", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193534"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sXhBcEoCsDtDWXzpNtIWumVm4vxnVHRzBe0BBcB3nJU="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2943", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193535"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kzj3U-GEg4b2e3t9DO_XOXNci6Z4TX6isjxsYcnJ5Q4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2944", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193535"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kzj3U-GEg4b2e3t9DO_XOXNci6Z4TX6isjxsYcnJ5Q4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2942", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193536"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wMx74tJ9d4AGvJQsVjceGk4uNXlwQWuMtkeNOz8bQNE="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2940", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193537"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KTuAgSJ4LE4He5qnCGxoOUDQ9ddbfeu6xqi3aFD4UJg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2941", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193537"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KTuAgSJ4LE4He5qnCGxoOUDQ9ddbfeu6xqi3aFD4UJg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2951", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yrau__h45bFmPoxTasFYCLx5DPMl7SYkTjHArKayvlQ="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2949", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yrau__h45bFmPoxTasFYCLx5DPMl7SYkTjHArKayvlQ="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2950", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yrau__h45bFmPoxTasFYCLx5DPMl7SYkTjHArKayvlQ="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2948", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yrau__h45bFmPoxTasFYCLx5DPMl7SYkTjHArKayvlQ="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2946", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q9y7BvH-g0eWANw92qlN_49pd2yD0JWO7nm97CWgpv0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2947", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q9y7BvH-g0eWANw92qlN_49pd2yD0JWO7nm97CWgpv0="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2957", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193538"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TSA7bTrFalt7xmAzCEeXgeoz8f884jv-zY5SYDSDo4Y="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2955", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193539"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "anyWj_wPbT6VYY5jay75QqTApp0qZDyqFpmA9WciFdw="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2956", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193539"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "anyWj_wPbT6VYY5jay75QqTApp0qZDyqFpmA9WciFdw="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2954", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193540"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qhDe5z70Uep_8MGwoYiHYjw2s8_vjK0U9xDov67L30M="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2952", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193541"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "72mmh-wfrcrgO_rdWAuiTmleFzXcp2PadWzq5FbHmGs="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2953", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193541"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "72mmh-wfrcrgO_rdWAuiTmleFzXcp2PadWzq5FbHmGs="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2963", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NSrVfpja7nJdHgFrKHUHYX31VJhyK4YN1iBowsvOOgw="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2961", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NSrVfpja7nJdHgFrKHUHYX31VJhyK4YN1iBowsvOOgw="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2962", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lxc6cEslB4GZBA4_4aM0pFygWuGrOiTo66x_2uClKoA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2960", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lxc6cEslB4GZBA4_4aM0pFygWuGrOiTo66x_2uClKoA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2958", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lxc6cEslB4GZBA4_4aM0pFygWuGrOiTo66x_2uClKoA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2959", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lxc6cEslB4GZBA4_4aM0pFygWuGrOiTo66x_2uClKoA="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2969", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193542"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DyPBR2sRTvS11ayhOto-pujzBabBqqOCzUCR7dkKFSg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2967", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193543"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5HiRZIf-ghqiQTSqizeVX_foACO1wgZLVbUCyHqi9eo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2968", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193543"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5HiRZIf-ghqiQTSqizeVX_foACO1wgZLVbUCyHqi9eo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2966", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193544"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WXKYDNmmnhMycCJXuKHH6QPrvBkum5xvRCntYs-N_A4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2964", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193545"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ev6RiTy20ZafthoiqVAeRxbZ4OT9J0ihDdH7yYu02rk="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2965", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193545"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ev6RiTy20ZafthoiqVAeRxbZ4OT9J0ihDdH7yYu02rk="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2975", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X7ByUg6XPhL_0_Yb6bzsE0DsPT-9jovQD9BKQGR8tBg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2973", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X7ByUg6XPhL_0_Yb6bzsE0DsPT-9jovQD9BKQGR8tBg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2974", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X7ByUg6XPhL_0_Yb6bzsE0DsPT-9jovQD9BKQGR8tBg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2972", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X7ByUg6XPhL_0_Yb6bzsE0DsPT-9jovQD9BKQGR8tBg="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2970", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314306"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tKGst_4vlGehiEs__7NjaTfsK-ol9kRvZxWFjMMWnek="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2971", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314306"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tKGst_4vlGehiEs__7NjaTfsK-ol9kRvZxWFjMMWnek="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2981", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193546"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2PNAjF7AiHxwlQ6M05uHT8J1Dw8udP5v1bW4bmDcjs="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2979", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193546"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2PNAjF7AiHxwlQ6M05uHT8J1Dw8udP5v1bW4bmDcjs="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2980", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193547"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DTqD5qTarsechs-3m6IrlIISJdVg1XAN-_2Po8B7lts="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2978", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193548"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iOtE_VHBXuKclMfyCKb5iUj96y5rZ_XGLEk0XId4kuo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2976", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193548"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iOtE_VHBXuKclMfyCKb5iUj96y5rZ_XGLEk0XId4kuo="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2977", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193549"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TG9ez5wE8Biv2Kpb6R07boWEIzBLvUi5sTl4rQ4BOq4="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2987", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314306"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_m8S_zyktUsvbnHhT1zJHOIbeSeEUz1XdTJQ7Oueq_o="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2985", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314307"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FJM57jr61iHEreXYnMLCKb5fG6h4KdXHG3bZ_-DcuL8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2986", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314307"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FJM57jr61iHEreXYnMLCKb5fG6h4KdXHG3bZ_-DcuL8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2984", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314307"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FJM57jr61iHEreXYnMLCKb5fG6h4KdXHG3bZ_-DcuL8="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2982", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314308"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bS5JA83Xp4ibvCw7931X0lT7Hr2OH-kRcznCGd3F3gM="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2983", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314308"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bS5JA83Xp4ibvCw7931X0lT7Hr2OH-kRcznCGd3F3gM="
      envelope = @pubnub.revoke(group: :demo, read: false, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3101", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193550"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3JlTu8DCDAjzZOjCurO5xp9r0SJF34V7Yu7HVJH0YmQ="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3099", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193550"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3JlTu8DCDAjzZOjCurO5xp9r0SJF34V7Yu7HVJH0YmQ="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3100", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193551"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rDmdG7rwlSK8OqU-5u_xc68-A1vqJIQZS1vr_ldzMFk="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3098", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193552"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w9KvsXsunm4Veiut1fGz-kkJxty90v-k0zoOycZ2Sdo="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3096", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193552"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w9KvsXsunm4Veiut1fGz-kkJxty90v-k0zoOycZ2Sdo="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3097", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193553"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MreH5O8xM2JkHLppC3jiIZ2b5OmcQ30cotYOvilvDVg="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3107", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314308"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mb2xohSGJDaDE6L8LnDKRzqR6kwQy9grjPm9Gh3WIl8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3105", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314308"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mb2xohSGJDaDE6L8LnDKRzqR6kwQy9grjPm9Gh3WIl8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3106", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8VCAiN1J3u64mxBDlOVRLLo2RiPtw5bY9x_yS0vEXu4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3104", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8VCAiN1J3u64mxBDlOVRLLo2RiPtw5bY9x_yS0vEXu4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3102", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8VCAiN1J3u64mxBDlOVRLLo2RiPtw5bY9x_yS0vEXu4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3103", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8VCAiN1J3u64mxBDlOVRLLo2RiPtw5bY9x_yS0vEXu4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3113", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193554"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aC4Djy1TTiy5Xf29ei01z8wPdwVput559aDaKxbsjhU="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3111", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193554"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aC4Djy1TTiy5Xf29ei01z8wPdwVput559aDaKxbsjhU="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3112", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193555"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pEyL5px5h9GfzqCyDF3QWYB-kNMcQUXNUtrhV8bMz90="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3110", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193556"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_LBMJDYqftnsCMUuXDSVkfUlFog16_NWP1ikZTTmiMc="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3108", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193556"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_LBMJDYqftnsCMUuXDSVkfUlFog16_NWP1ikZTTmiMc="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3109", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193557"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p3qkHebGg58LmR4Qs2UsDrw9VioS6I9gwc3IO63ySpA="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3119", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314310"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D_rw7tUsAymmzrDmt0oBx6vKO5fmNR9mVhkeg1RtZX0="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3117", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314310"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D_rw7tUsAymmzrDmt0oBx6vKO5fmNR9mVhkeg1RtZX0="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3118", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314310"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D_rw7tUsAymmzrDmt0oBx6vKO5fmNR9mVhkeg1RtZX0="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3116", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314310"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D_rw7tUsAymmzrDmt0oBx6vKO5fmNR9mVhkeg1RtZX0="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3114", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PESnPFdLat-jBY9FwaqAYrvnIFzoZLZ-6dEsPTVwfZ4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3115", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PESnPFdLat-jBY9FwaqAYrvnIFzoZLZ-6dEsPTVwfZ4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3125", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193558"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v40gnyow0e8b4rfUPEndm_dOVlv6NKCDJv7aCwVTdAA="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3123", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193558"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v40gnyow0e8b4rfUPEndm_dOVlv6NKCDJv7aCwVTdAA="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3124", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193559"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SKLk7nPG_l0PFY9u1qH2nxOREjE4Sgp3R-IXgfF6B8c="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3122", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193560"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6Vyj54L42up8QHJmwIWQTZJizdfMA3GoAtaJxGqlERY="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3120", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193561"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knA3tEt5W1rkGvgYizmVs10xEKakSk_9OqlhzTyat9Y="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3121", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193561"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knA3tEt5W1rkGvgYizmVs10xEKakSk_9OqlhzTyat9Y="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3131", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XvkRfgsUbTh-hzyMR3mzDVP2_ZTL1S1_DcWH2tybz38="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3129", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XvkRfgsUbTh-hzyMR3mzDVP2_ZTL1S1_DcWH2tybz38="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3130", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LpkYHFBliJ7TEpl7z4-QWIsAKczZfHCJuwG-VipVXtM="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3128", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LpkYHFBliJ7TEpl7z4-QWIsAKczZfHCJuwG-VipVXtM="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3126", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LpkYHFBliJ7TEpl7z4-QWIsAKczZfHCJuwG-VipVXtM="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3127", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LpkYHFBliJ7TEpl7z4-QWIsAKczZfHCJuwG-VipVXtM="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3029", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193562"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DHjXXdjHMe6cphUxuluhBI-QbMbZbmz3c-Q928SYs9s="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3027", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193563"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J1RxJkkYIiVNb5RJU9J1gxZUhLS9hWecaIXLrvAN68U="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3028", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193564"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gXduJyF-FjYhoIs3FtvLo7b_YwddAL3FZGTuPkh7XQk="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3026", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193564"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gXduJyF-FjYhoIs3FtvLo7b_YwddAL3FZGTuPkh7XQk="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3024", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193565"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ak6LP0C5whc6GZXTav6g-EKJlDGU0DuP4zfc-SVFzX8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3025", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193566"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xKauMyKAwNmWQTHdNYvSkjGVBJamfKaswEZwcCmsRRk="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3035", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Nl5HPR4pA3aaxNPPQE7lENHraG4YmaPHIDr9WJw2Gs="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3033", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Nl5HPR4pA3aaxNPPQE7lENHraG4YmaPHIDr9WJw2Gs="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3034", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Nl5HPR4pA3aaxNPPQE7lENHraG4YmaPHIDr9WJw2Gs="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3032", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Nl5HPR4pA3aaxNPPQE7lENHraG4YmaPHIDr9WJw2Gs="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3030", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M5tf2VgifIZPxijIxhO0wKIuDEfnsvqvP7ThQFs_Zb4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3031", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M5tf2VgifIZPxijIxhO0wKIuDEfnsvqvP7ThQFs_Zb4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3041", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193566"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MyMNFn0mvKxjcYWjJYZ5wKVP3UWPb7Q7wQEXbAJnDqs="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3039", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193567"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kvbo781v52xjHUktUjK9vKROzxXFgTESUF5jDYrflUU="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3040", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193567"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kvbo781v52xjHUktUjK9vKROzxXFgTESUF5jDYrflUU="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3038", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193568"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Gop1aq5KFt_YFCEGf4qsaCTjXWzf86KsRSjkiW2qWQM="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3036", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193569"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oIsWJXkK6Kpx_PEP3SP6HLRQZeAPCBYLrkOrVVGuEz0="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3037", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193570"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gIEIgPj6Jb3zR5ggy2JyE0ZkvfJ_hPB13ZP2KS4eDLQ="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3047", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yi6HXicL2D1RexEmABJYHZCJyJNYe_QYrK9f37cuT1I="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3045", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yi6HXicL2D1RexEmABJYHZCJyJNYe_QYrK9f37cuT1I="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3046", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314315"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g90wkn5snj9UDbOHxwEoF4pi3EeBo18tH5WqaaPIFZ8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3044", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314315"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g90wkn5snj9UDbOHxwEoF4pi3EeBo18tH5WqaaPIFZ8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3042", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314315"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g90wkn5snj9UDbOHxwEoF4pi3EeBo18tH5WqaaPIFZ8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3043", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314315"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g90wkn5snj9UDbOHxwEoF4pi3EeBo18tH5WqaaPIFZ8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3053", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193570"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "etLEc7SVczV7jcIwvR3I3furxf6ajQd7RQZgcyqwEb4="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3051", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193571"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cd4PDEP95FCmv-oar8oIJhOPuEwvgmKY7lTf6ICzrYk="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3052", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193572"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_9G9qGOK9fxVPIXostJXYOi73yeXocfRCC_lyw_MKe8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3050", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193572"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_9G9qGOK9fxVPIXostJXYOi73yeXocfRCC_lyw_MKe8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3048", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193573"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fXKF26A_6HKBKNanN1uQi2tO3kEyP1KTPkJ0C5BVdVA="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3049", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193574"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M8DHcFeaXYdnYpY2Pzzj2psSAzp70CMJwlAeuNjQvNs="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3059", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314316"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yLvR0dlPVuqwEI3zptkxn1qXCg5V38Q0K-NWnUUSzPc="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3057", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314316"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yLvR0dlPVuqwEI3zptkxn1qXCg5V38Q0K-NWnUUSzPc="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3058", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2cGwPrbLmnnfgFgGOMvCXPk4ukdheORF8MAIcQogcC8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3056", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2cGwPrbLmnnfgFgGOMvCXPk4ukdheORF8MAIcQogcC8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3054", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2cGwPrbLmnnfgFgGOMvCXPk4ukdheORF8MAIcQogcC8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3055", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2cGwPrbLmnnfgFgGOMvCXPk4ukdheORF8MAIcQogcC8="
      envelope = @pubnub.revoke(group: :demo, read: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3065", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193575"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xfjRO9hE9mecqnffkHeXLE5ojhczjoEy_qRCk07n6TQ="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3063", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193575"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xfjRO9hE9mecqnffkHeXLE5ojhczjoEy_qRCk07n6TQ="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3064", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193576"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0q-wQVUbZoCVZHIl6LbVkstgasPGXXgWLAwNouAADKs="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3062", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193577"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X-a-9yQGMZggDTd8q2ZLyUYj0kY9IL-m4YuZp1-rjDg="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3060", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193577"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X-a-9yQGMZggDTd8q2ZLyUYj0kY9IL-m4YuZp1-rjDg="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3061", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193578"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IvHGNtGjMSK4xVQ7cZ_z-ScaAOj9MXZUQiyLUhBTBGw="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3071", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ufW6U5Wuor9W8LAI8aaFNn6_a-1jj6N8qufYZ2YdQnY="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3069", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ufW6U5Wuor9W8LAI8aaFNn6_a-1jj6N8qufYZ2YdQnY="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3070", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ufW6U5Wuor9W8LAI8aaFNn6_a-1jj6N8qufYZ2YdQnY="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3068", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ufW6U5Wuor9W8LAI8aaFNn6_a-1jj6N8qufYZ2YdQnY="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3066", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T4C3ePrC55Z6xs6M3xxc_TUg2W7loGqLHA2grpI0AMs="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3067", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T4C3ePrC55Z6xs6M3xxc_TUg2W7loGqLHA2grpI0AMs="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3077", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193578"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nd5xO7agGnR1Rvj2IJTZrauHSKqA24PuU-fzjqzUXQU="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3075", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193579"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0-bvggwBUs2Jy2eOsbKfQjqOz-yNDZgaft2OGu3pHVQ="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3076", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193580"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jQRcBrt6YnbPwj6M_3-0p_3B5pdbkWP4jU1-nRv-cEw="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3074", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193581"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "B8Xx4QsrnU87MeEC6Q28aqTufK4YmgNP7-HaOFGOE-U="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3072", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193581"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "B8Xx4QsrnU87MeEC6Q28aqTufK4YmgNP7-HaOFGOE-U="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3073", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193582"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GXKDCFE6yls_awbj9zgv2axcyf4Cw4WUWfD1cAl6srI="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3083", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gVaVTMgfEteWVPRg_cFJeogXtvYu_wDr5O4VngujS7o="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3081", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gVaVTMgfEteWVPRg_cFJeogXtvYu_wDr5O4VngujS7o="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3082", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8yv1PeZP8W1Om7cmwj1jNJhLzGtk4sgbnDfTIONLwmE="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3080", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8yv1PeZP8W1Om7cmwj1jNJhLzGtk4sgbnDfTIONLwmE="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3078", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8yv1PeZP8W1Om7cmwj1jNJhLzGtk4sgbnDfTIONLwmE="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3079", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8yv1PeZP8W1Om7cmwj1jNJhLzGtk4sgbnDfTIONLwmE="
      envelope = @pubnub.revoke(group: :demo, read: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3089", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193583"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T6bL5cOTrv7he-qOph_VI-3JS_b36Q_6d5mqM3CqVjg="
      envelope = @pubnub.revoke(group: :demo, read: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3087", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193583"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T6bL5cOTrv7he-qOph_VI-3JS_b36Q_6d5mqM3CqVjg="
      envelope = @pubnub.revoke(group: :demo, read: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3088", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193584"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jGxy3AMsKkmmCDqJIbbHTvVFm5HOst3u2k26_eW9gZY="
      envelope = @pubnub.revoke(group: :demo, read: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3086", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193585"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bC0JzVyjRcgTJoZTZTEyg5W06N2RzNi246ThLXvVt-s="
      envelope = @pubnub.revoke(group: :demo, read: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3084", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193585"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bC0JzVyjRcgTJoZTZTEyg5W06N2RzNi246ThLXvVt-s="
      envelope = @pubnub.revoke(group: :demo, read: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3085", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193586"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ptlOeTdblMLkMtPJWmSALRS4WbKj6s4kv7-5Eqakbhw="
      envelope = @pubnub.revoke(group: :demo, read: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3095", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SN85aZREpZBahvtFzjPrY-w2mZKgD0H4a5sT9yAb-uI="
      envelope = @pubnub.revoke(group: :demo, read: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3093", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SN85aZREpZBahvtFzjPrY-w2mZKgD0H4a5sT9yAb-uI="
      envelope = @pubnub.revoke(group: :demo, read: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3094", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SN85aZREpZBahvtFzjPrY-w2mZKgD0H4a5sT9yAb-uI="
      envelope = @pubnub.revoke(group: :demo, read: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3092", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SN85aZREpZBahvtFzjPrY-w2mZKgD0H4a5sT9yAb-uI="
      envelope = @pubnub.revoke(group: :demo, read: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3090", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314322"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L_wQhAH-RFJmydD8vWGpylovGiRBIWsbjy9FH21Y-DI="
      envelope = @pubnub.revoke(group: :demo, read: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3091", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314322"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L_wQhAH-RFJmydD8vWGpylovGiRBIWsbjy9FH21Y-DI="
      envelope = @pubnub.revoke(group: :demo, read: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3533", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193587"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nlUnkEaEDqrsWhlJV3l7VBnKOjQvO7ewRRC2C9WCUtg="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3531", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193587"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nlUnkEaEDqrsWhlJV3l7VBnKOjQvO7ewRRC2C9WCUtg="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3532", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193588"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oIjdQrOUz2LB_nZbg2oFEil9cq_THlyFqXjKM4FNxnU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3530", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193589"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eAA01FMv0zVDYwl10RZcJOLSRgRghNy1qHUS8oTAEPo="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3528", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193589"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eAA01FMv0zVDYwl10RZcJOLSRgRghNy1qHUS8oTAEPo="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3529", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193590"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kVF9yjklYAgMCBqvGRZkDWP0tZQ5Tl2lNLKwnzjjhoo="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3539", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314323"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NGy70-Bv8GL96V_DVYJLesnEaN50VB0WIh5HHXyhFks="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3537", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314323"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NGy70-Bv8GL96V_DVYJLesnEaN50VB0WIh5HHXyhFks="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3538", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314323"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NGy70-Bv8GL96V_DVYJLesnEaN50VB0WIh5HHXyhFks="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3536", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314323"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NGy70-Bv8GL96V_DVYJLesnEaN50VB0WIh5HHXyhFks="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3534", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wc1F9Mba6GDyJ3FegBREy17K4aKgXdM4VloM7p7bt1c="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3535", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wc1F9Mba6GDyJ3FegBREy17K4aKgXdM4VloM7p7bt1c="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3545", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193591"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "59fjJzesGh4XJck7vtKgiG8Lu5uHvdeWSv8TGh0CJM8="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3543", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193592"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bE_uusji9SCwE2zZhEes1OsHp9Fjuln6rOMQHzk9KiQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3544", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193592"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bE_uusji9SCwE2zZhEes1OsHp9Fjuln6rOMQHzk9KiQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3542", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193593"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UGbmHNhahR8SN6gPKqMHi4WnJda-AqFwjU6QFAeg2rw="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3540", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193594"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "leLO4NXI9gdieBxICNtROpuQ8c4pdvB6n-29tn5tLJE="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3541", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193594"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "leLO4NXI9gdieBxICNtROpuQ8c4pdvB6n-29tn5tLJE="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3551", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2CoXVM0noYWYrN2WZV08C3GKuoXyvR8hpZz2Bca8bJU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3549", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2CoXVM0noYWYrN2WZV08C3GKuoXyvR8hpZz2Bca8bJU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3550", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314325"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pw9MTNi3JnJmFnlL6k2Z9kT4W8qXvfD5qmnPFj7VLXQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3548", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TVO6GLf3psEP5iAdQECKR2Yq4weqVsnDfAviKEV3hLQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3546", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TVO6GLf3psEP5iAdQECKR2Yq4weqVsnDfAviKEV3hLQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3547", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TVO6GLf3psEP5iAdQECKR2Yq4weqVsnDfAviKEV3hLQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3557", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193595"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "52PM2Ag116qOlQUrLD89KgzpSoadbMbiKHJNpJRhtV4="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3555", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193595"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "52PM2Ag116qOlQUrLD89KgzpSoadbMbiKHJNpJRhtV4="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3556", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193596"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e8pLteRyngudMgKv6mTzo_2Vse2wRVM2a8kSyiNz7yc="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3554", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193597"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mu06FLo0-EaxgXwUEaINuSMxR83XmIJZ7lVdkTQ7p4k="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3552", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193597"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mu06FLo0-EaxgXwUEaINuSMxR83XmIJZ7lVdkTQ7p4k="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3553", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193598"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4IGbJNa8D5AHaXxqFUxnZjsj5IFJfvy7lw5WvyTjp8I="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3563", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qq3LJ9F7i1kYnbSGHVahSVxkxW7HtN4--8ibDszpbPo="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3561", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fi89ClUMEOZLqieDqgMOdHzCKGIPOAyoA3gpeLqhzhA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3562", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fi89ClUMEOZLqieDqgMOdHzCKGIPOAyoA3gpeLqhzhA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3560", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fi89ClUMEOZLqieDqgMOdHzCKGIPOAyoA3gpeLqhzhA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3558", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fi89ClUMEOZLqieDqgMOdHzCKGIPOAyoA3gpeLqhzhA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3559", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8wF4KtvHTIwS22sNl_YelB__NiPc0H0vJJVtCP6bad8="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3461", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193599"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PsA9Lz_nTIakwqqQ4j7DlLwWUcqJ85UKoAYNlTCQQNc="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3459", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193599"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PsA9Lz_nTIakwqqQ4j7DlLwWUcqJ85UKoAYNlTCQQNc="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3460", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193600"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Edi9pKr1wGBI-4NEdhXi29LVqMq-9JMY3F1JfaWRQ_E="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3458", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193601"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HdwJLKnJj53dwEHazIL00X0-vO4Pw9aPVeUdd1wRHmw="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3456", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193602"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wJEMKE_y3seSX-88fobrAs1pgwNgSgPmVB0SQ1djjIk="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3457", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193602"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wJEMKE_y3seSX-88fobrAs1pgwNgSgPmVB0SQ1djjIk="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3467", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V2gJdVmHJgn6Q67FTbZpOEkEodNUvMCf9e0--dp0EcA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3465", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V2gJdVmHJgn6Q67FTbZpOEkEodNUvMCf9e0--dp0EcA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3466", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V2gJdVmHJgn6Q67FTbZpOEkEodNUvMCf9e0--dp0EcA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3464", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314329"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dK92u3GX3wCs0MaXYND8hlN-2AVwmuyKOhKr9EaIhIA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3462", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314329"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dK92u3GX3wCs0MaXYND8hlN-2AVwmuyKOhKr9EaIhIA="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3463", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h0FgnfOd55ibFglnZZEXLjejxH8Py0_rU3OU_9JbRNI="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3473", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193603"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YfKJoswizIJRmZgDR7eDNDXmPGwVs9x8o8CIYVsMu5s="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3471", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193604"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knsKpq5M6NRIhISlipmkQlkZG0a-CJUjIT0P4IojyQY="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3472", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193604"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knsKpq5M6NRIhISlipmkQlkZG0a-CJUjIT0P4IojyQY="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3470", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193605"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WoXh5GZP2zMVIXos4I3swzAHF6Q7d5u1FWBABAL9pXs="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3468", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193606"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KgWBiq_2WjBmw2j1KrLPWRRHmoxO59DvT-PZMyjXTvE="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3469", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193608"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G6QCMh85el75OeTSbMHrY4B9a9cq2m1QPLSy7ED5rng="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3479", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nnOURcwLTfoMqv-5g8VL6IXn_9gS-JGUhfd79ts9i4E="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3477", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nnOURcwLTfoMqv-5g8VL6IXn_9gS-JGUhfd79ts9i4E="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3478", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nnOURcwLTfoMqv-5g8VL6IXn_9gS-JGUhfd79ts9i4E="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3476", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314331"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mnb6I8zFWqKlKE-KFlYfiJJMe2y6qAkGIEwy73Ob9_w="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3474", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dvWlS7_WNs6Dyhbn1PIwEC6Ax0a_P64ldqrox9ks8g4="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3475", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dvWlS7_WNs6Dyhbn1PIwEC6Ax0a_P64ldqrox9ks8g4="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3485", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193609"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zqFNso2608kSFpAc43XQI1M37rOJ_slqWBswJFX93-E="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3483", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193609"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zqFNso2608kSFpAc43XQI1M37rOJ_slqWBswJFX93-E="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3484", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193610"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zQz6MElpVBF7blTXIWggLFgu_Csuq-WfnQDhcQfy7kU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3482", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193611"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DQS_oyTAKGALo5zVeBMRj-1CScATttjXp0VJrPHaTIU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3480", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193612"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PfOaZ7CTF-wTMJ89YwylM_F43FRA9QJLLanm4QfQNc8="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3481", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193612"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PfOaZ7CTF-wTMJ89YwylM_F43FRA9QJLLanm4QfQNc8="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3491", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ypVj4mg7VTod4-F1DQ4eP3LCPJiou0QivM7jmJd1usQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3489", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ypVj4mg7VTod4-F1DQ4eP3LCPJiou0QivM7jmJd1usQ="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3490", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314333"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ESH_vpMKaAbHUj7CP4cmullRWhe_XQ34hvOugDD1WDU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3488", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314333"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ESH_vpMKaAbHUj7CP4cmullRWhe_XQ34hvOugDD1WDU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3486", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314333"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ESH_vpMKaAbHUj7CP4cmullRWhe_XQ34hvOugDD1WDU="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3487", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314334"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ia0QtyLULE4QvvLElnNXswL0pgNFcgLydhN_epDPm5U="
      envelope = @pubnub.revoke(group: :demo, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3497", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193613"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mOacP48GG7sZ_aootE2nvJNPKC5Yqwgt1YYhZVzC21Q="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3495", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193614"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8BInQYNm-DO9dGYQ64LXwPVkUniejp5JxwfQ-O6fND4="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3496", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193614"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8BInQYNm-DO9dGYQ64LXwPVkUniejp5JxwfQ-O6fND4="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3494", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193615"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TA-cei5iIGK7v6uLwKebUlA800qCQhGY5H5z7oU_ks4="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3492", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193616"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4oPAaGrO3T0nmSt-jkbDwV-WpQJNViDgEFh_QJTB2pE="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3493", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193616"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4oPAaGrO3T0nmSt-jkbDwV-WpQJNViDgEFh_QJTB2pE="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3503", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314335"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qm2YY9Iw250I0xWCd608S7PN9BxvZ9W7O-1V5fR6_EM="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3501", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314335"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qm2YY9Iw250I0xWCd608S7PN9BxvZ9W7O-1V5fR6_EM="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3502", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZdW5ofonjYgKQ9S9A1bQc1j1NWVuYK6fC0ZIIcEIjJY="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3500", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZdW5ofonjYgKQ9S9A1bQc1j1NWVuYK6fC0ZIIcEIjJY="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3498", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZdW5ofonjYgKQ9S9A1bQc1j1NWVuYK6fC0ZIIcEIjJY="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3499", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZdW5ofonjYgKQ9S9A1bQc1j1NWVuYK6fC0ZIIcEIjJY="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3509", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193617"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "srxATVtV_Hs87xw_SiPiWjV_JwmMHXb8MKC796E0ppA="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3507", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193618"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qkQi_oKdPw0GWK5K6xhAOofg3sU6Phrv_8fBr0w6WRM="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3508", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193618"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qkQi_oKdPw0GWK5K6xhAOofg3sU6Phrv_8fBr0w6WRM="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3506", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193619"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yd5Bm5UfzGJBqHQrzojsqgtA8cgOg1grPOsxloXIkn0="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3504", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193619"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yd5Bm5UfzGJBqHQrzojsqgtA8cgOg1grPOsxloXIkn0="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3505", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193620"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XpYPSIo8CVbdMUGirp7bYCPAUdYcBV9vJHvE53HzSio="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3515", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314337"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LEIpJItSVm082KCwTmVVin5o3j7x8rwzViRN7GDnBiU="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3513", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314337"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LEIpJItSVm082KCwTmVVin5o3j7x8rwzViRN7GDnBiU="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3514", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oi60iigXsqWKYXmc_DNalo3XqNicS6xZh0hpDI456_o="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3512", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oi60iigXsqWKYXmc_DNalo3XqNicS6xZh0hpDI456_o="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3510", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oi60iigXsqWKYXmc_DNalo3XqNicS6xZh0hpDI456_o="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3511", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-_aEfB7EPjMqg7amasybe0AesZ1L4r7ioI4ZzAP5PYA="
      envelope = @pubnub.revoke(group: :demo, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3521", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193621"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZCmpiSqHBvhI6Ckk_yFclekem9sc2RigGHyJDBJLOow="
      envelope = @pubnub.revoke(group: :demo, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3519", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193621"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZCmpiSqHBvhI6Ckk_yFclekem9sc2RigGHyJDBJLOow="
      envelope = @pubnub.revoke(group: :demo, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3520", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193622"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X8ZjDoRSy35XAy7F41R0TNnedGV8_a1hTHmN507t9NE="
      envelope = @pubnub.revoke(group: :demo, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3518", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193623"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q_yau_02iKphSEhiah0ROm05bIQviFUxKfWJGYXS9_o="
      envelope = @pubnub.revoke(group: :demo, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3516", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193623"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q_yau_02iKphSEhiah0ROm05bIQviFUxKfWJGYXS9_o="
      envelope = @pubnub.revoke(group: :demo, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3517", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193624"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "staUFpc87hICggsugElAKuaoV9qrImD_RGPUut9Mn34="
      envelope = @pubnub.revoke(group: :demo, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3527", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iLwr3r4ruYgZnQu7hY8sriCkOFk-qTJuM8aZCDyqufg="
      envelope = @pubnub.revoke(group: :demo, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3525", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iLwr3r4ruYgZnQu7hY8sriCkOFk-qTJuM8aZCDyqufg="
      envelope = @pubnub.revoke(group: :demo, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3526", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iLwr3r4ruYgZnQu7hY8sriCkOFk-qTJuM8aZCDyqufg="
      envelope = @pubnub.revoke(group: :demo, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3524", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314340"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pCA9F20v76yBt8EvE0mIur0VwnEboc7VbIdrbM5pQPY="
      envelope = @pubnub.revoke(group: :demo, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3522", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314340"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pCA9F20v76yBt8EvE0mIur0VwnEboc7VbIdrbM5pQPY="
      envelope = @pubnub.revoke(group: :demo, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3523", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314341"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "29eQmT-aEB5wHPxRDHzCNVGCQxOxbT64JHlIpbbJ74A="
      envelope = @pubnub.revoke(group: :demo, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3317", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193625"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sBSpdEUC8108jhOHJRTwP3HY3fq5OdDPLey3wvullXs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3315", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193625"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sBSpdEUC8108jhOHJRTwP3HY3fq5OdDPLey3wvullXs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3316", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193626"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YGpYhlYwFlUrW4isUZU3WEZixs0D6S-8oqTIoqWdbPQ="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3314", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193627"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VwIMqcqB9HJYpPe8DHY9YrzcjUXIovfzpN2x06LawN8="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3312", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193628"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9aKSq2YbbjI_u-OTCnviU0JkALya0WxJbFi0J9bPkDY="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3313", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193628"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9aKSq2YbbjI_u-OTCnviU0JkALya0WxJbFi0J9bPkDY="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3323", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314341"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eJCR0mlIZo0T0jasIknVZmBJuTA-1vyAoHyjG8RbkJs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3321", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314341"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eJCR0mlIZo0T0jasIknVZmBJuTA-1vyAoHyjG8RbkJs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3322", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314341"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eJCR0mlIZo0T0jasIknVZmBJuTA-1vyAoHyjG8RbkJs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3320", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qQ4i8_viOm8pP-tWUGdEth4fjN8sfMOwnAt2XZXKOEs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3318", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qQ4i8_viOm8pP-tWUGdEth4fjN8sfMOwnAt2XZXKOEs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3319", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qQ4i8_viOm8pP-tWUGdEth4fjN8sfMOwnAt2XZXKOEs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3329", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193629"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k8zVlJCIm0jc6Ftyn6vmRGoQdTiTYfKHLLdVQoNtAdU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3327", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193629"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k8zVlJCIm0jc6Ftyn6vmRGoQdTiTYfKHLLdVQoNtAdU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3328", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193630"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HgsrxYJOoZ1kD8X1iVh7oGokl6b0VVsL0xf-58V6G5E="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3326", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193631"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hiX6rELa5dTvYMnF_8uHyXZoxwxpBuLNtW9Xsofu3pM="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3324", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193631"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hiX6rELa5dTvYMnF_8uHyXZoxwxpBuLNtW9Xsofu3pM="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3325", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193632"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fYQewESayP9c5H143qLFGqp7pe_GP3STQlpqzSfw4YE="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3335", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Me7RtABuSb0rLf71SZwUbPAQ8YK4aGZN-P5vIls-QNc="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3333", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314343"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fvw95REuXG-lp3avrufy3Y_OMPZLf7ybvOxF_PsDAW4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3334", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314343"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fvw95REuXG-lp3avrufy3Y_OMPZLf7ybvOxF_PsDAW4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3332", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314343"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fvw95REuXG-lp3avrufy3Y_OMPZLf7ybvOxF_PsDAW4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3330", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jqeLjHfyetVDWR9vsYJgaIKzGNiQlVQoyiPD-qsv9Rk="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3331", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jqeLjHfyetVDWR9vsYJgaIKzGNiQlVQoyiPD-qsv9Rk="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3341", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193633"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0hpj3IWTRgnBGnNfnz43-7WCL_ON2DEkLVCdPWUUFVo="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3339", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193633"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0hpj3IWTRgnBGnNfnz43-7WCL_ON2DEkLVCdPWUUFVo="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3340", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193634"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sgFuPXs6Ki4SREtAJD8Th9eh-PmR7PuyGDuv2rGQInI="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3338", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193635"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zZtZKMzLtvzW-tcYmYGIkjUuScTz8lFZVYASsYBGKIU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3336", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193635"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zZtZKMzLtvzW-tcYmYGIkjUuScTz8lFZVYASsYBGKIU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3337", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193636"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n9AY3kaISlG4hRs32HCAwQfuv2mdFx9q0bxUBXX6SvE="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3347", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gDLbxj-pJzrnh2ybf4llJUifsTBpKl-2dn_66zhH7zU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3345", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314345"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vIgJ-vzFBNQzVLuGgbYpQQGiGWm0HXpfPcvlv28jNPg="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3346", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314345"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vIgJ-vzFBNQzVLuGgbYpQQGiGWm0HXpfPcvlv28jNPg="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3344", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tkPcED9sQNdRNqyv9V82-tXzDALm3IowTUqkTIkyM70="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3342", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tkPcED9sQNdRNqyv9V82-tXzDALm3IowTUqkTIkyM70="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3343", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tkPcED9sQNdRNqyv9V82-tXzDALm3IowTUqkTIkyM70="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3245", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193637"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hnz__98qmvCdnMw1jMuCgNywx2xcltDbYgl7WAaui3k="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3243", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193638"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2YQZ4BEmDoQ_AeIuY2kPXqknSsnhP8OFogF7Xynvu5c="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3244", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193638"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2YQZ4BEmDoQ_AeIuY2kPXqknSsnhP8OFogF7Xynvu5c="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3242", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193639"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S_glqROZSkaUPQXLJGsY_STm7Gr3rDyopr0AsYGJAtQ="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3240", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193640"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rJphiMx84QMKuTlDZQ-TjS_E8RCpSST9m0mexnTvle4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3241", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193640"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rJphiMx84QMKuTlDZQ-TjS_E8RCpSST9m0mexnTvle4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3251", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314347"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-m3AjEBmADnpT3jNQFpsZXEPVgHag8uv_5ONVxPqIE0="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3249", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y4CZxsYAqk60H-DlUjLSJybA-wKRSnODAqyIMBKgNOU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3250", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y4CZxsYAqk60H-DlUjLSJybA-wKRSnODAqyIMBKgNOU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3248", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y4CZxsYAqk60H-DlUjLSJybA-wKRSnODAqyIMBKgNOU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3246", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y4CZxsYAqk60H-DlUjLSJybA-wKRSnODAqyIMBKgNOU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3247", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kj7AaNq8j78URTW0X1ziYAuWmv3E4dN9t1JchRR5kUk="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3257", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193641"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8MLYb-TNlCRolliaoWdBahAIBfh8dQvp3LIUFvVMeW8="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3255", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193642"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t7JfC_xb0XCT304KRVHwmx1a_4B5N33MiaXJDIGTRE0="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3256", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193643"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AcLidHb2U_aik9BKPLbplbgnfnrR4HMf_PekTaNX7q4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3254", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193643"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AcLidHb2U_aik9BKPLbplbgnfnrR4HMf_PekTaNX7q4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3252", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193644"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MHTXowV8L3x7RiEbERb5l_h-5dUcaBspBaJDGCeYdJU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3253", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193644"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MHTXowV8L3x7RiEbERb5l_h-5dUcaBspBaJDGCeYdJU="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3263", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zf1YoTHVV0rwxx0y3iZxplWDhKYv6diJ9NI2Z7OTZD0="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3261", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zf1YoTHVV0rwxx0y3iZxplWDhKYv6diJ9NI2Z7OTZD0="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3262", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314350"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6PG31hQVmh8F4U9nja1afCQDt22wLfDIHZKnyTV1eFI="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3260", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314350"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6PG31hQVmh8F4U9nja1afCQDt22wLfDIHZKnyTV1eFI="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3258", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314350"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6PG31hQVmh8F4U9nja1afCQDt22wLfDIHZKnyTV1eFI="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3259", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dv53zSJ6ezx16JAppDp4xwBhpgzZmdXpCz7WeNmc3VM="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3269", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193645"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VocgMkVoD-BW3ZJhSqZ-RQsP6e3Lu_q1G4MHtaZBUPY="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3267", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193646"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xEZdDPevrQsSkp6aXyOnFvTkyL_bqzUbmsKFh2egACs="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3268", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193647"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k17s15wLGEUaCve6pMUP11IV4CACLPElbeanLxcY_6g="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3266", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193648"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n6EnC7oqVISq6CGMMf7xvHLgcSQdEq2ti-qcwf_rDdA="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3264", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193648"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n6EnC7oqVISq6CGMMf7xvHLgcSQdEq2ti-qcwf_rDdA="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3265", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193649"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F53AuilpwTMIso2jBBOjxdeuVmy9-fYKfklufPJN_o4="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3275", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EdkW8ahGYThUIpcqNMA8Z_DbHmi47PZYkuVeGDt-zts="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3273", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EdkW8ahGYThUIpcqNMA8Z_DbHmi47PZYkuVeGDt-zts="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3274", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EdkW8ahGYThUIpcqNMA8Z_DbHmi47PZYkuVeGDt-zts="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3272", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rW8JRqsIopPw2mgCiUlLb-iHj8ZfhMypB0t056jWYL8="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3270", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rW8JRqsIopPw2mgCiUlLb-iHj8ZfhMypB0t056jWYL8="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3271", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rW8JRqsIopPw2mgCiUlLb-iHj8ZfhMypB0t056jWYL8="
      envelope = @pubnub.revoke(group: :demo, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3281", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193650"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UbccreLnVNzyqvYyz-_pjWTiesDHW_v7LXYdyYi4S9g="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3279", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193651"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "njhnTEAT7d0oHtaAEOvkVjP4mU4qguZyQkyuDM46q3I="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3280", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193652"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S0l6uyDzbnWHBujUMMeXKhgLlnA_YkNYYXZRI5YNGbo="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3278", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193652"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S0l6uyDzbnWHBujUMMeXKhgLlnA_YkNYYXZRI5YNGbo="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3276", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193653"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rdSJb4ZLaMeQygU2M_Lae6dtEooByPK5_2QlsfkQsDE="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3277", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193654"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UVrN-9rg0Mr1EHnQ4nqVDqAfDiMFW-CA4_BQCwCncb0="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3287", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H1g5f8_YMr8z79HcfnqeO6yUkUQHjhmLAKIL3VASYlg="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3285", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bBz8Ra48yDx0QMYiIEy7jfsuoWt1FWCTmkLrJUK9P9g="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3286", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bBz8Ra48yDx0QMYiIEy7jfsuoWt1FWCTmkLrJUK9P9g="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3284", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bBz8Ra48yDx0QMYiIEy7jfsuoWt1FWCTmkLrJUK9P9g="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3282", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bBz8Ra48yDx0QMYiIEy7jfsuoWt1FWCTmkLrJUK9P9g="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3283", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dl4R7ohKetNP4rbXeqwKooLq66Dsd7KS1GcvSjXejsc="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3293", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193654"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hTvavkKiEX3PuE-WY6ZHTEXq3fQPRuspEp1TJXwKB2I="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3291", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193655"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0H_-zk7KzBKlyzIDJqc3sn-ZfsSVETA3rJP8miXzHog="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3292", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193656"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WCAfZItl46HJtEsL39EgKZnKGEm9agI0AFN4KuZWUsw="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3290", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193656"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WCAfZItl46HJtEsL39EgKZnKGEm9agI0AFN4KuZWUsw="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3288", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193658"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oWjmNJVBR7DY90Twc2UyM-wPTPRyNhn3AlvCnFJ21CY="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3289", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193658"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oWjmNJVBR7DY90Twc2UyM-wPTPRyNhn3AlvCnFJ21CY="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3299", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iZqJtxusKtjtg1cLBscgIjfBU23ldSxxx0rEh3N62uw="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3297", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iZqJtxusKtjtg1cLBscgIjfBU23ldSxxx0rEh3N62uw="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3298", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yDdMkrZRbW6fYtnf7V7oSNaPhX5K_D0TrKMfgbPiHCY="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3296", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yDdMkrZRbW6fYtnf7V7oSNaPhX5K_D0TrKMfgbPiHCY="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3294", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yDdMkrZRbW6fYtnf7V7oSNaPhX5K_D0TrKMfgbPiHCY="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3295", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yDdMkrZRbW6fYtnf7V7oSNaPhX5K_D0TrKMfgbPiHCY="
      envelope = @pubnub.revoke(group: :demo, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3305", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193659"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vQQMB7eUWu92D9EuLOINfKmPFtAlTUYVBbwYnDTF_ms="
      envelope = @pubnub.revoke(group: :demo, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3303", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193660"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oj9xtj3mWxVKc5y2uf7OaL92SNmTjxu9uXahenKOtEM="
      envelope = @pubnub.revoke(group: :demo, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3304", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193660"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oj9xtj3mWxVKc5y2uf7OaL92SNmTjxu9uXahenKOtEM="
      envelope = @pubnub.revoke(group: :demo, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3302", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193661"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Vt0_1t0R_1jC8mgntXudX9Gpa4cVur9yt8Nw4WBaGjw="
      envelope = @pubnub.revoke(group: :demo, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3300", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193662"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VH0O4AHb6G6TJmUCmWbbOD9-mwbZLOWskIbPJGGkDwk="
      envelope = @pubnub.revoke(group: :demo, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3301", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193662"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VH0O4AHb6G6TJmUCmWbbOD9-mwbZLOWskIbPJGGkDwk="
      envelope = @pubnub.revoke(group: :demo, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3311", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rrRhHJ7q_UQPNJ4F5icKp04B_9FhqjPs1Vz1j-Td0kg="
      envelope = @pubnub.revoke(group: :demo, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3309", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rrRhHJ7q_UQPNJ4F5icKp04B_9FhqjPs1Vz1j-Td0kg="
      envelope = @pubnub.revoke(group: :demo, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3310", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rrRhHJ7q_UQPNJ4F5icKp04B_9FhqjPs1Vz1j-Td0kg="
      envelope = @pubnub.revoke(group: :demo, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3308", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rrRhHJ7q_UQPNJ4F5icKp04B_9FhqjPs1Vz1j-Td0kg="
      envelope = @pubnub.revoke(group: :demo, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3306", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sxGUbZQOH_VQtbCc07omY7YHZwH4c3pDrkPTfNyP2Y8="
      envelope = @pubnub.revoke(group: :demo, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3307", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sxGUbZQOH_VQtbCc07omY7YHZwH4c3pDrkPTfNyP2Y8="
      envelope = @pubnub.revoke(group: :demo, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3425", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193663"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7w4qcehrLtePmBJuJ7hL9WkzYRtaf2QzK5JLyQlNtPQ="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3423", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193664"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4W9R-Rbk9hDZ1wa37ezvIRdEbuEaVQHFkuhNMGe891Q="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3424", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193664"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4W9R-Rbk9hDZ1wa37ezvIRdEbuEaVQHFkuhNMGe891Q="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3422", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193665"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n81HFWULAQNo868E7vxjUtku4KV7v7Oubzp6aORGass="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3420", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193665"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n81HFWULAQNo868E7vxjUtku4KV7v7Oubzp6aORGass="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3421", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193666"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PLHiljtKLYrbRX_ng4ky3yEiqeTSEJ0tD4-8TQjorl8="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3431", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "E18khurk0TAhS6j7DfJzL7R1cIpnScmyPQp2TQNxz6I="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3429", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "E18khurk0TAhS6j7DfJzL7R1cIpnScmyPQp2TQNxz6I="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3430", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VCOUuZTt9yCPLKQc1ESBinimA3VWRDuKQF0azzHxTos="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3428", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VCOUuZTt9yCPLKQc1ESBinimA3VWRDuKQF0azzHxTos="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3426", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VCOUuZTt9yCPLKQc1ESBinimA3VWRDuKQF0azzHxTos="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3427", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VCOUuZTt9yCPLKQc1ESBinimA3VWRDuKQF0azzHxTos="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3437", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193667"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7MXiv-6Lu8LLJmwbZTfv71iKjehpkj0UZoB-v_DgEHw="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3435", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193667"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7MXiv-6Lu8LLJmwbZTfv71iKjehpkj0UZoB-v_DgEHw="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3436", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193668"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w7-hnPOw-1viBYNLUkR8Ozi5m6LqehAvusbu0LEcGzQ="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3434", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193669"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WMZV9F4wxW3If1jAo02KUf5nPG6wyy9RyfciGzNSqhM="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3432", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193669"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WMZV9F4wxW3If1jAo02KUf5nPG6wyy9RyfciGzNSqhM="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3433", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193670"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nHcQvYS-idfZsnsD94xfR1YgkvzkF7cyT7X2JiXTrkg="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3443", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ri2Jz9LYD0JqAIN48WMpFyAdJoLx3fd52qBdzXUgtwc="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3441", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ri2Jz9LYD0JqAIN48WMpFyAdJoLx3fd52qBdzXUgtwc="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3442", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ri2Jz9LYD0JqAIN48WMpFyAdJoLx3fd52qBdzXUgtwc="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3440", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314360"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PaP7iSl3cEA9fB4M2eyAt-0Bq6-qs4z01Lv3H43sJjc="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3438", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314360"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PaP7iSl3cEA9fB4M2eyAt-0Bq6-qs4z01Lv3H43sJjc="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3439", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314360"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PaP7iSl3cEA9fB4M2eyAt-0Bq6-qs4z01Lv3H43sJjc="
      envelope = @pubnub.revoke(group: :demo, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3449", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193671"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nIuY__zzqf6ZHgpg6A2z_5XPvRuwmp9_PV1WuTUP8kw="
      envelope = @pubnub.revoke(group: :demo, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3447", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193671"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nIuY__zzqf6ZHgpg6A2z_5XPvRuwmp9_PV1WuTUP8kw="
      envelope = @pubnub.revoke(group: :demo, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3448", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193672"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fDAn4bYwi9psi__gsTfbUBqTkqDja0RbtE2m494gM38="
      envelope = @pubnub.revoke(group: :demo, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3446", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193673"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R6Au1Gtn669LMbVJTuACEmCqZtLWpBhuM1LkFLt-74M="
      envelope = @pubnub.revoke(group: :demo, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3444", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193673"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R6Au1Gtn669LMbVJTuACEmCqZtLWpBhuM1LkFLt-74M="
      envelope = @pubnub.revoke(group: :demo, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3445", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193674"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G_JBDpmACg7pZw70hIkmToBsaQGnxgZWh3yT1cE8nLY="
      envelope = @pubnub.revoke(group: :demo, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3455", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314361"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pwKJPIemzz5lbBN1NV7lGPd5Fn_RWDfxEAboUeRyezg="
      envelope = @pubnub.revoke(group: :demo, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3453", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314361"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pwKJPIemzz5lbBN1NV7lGPd5Fn_RWDfxEAboUeRyezg="
      envelope = @pubnub.revoke(group: :demo, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3454", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314361"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pwKJPIemzz5lbBN1NV7lGPd5Fn_RWDfxEAboUeRyezg="
      envelope = @pubnub.revoke(group: :demo, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3452", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314362"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UJ2GuPGjPqIkSQWKinhs1K39sy7fSFobmtSnZt8YwSc="
      envelope = @pubnub.revoke(group: :demo, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3450", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314362"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UJ2GuPGjPqIkSQWKinhs1K39sy7fSFobmtSnZt8YwSc="
      envelope = @pubnub.revoke(group: :demo, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3451", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314362"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UJ2GuPGjPqIkSQWKinhs1K39sy7fSFobmtSnZt8YwSc="
      envelope = @pubnub.revoke(group: :demo, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3353", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193675"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "izkjJxpKwIJHj5JK7YGdJHuhrcLYKNZFJ1oz4FbBIW4="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3351", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193676"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xsL6zVuPzN7aXBG2M6s4so8rHIRtX4KRNoFT-a8gNL4="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3352", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193676"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xsL6zVuPzN7aXBG2M6s4so8rHIRtX4KRNoFT-a8gNL4="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3350", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193677"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5MRIDyfBPynKmUZT16p2ZuOExdu9HVQucx6w0pE0-X8="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3348", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193678"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BateQzSvC_iMvWl8nV2XmWnaz2bzNrBjt17ccGU5u30="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3349", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193678"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BateQzSvC_iMvWl8nV2XmWnaz2bzNrBjt17ccGU5u30="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3359", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314362"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_PzqvoXYx-fOw5tXaamFYx3Y_Uf6J_1ODJ3EQCboYTU="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3357", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XEjSf8zAyQ26jajuO0YapdtRMmY8-z4ouiwvrnWoYuc="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3358", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XEjSf8zAyQ26jajuO0YapdtRMmY8-z4ouiwvrnWoYuc="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3356", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XEjSf8zAyQ26jajuO0YapdtRMmY8-z4ouiwvrnWoYuc="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3354", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XEjSf8zAyQ26jajuO0YapdtRMmY8-z4ouiwvrnWoYuc="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3355", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MROPakyFvbq9lmqcTo8wMDHN_NQbwYoEoD5wueW5EF8="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3365", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193679"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BLFbIuILA8AbBw8UL9lnIcktlSskMy1MNBdKxNQtkJg="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3363", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193680"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W7c27zNp-er4Q23-AWTI8W7XwOfzwjRTo60jMnnFt4c="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3364", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193681"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IEU-Rolo5J3B_XQSblVKHC04ofS6UdV4iTANVouoQL4="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3362", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193681"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IEU-Rolo5J3B_XQSblVKHC04ofS6UdV4iTANVouoQL4="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3360", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193682"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ubQ_F7Q5-9p5LVbdYEk74pd3qqwa8hTGPDVsWoJ2M9M="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3361", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193683"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BFm_j1u1ZvzWUurGCl1CYBMg9UwIX-ul3LflKRymbGA="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3371", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "utGrTPgnZ2JvlMmumDRHvUcGiN48jis_ZPO0xjC6leg="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3369", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "utGrTPgnZ2JvlMmumDRHvUcGiN48jis_ZPO0xjC6leg="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3370", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "utGrTPgnZ2JvlMmumDRHvUcGiN48jis_ZPO0xjC6leg="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3368", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aW3QxwUj3YfRpiKyRx8rM1HQMHkMZZjzV92rZfcmHwk="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3366", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aW3QxwUj3YfRpiKyRx8rM1HQMHkMZZjzV92rZfcmHwk="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3367", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aW3QxwUj3YfRpiKyRx8rM1HQMHkMZZjzV92rZfcmHwk="
      envelope = @pubnub.revoke(group: :demo, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3377", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193683"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ugVA5uP6gN68F9UrgRLV12dsdhBJG7xS2PyjF07V3OM="
      envelope = @pubnub.revoke(group: :demo, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3375", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193684"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kOYBkFO3kTtOZIJKfBmSjhcrBrnE1SQkDtDiiBLOu4Q="
      envelope = @pubnub.revoke(group: :demo, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3376", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193685"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vWCYAAuNHwX-xMV6y2BFoQt-rM-3hEuCoaGnR2QOB2k="
      envelope = @pubnub.revoke(group: :demo, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3374", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193685"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vWCYAAuNHwX-xMV6y2BFoQt-rM-3hEuCoaGnR2QOB2k="
      envelope = @pubnub.revoke(group: :demo, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3372", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193686"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p6Tx6slmyBYoNB8pGX8T2MOeblUO44JU5o3d8yYnL1U="
      envelope = @pubnub.revoke(group: :demo, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3373", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193687"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-VRxDKtybA_VukxR3dHIx8GFSUl98GHYOh6FybUnsYA="
      envelope = @pubnub.revoke(group: :demo, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3383", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314366"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UDcBl5Xnj8IjK5J76vkRXliqhaQl7aS4JllFOg39G3I="
      envelope = @pubnub.revoke(group: :demo, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3381", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314366"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UDcBl5Xnj8IjK5J76vkRXliqhaQl7aS4JllFOg39G3I="
      envelope = @pubnub.revoke(group: :demo, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3382", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314366"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UDcBl5Xnj8IjK5J76vkRXliqhaQl7aS4JllFOg39G3I="
      envelope = @pubnub.revoke(group: :demo, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3380", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314366"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UDcBl5Xnj8IjK5J76vkRXliqhaQl7aS4JllFOg39G3I="
      envelope = @pubnub.revoke(group: :demo, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3378", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l0gPmobtvbY5ru48_dBEjAQ9rv6YbffU4zRjrllU01c="
      envelope = @pubnub.revoke(group: :demo, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3379", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l0gPmobtvbY5ru48_dBEjAQ9rv6YbffU4zRjrllU01c="
      envelope = @pubnub.revoke(group: :demo, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3389", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193688"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cUK4jkXvRWyx0_bKSqGsYLfNrI3BAkoideeFMTgOCQo="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3387", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193688"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cUK4jkXvRWyx0_bKSqGsYLfNrI3BAkoideeFMTgOCQo="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3388", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193689"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BHdPGZXGdle6r7PkrQNv13XKk8n5Iou12ppVDtbZTSk="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3386", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193690"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nPk9IPswLhDyMCdoroThVVRuf1rMQcoClRtoBb_CwrE="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3384", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193690"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nPk9IPswLhDyMCdoroThVVRuf1rMQcoClRtoBb_CwrE="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3385", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193691"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bS_tz5tmDYWNlXHLmPLZ9zDHPGomdyubIayKIJz-Wy0="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3395", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kJj8wqXaw5lSJUgcvmn0kkWui785GwouROpY7O9LLP4="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3393", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kJj8wqXaw5lSJUgcvmn0kkWui785GwouROpY7O9LLP4="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3394", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314368"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5M8N8zV1QADyCE0Xkdyulws-gmjR7Qfe5Ti-KNyiZ7s="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3392", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314368"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5M8N8zV1QADyCE0Xkdyulws-gmjR7Qfe5Ti-KNyiZ7s="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3390", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314368"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5M8N8zV1QADyCE0Xkdyulws-gmjR7Qfe5Ti-KNyiZ7s="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3391", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O4rQgLlogZJEuqcNuQFTZrsnrae6Mg30AgEBQGFPeAU="
      envelope = @pubnub.revoke(group: :demo, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3401", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193692"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JbktD9sTXVYAkr31wq5o4zWa2Y7THfSZG6p9Qmmc9xY="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3399", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193693"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5mAl4c1yxm_JaqSZOUKukT3SKhxptcjYatiFoe3TAfg="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3400", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193693"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5mAl4c1yxm_JaqSZOUKukT3SKhxptcjYatiFoe3TAfg="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3398", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193694"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lexTP5CpWME4vD8bYv507shem8gLY2Oap1um3HZLGKw="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3396", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193695"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ammsvZSqEiVHePHZXXYhAvtBlwuepT-jDCOhiKyMw4Q="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3397", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193695"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ammsvZSqEiVHePHZXXYhAvtBlwuepT-jDCOhiKyMw4Q="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3407", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UX7wENGcAEwla75Sj2EYNIkdWC066F12fC4oVeaebNc="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3405", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UX7wENGcAEwla75Sj2EYNIkdWC066F12fC4oVeaebNc="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3406", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314370"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IDm34iy4xBPgnLoMwTdQH_iHNrs8lQgmPWzmAV0nv_0="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3404", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314370"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IDm34iy4xBPgnLoMwTdQH_iHNrs8lQgmPWzmAV0nv_0="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3402", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314370"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IDm34iy4xBPgnLoMwTdQH_iHNrs8lQgmPWzmAV0nv_0="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3403", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CtRpl4Rys80qbKlIp2LxRGn4iGfF6QYK8AomkDnLS-Y="
      envelope = @pubnub.revoke(group: :demo, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3413", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193696"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "04f4PANHxOjvT0rWhzNTC8OwIgd7fvq42JpnSKyj6EA="
      envelope = @pubnub.revoke(group: :demo, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3411", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193696"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "04f4PANHxOjvT0rWhzNTC8OwIgd7fvq42JpnSKyj6EA="
      envelope = @pubnub.revoke(group: :demo, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3412", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193697"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fiOxScgELLawPOK-vMvUMmX22KLI_R2C2oWz4LHlcEo="
      envelope = @pubnub.revoke(group: :demo, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3410", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193698"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fmKV7jfLten7HqXi5hMXBegrnz3iX641fniQT8VfV9s="
      envelope = @pubnub.revoke(group: :demo, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3408", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193698"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fmKV7jfLten7HqXi5hMXBegrnz3iX641fniQT8VfV9s="
      envelope = @pubnub.revoke(group: :demo, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3409", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193699"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XuFIbHcVoUumRxdvFkw6HXt0bRxg_KBZDG_wi-faLXo="
      envelope = @pubnub.revoke(group: :demo, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/3419", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdAaxj99qXUkzH1G4Zw_RuieagvxQckmXqcAltgyq9g="
      envelope = @pubnub.revoke(group: :demo, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3417", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdAaxj99qXUkzH1G4Zw_RuieagvxQckmXqcAltgyq9g="
      envelope = @pubnub.revoke(group: :demo, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3418", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdAaxj99qXUkzH1G4Zw_RuieagvxQckmXqcAltgyq9g="
      envelope = @pubnub.revoke(group: :demo, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/3416", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HmQzT7wj-qVeMZSjnLdCb8FCosdxyVUx9JtilJcnETQ="
      envelope = @pubnub.revoke(group: :demo, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/3414", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HmQzT7wj-qVeMZSjnLdCb8FCosdxyVUx9JtilJcnETQ="
      envelope = @pubnub.revoke(group: :demo, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/3415", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HmQzT7wj-qVeMZSjnLdCb8FCosdxyVUx9JtilJcnETQ="
      envelope = @pubnub.revoke(group: :demo, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2885", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193700"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OdfW9I269iHkz8ytdtfHpKTvOw_3flWoe05LboTMKMc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2883", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193700"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OdfW9I269iHkz8ytdtfHpKTvOw_3flWoe05LboTMKMc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end
end
