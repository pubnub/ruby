require 'spec_helper'

describe Pubnub::Subscribe do
  around :each do |example|
    Celluloid.boot

    @fired = false

    @callback = ->(_envelope) do
      @fired = true
    end

    @pubnub = Pubnub.new(
      publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
      subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
      uuid: 'ruby-test-uuid-client-one',
      auth_key: 'ruby-test-auth-client-one'
    )

    example.run
    Celluloid.shutdown
  end

  it '__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/226', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>1, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001190542500", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001191474214", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[0].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001191474214", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>1, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001190542500", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001191474214", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[1].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001191474214", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>3, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001191756650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001192088353", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[2].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001192088353", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>3, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001191756650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001192088353", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[3].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001192088353", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400119, "uuid"=>"ruby-test-uuid-client-one", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001197078636", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[4].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400119, "uuid"=>"ruby-test-uuid-client-one", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001197078636", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-one", :timestamp=>1465400119, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400119, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001199512992", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[5].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400119, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001199512992", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400119, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001204237539", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654001205115313)
expect(envelopes[6].status[:last_timetoken]).to eq(14653998788230215)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001204237539", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400120, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/222', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>5, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001222686012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001223019766", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001233778443)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001205115313)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001223019766", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>5, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001222686012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001223019766", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001233778443)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001205115313)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001223019766", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>7, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001223294790", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001223624852", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001233778443)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001205115313)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001223624852", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>7, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001223294790", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001223624852", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001233778443)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001205115313)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001223624852", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400123, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001232208777", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001233778443)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001205115313)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400123, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001232208777", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400123, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/224', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>9, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001254851170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001255180181", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001268949943)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001233778443)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001255180181", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>9, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001254851170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001255180181", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001268949943)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001233778443)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001255180181", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>11, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001255461550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001255780885", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001268949943)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001233778443)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001255780885", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>11, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001255461550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001255780885", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001268949943)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001233778443)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001255780885", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400126, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001268081911", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001268949943)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001233778443)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400126, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001268081911", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400126, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/220', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>13, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001286945018", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001287268475", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001301002950)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001268949943)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001287268475", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>13, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001286945018", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001287268475", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001301002950)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001268949943)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001287268475", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>15, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001287570838", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001287892588", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001301002950)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001268949943)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001287892588", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>15, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001287570838", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001287892588", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001301002950)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001268949943)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001287892588", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400129, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001293633096", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001301002950)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001268949943)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400129, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001293633096", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400129, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400130, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001300165034", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001301002950)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001268949943)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400130, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001300165034", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400130, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/216', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>17, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001319124430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001319442645", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001333822137)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001301002950)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001319442645", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>17, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001319124430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001319442645", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001333822137)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001301002950)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001319442645", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>19, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001319726300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001320048093", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001333822137)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001301002950)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001320048093", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>19, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001319726300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001320048093", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001333822137)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001301002950)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001320048093", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400132, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001326142867", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001333822137)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001301002950)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400132, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001326142867", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400132, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400133, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001332344536", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001333822137)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001301002950)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400133, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001332344536", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400133, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/218', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>21, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001351317460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001351637859", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001358990861)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001333822137)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001351637859", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>21, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001351317460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001351637859", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001358990861)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001333822137)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001351637859", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>23, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001351939818", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001352263357", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001358990861)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001333822137)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001352263357", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>23, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001351939818", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001352263357", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001358990861)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001333822137)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001352263357", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400135, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001356603751", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001358990861)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001333822137)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400135, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001356603751", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400135, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/232', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>25, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001383457100", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001383775393", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001396079218)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001358990861)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001383775393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400139, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001395009455", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001396079218)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001358990861)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400139, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001395009455", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400139, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/228', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>27, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001416988148", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001417310265", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001428988608)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001396079218)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001417310265", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400142, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001423812365", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001428988608)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001396079218)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400142, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001423812365", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400142, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400142, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001428464580", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001428988608)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001396079218)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400142, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001428464580", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400142, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/230', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>29, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001449119670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001449438049", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001461073709)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001428988608)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001449438049", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400145, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001455035084", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001461073709)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001428988608)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400145, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001455035084", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400145, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400146, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001460610279", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001461073709)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001428988608)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400146, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001460610279", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400146, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/208', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>31, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001481248168", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001481572362", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001493794312)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001449443038)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001481572362", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>31, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001481248168", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001481572362", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001493794312)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001449443038)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001481572362", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>33, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001481848042", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001482163661", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001493794312)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001449443038)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001482163661", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>33, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001481848042", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001482163661", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001493794312)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001449443038)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001482163661", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400148, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001489007895", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001493794312)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001449443038)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400148, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001489007895", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400148, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400149, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001493312243", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001493794312)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001449443038)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400149, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001493312243", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400149, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/204', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>35, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001513434792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001513759183", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001528524072)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001493794312)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001513759183", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>35, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001513434792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001513759183", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001528524072)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001493794312)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001513759183", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>37, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001514041012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001514366041", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001528524072)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001493794312)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001514366041", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>37, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001514041012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001514366041", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001528524072)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001493794312)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001514366041", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400152, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001524061616", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001528524072)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001493794312)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400152, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001524061616", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400152, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400152, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001526555026", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001528524072)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001493794312)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400152, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001526555026", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400152, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/206', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>39, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001545628622", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001545949979", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001545949979", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>39, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001545628622", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001545949979", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001545949979", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>41, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001546224110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001546554790", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001546554790", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>41, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001546224110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001546554790", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001546554790", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400155, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001551805146", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400155, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001551805146", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400155, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400155, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001558781308", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400155, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001558781308", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400155, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400155, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001558846878", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654001560175487)
expect(envelopes[6].status[:last_timetoken]).to eq(14654001528524072)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400155, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001558846878", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400155, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/202', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>43, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001582713680", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001583031743", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001596599290)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001581318663)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001583031743", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>45, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001583313570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001583634957", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001596599290)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001581318663)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001583634957", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400159, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001595845765", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001596599290)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001581318663)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400159, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001595845765", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400159, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>43, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001582713680", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001583031743", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001596599290)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001581318663)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001583031743", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>45, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001583313570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001583634957", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001596599290)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001581318663)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001583634957", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/198', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>47, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001615137160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001615461168", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001627626116)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001596599290)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001615461168", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>47, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001615137160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001615461168", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001627626116)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001596599290)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001615461168", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>49, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001615738890", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001616061670", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001627626116)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001596599290)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001616061670", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>49, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001615738890", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001616061670", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001627626116)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001596599290)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001616061670", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400161, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001619985847", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001627626116)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001596599290)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400161, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001619985847", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400161, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400162, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001627239499", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001627626116)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001596599290)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400162, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001627239499", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400162, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/200', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>51, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001647491560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001647813111", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001647813111", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>51, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001647491560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001647813111", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001647813111", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>53, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001648092280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001648414217", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001648414217", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>53, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001648092280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001648414217", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001648414217", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400165, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001654399530", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400165, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001654399530", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400165, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400165, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001659558360", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400165, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001659558360", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400165, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400166, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001660243847", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654001661158464)
expect(envelopes[6].status[:last_timetoken]).to eq(14654001627626116)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400166, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001660243847", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400166, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/214', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>55, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001679865260", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001680187182", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001691759089)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001678508744)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001680187182", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400169, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001691363857", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001691759089)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001678508744)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400169, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001691363857", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400169, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/210', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>57, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001712184992", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001712505130", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001725551947)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001691759089)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001712505130", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400171, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001716009938", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001725551947)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001691759089)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400171, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001716009938", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400171, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400172, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001724775074", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001725551947)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001691759089)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400172, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001724775074", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400172, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/212', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>59, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001744535920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001744858223", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001758549914)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001725551947)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001744858223", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400175, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001751902106", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001758549914)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001725551947)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400175, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001751902106", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400175, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400175, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001757095054", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001758549914)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001725551947)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400175, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654001757095054", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400175, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/244', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>61, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001776874040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001777194291", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001789929019)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001775510359)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001777194291", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>63, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001777466480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001777783403", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001789929019)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001775510359)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001777783403", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400178, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001788994250", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001789929019)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001775510359)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400178, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001788994250", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400178, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>61, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001776874040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001777194291", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001789929019)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001775510359)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001777194291", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>63, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001777466480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001777783403", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001789929019)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001775510359)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001777783403", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/240', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>65, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001810550232", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001810869150", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001824563958)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001789929019)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001810869150", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>65, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001810550232", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001810869150", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001824563958)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001789929019)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001810869150", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>67, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001811160400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001811481585", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001824563958)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001789929019)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001811481585", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>67, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001811160400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001811481585", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001824563958)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001789929019)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001811481585", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400181, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001817075592", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001824563958)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001789929019)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400181, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001817075592", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400181, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400182, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001823787047", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001824563958)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001789929019)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400182, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001823787047", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400182, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/242', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>69, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001843456928", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001843783083", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001852770873)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001824563958)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001843783083", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>69, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001843456928", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001843783083", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001852770873)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001824563958)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001843783083", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>71, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001844066648", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001844383376", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001852770873)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001824563958)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001844383376", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>71, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001844066648", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001844383376", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001852770873)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001824563958)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001844383376", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400185, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001851342588", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001852770873)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001824563958)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400185, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001851342588", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400185, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/238', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>73, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001875823988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001876147104", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001888307575)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001852770873)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001876147104", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>73, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001875823988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001876147104", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001888307575)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001852770873)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001876147104", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>75, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001876437140", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001876763834", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001888307575)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001852770873)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001876763834", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>75, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001876437140", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001876763834", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001888307575)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001852770873)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001876763834", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400188, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001887913276", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001888307575)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001852770873)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400188, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001887913276", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400188, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/234', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>77, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001908280650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001908601721", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001922259584)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001888307575)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001908601721", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>77, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001908280650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001908601721", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001922259584)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001888307575)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001908601721", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>79, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001908895428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001909218801", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001922259584)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001888307575)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001909218801", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>79, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001908895428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001909218801", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001922259584)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001888307575)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001909218801", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400191, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001913076305", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001922259584)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001888307575)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400191, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001913076305", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400191, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400192, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001921551792", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654001922259584)
expect(envelopes[5].status[:last_timetoken]).to eq(14654001888307575)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400192, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001921551792", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400192, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/236', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>81, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001940725792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001941042920", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001947218048)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001922259584)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001941042920", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>81, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001940725792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001941042920", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001947218048)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001922259584)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001941042920", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>83, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001941336030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001941654771", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654001947218048)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001922259584)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001941654771", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>83, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001941336030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001941654771", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654001947218048)
expect(envelopes[3].status[:last_timetoken]).to eq(14654001922259584)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001941654771", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400194, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001946464360", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654001947218048)
expect(envelopes[4].status[:last_timetoken]).to eq(14654001922259584)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400194, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001946464360", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400194, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/250', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>85, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654001973120050", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654001973439599", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654001984991760)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001971749625)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654001973439599", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400198, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654001984601076", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654001984991760)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001971749625)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400198, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654001984601076", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400198, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/246', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>87, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002005486400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002005806447", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002018913697)
expect(envelopes[0].status[:last_timetoken]).to eq(14654001984991760)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002005806447", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400201, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002013495670", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002018913697)
expect(envelopes[1].status[:last_timetoken]).to eq(14654001984991760)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400201, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002013495670", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400201, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400201, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002018136887", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002018913697)
expect(envelopes[2].status[:last_timetoken]).to eq(14654001984991760)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400201, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002018136887", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400201, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/248', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>89, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002037880160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002038205512", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002042688184)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002018913697)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002038205512", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400204, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002042302073", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002042688184)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002018913697)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400204, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002042302073", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400204, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/190', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>91, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002070348712", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002070673691", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002070673691", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>91, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002070348712", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002070673691", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002070673691", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>93, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002070966552", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002071288060", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002071288060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>93, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002070966552", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002071288060", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002071288060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400207, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002078047164", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400207, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002078047164", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400207, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400207, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002078637616", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400207, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002078637616", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400207, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400207, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002078870925", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[6].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400207, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002078870925", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400207, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002083464140", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[7].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002083464140", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400208, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002083687893", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[8].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002083687893", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400208, :state=>nil, :occupancy=>0}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002086288787", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[9].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002086288787", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400208, :state=>nil, :occupancy=>0}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400209, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002091133364", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654002093235999)
expect(envelopes[10].status[:last_timetoken]).to eq(14654002038292026)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400209, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002091133364", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400209, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/186', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>95, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002102848800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002103168155", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002103168155", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>95, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002102848800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002103168155", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002103168155", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>97, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002103450460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002103773891", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002103773891", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>97, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002103450460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002103773891", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002103773891", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400210, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002109416058", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400210, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002109416058", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400210, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400211, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002110264139", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400211, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002110264139", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400211, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400211, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002116329532", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[6].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400211, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002116329532", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400211, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400211, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002116796379", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654002117569264)
expect(envelopes[7].status[:last_timetoken]).to eq(14654002093235999)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400211, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002116796379", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400211, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/188', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>99, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002135451742", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002135771831", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002135771831", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>99, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002135451742", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002135771831", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002135771831", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>101, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002136054380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002136573589", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002136573589", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>101, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002136054380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002136573589", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002136573589", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400214, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002147770752", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400214, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002147770752", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400214, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002150856603", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002150856603", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400215, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002155681749", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[6].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002155681749", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400215, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400216, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002164228736", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654002164906267)
expect(envelopes[7].status[:last_timetoken]).to eq(14654002117569264)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400216, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002164228736", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400216, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/184', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>103, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002167833460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002168154272", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002168154272", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>103, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002167833460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002168154272", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002168154272", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>105, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002168440408", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002168766077", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002168766077", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>105, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002168440408", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002168766077", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002168766077", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400217, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002174580283", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400217, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002174580283", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400217, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400217, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002175212078", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400217, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002175212078", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400217, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400218, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002181159076", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654002181546944)
expect(envelopes[6].status[:last_timetoken]).to eq(14654002164906267)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400218, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002181159076", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400218, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/180', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>107, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002200433778", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002200783102", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002200783102", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>107, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002200433778", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002200783102", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002200783102", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>109, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002201063490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002201388070", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002201388070", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>109, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002201063490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002201388070", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002201388070", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400220, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002209501220", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400220, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002209501220", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400220, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002213689127", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002213689127", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400221, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002215203727", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[6].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002215203727", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400221, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002217633659", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[7].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002217633659", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400221, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400222, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002220611850", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654002222644789)
expect(envelopes[8].status[:last_timetoken]).to eq(14654002181546944)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400222, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002220611850", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400222, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/182', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>111, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002234062610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002234383172", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002234383172", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>111, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002234062610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002234383172", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002234383172", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>113, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002234660812", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002234978803", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002234978803", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>113, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002234660812", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002234978803", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002234978803", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400223, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002239060994", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400223, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002239060994", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400223, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400223, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002239718796", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400223, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002239718796", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400223, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400224, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002246236320", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[6].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400224, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002246236320", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400224, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400225, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002250253255", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654002251241892)
expect(envelopes[7].status[:last_timetoken]).to eq(14654002222644789)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400225, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002250253255", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400225, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/196', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>115, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002266448340", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002266765925", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002287274160)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002251241892)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002266765925", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400227, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002271681302", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002287274160)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002251241892)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400227, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002271681302", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400227, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400227, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002272326697", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002287274160)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002251241892)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400227, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002272326697", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400227, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400227, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002279082951", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002287274160)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002251241892)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400227, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002279082951", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400227, :state=>nil, :occupancy=>0}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002281715832", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002287274160)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002251241892)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002281715832", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400228, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002286495714", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002287274160)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002251241892)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002286495714", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400228, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/192', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>117, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002298851662", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002299172163", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002312864945)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002287274160)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002299172163", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400230, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002307048606", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002312864945)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002287274160)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400230, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002307048606", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400230, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400230, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002307051582", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002312864945)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002287274160)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400230, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002307051582", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400230, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400230, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002307862991", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002312864945)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002287274160)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400230, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002307862991", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400230, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400231, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002312083835", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002312864945)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002287274160)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400231, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002312083835", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400231, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400231, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002312088004", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654002312864945)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002287274160)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400231, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002312088004", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400231, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/194', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>119, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002331259200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002331584842", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002349857437)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002312864945)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002331584842", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002343785875", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002349857437)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002312864945)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654002343785875", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400234, :state=>nil, :occupancy=>0}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002347479585", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002349857437)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002312864945)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002347479585", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400234, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002348181280", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002349857437)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002312864945)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654002348181280", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400234, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002349470210", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654002349857437)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002312864945)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400234, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002349470210", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400234, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/262', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>121, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002363645630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002363967684", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002364663995)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002331645945)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002363967684", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>121, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002363645630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002363967684", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002364663995)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002331645945)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002363967684", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>123, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002364251700", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002364582193", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002364663995)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002331645945)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002364582193", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>123, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002364251700", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002364582193", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002364663995)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002331645945)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002364582193", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/258', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>125, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002396075270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002396399452", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002397098110)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002364663995)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002396399452", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>125, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002396075270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002396399452", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002397098110)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002364663995)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002396399452", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>127, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002396685670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002397010125", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002397098110)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002364663995)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002397010125", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>127, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002396685670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002397010125", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002397098110)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002364663995)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002397010125", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/260', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>129, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002428423162", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002428742671", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002429438214)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002397098110)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002428742671", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>129, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002428423162", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002428742671", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002429438214)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002397098110)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002428742671", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>131, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002429025960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002429357288", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002429438214)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002397098110)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002429357288", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>131, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002429025960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002429357288", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002429438214)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002397098110)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002429357288", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/256', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>133, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002460772160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002461088886", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002461737085)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002429438214)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002461088886", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>133, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002460772160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002461088886", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002461737085)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002429438214)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002461088886", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>135, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002461363508", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002461684260", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002461737085)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002429438214)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002461684260", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>135, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002461363508", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002461684260", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002461737085)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002429438214)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002461684260", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/252', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>137, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002493209080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002493531377", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002494224014)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002461737085)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002493531377", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>137, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002493209080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002493531377", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002494224014)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002461737085)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002493531377", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>139, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002493819818", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002494141507", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002494224014)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002461737085)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002494141507", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>139, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002493819818", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002494141507", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002494224014)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002461737085)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002494141507", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/254', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>141, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002525603102", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002525923985", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002526607699)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002494224014)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002525923985", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>141, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002525603102", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002525923985", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002526607699)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002494224014)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002525923985", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>143, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002526200780", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002526524328", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002526607699)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002494224014)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002526524328", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>143, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002526200780", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002526524328", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002526607699)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002494224014)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002526524328", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/268', record: :none) do
@pubnub.subscribe(channel: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>145, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002557984058", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002558315508", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002558369952)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002526607698)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002558315508", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/264', record: :none) do
@pubnub.subscribe(channel: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>147, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002590286870", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002590608473", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002590691728)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002558369952)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002590608473", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/266', record: :none) do
@pubnub.subscribe(channel: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>149, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002622886788", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002623214090", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002623299754)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002590691728)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002623214090", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/136', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>151, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002655209952", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002655534697", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002674393029)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002623299754)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002655534697", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>153, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002655811420", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002656130143", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002674393029)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002623299754)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002656130143", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400266, "uuid"=>"ruby-test-uuid-client-one", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002661816116", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002674393029)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002623299754)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400266, "uuid"=>"ruby-test-uuid-client-one", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002661816116", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-one", :timestamp=>1465400266, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400267, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002673190739", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002674393029)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002623299754)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400267, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002673190739", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400267, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/132', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>155, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002688964832", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002689285085", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002702941828)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002674393029)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002689285085", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>157, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002689559490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002689885447", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002702941828)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002674393029)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002689885447", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400269, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002692991387", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002702941828)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002674393029)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400269, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002692991387", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400269, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400270, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002702187716", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002702941828)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002674393029)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400270, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002702187716", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400270, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/134', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>159, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002721449790", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002721792967", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002733965662)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002702941828)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002721792967", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>161, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002722068990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002722386419", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002733965662)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002702941828)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002722386419", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400272, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002728642467", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002733965662)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002702941828)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400272, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002728642467", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400272, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400273, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002733576420", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002733965662)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002702941828)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400273, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002733576420", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400273, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/130', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>163, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002754905478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002755231289", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002767429850)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002733965662)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002755231289", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>165, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002755512350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002755831959", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002767429850)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002733965662)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002755831959", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400276, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002762371886", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002767429850)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002733965662)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400276, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002762371886", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400276, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400276, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002767041545", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002767429850)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002733965662)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400276, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002767041545", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400276, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/126', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>167, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002787329678", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002787653330", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002801274476)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002767429850)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002787653330", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>169, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002787933240", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002788253778", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002801274476)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002767429850)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002788253778", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400279, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002792438837", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002801274476)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002767429850)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400279, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002792438837", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400279, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400280, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002800498437", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002801274476)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002767429850)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400280, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002800498437", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400280, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/128', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>171, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002819718348", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002820036337", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002829503745)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002801274476)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002820036337", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>173, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002820328598", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002820651009", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002829503745)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002801274476)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002820651009", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400282, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002828006000", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002829503745)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002801274476)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400282, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002828006000", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400282, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/142', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>175, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002851976068", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002852296096", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002866176318)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002829503745)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002852296096", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400286, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002864552771", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002866176318)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002829503745)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400286, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002864552771", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400286, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/138', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>177, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002884279750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002884600351", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002897693222)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002866176318)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002884600351", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400289, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002892294045", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002897693222)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002866176318)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400289, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002892294045", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400289, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400289, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002896915315", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002897693222)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002866176318)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400289, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002896915315", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400289, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/140', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>179, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002916641750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002916962451", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002931592338)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002897693222)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002916962451", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400292, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002924186794", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002931592338)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002897693222)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400292, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002924186794", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400292, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400293, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002930816939", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002931592338)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002897693222)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400293, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654002930816939", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400293, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/118', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>181, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002948994948", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002949317330", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002964249010)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002917045538)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002949317330", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>183, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002949600360", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002949922286", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002964249010)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002917045538)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002949922286", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400296, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002963478478", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002964249010)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002917045538)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400296, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002963478478", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400296, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400296, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002963478478", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002964249010)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002917045538)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400296, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002963478478", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400296, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/114', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>185, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002981381672", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002981700316", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654002993847139)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002964249010)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654002981700316", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>187, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654002981978948", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654002982302999", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654002993847139)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002964249010)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654002982302999", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400299, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002993460928", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654002993847139)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002964249010)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400299, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002993460928", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400299, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400299, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654002993460928", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654002993847139)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002964249010)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400299, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654002993460928", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400299, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/116', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>189, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003013745238", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003014066720", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003027732339)
expect(envelopes[0].status[:last_timetoken]).to eq(14654002993847139)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003014066720", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>191, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003014348270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003014676719", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003027732339)
expect(envelopes[1].status[:last_timetoken]).to eq(14654002993847139)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003014676719", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003020982767", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003027732339)
expect(envelopes[2].status[:last_timetoken]).to eq(14654002993847139)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003020982767", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400302, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003020982767", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003027732339)
expect(envelopes[3].status[:last_timetoken]).to eq(14654002993847139)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003020982767", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400302, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003026954340", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003027732339)
expect(envelopes[4].status[:last_timetoken]).to eq(14654002993847139)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003026954340", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400302, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003026954340", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003027732339)
expect(envelopes[5].status[:last_timetoken]).to eq(14654002993847139)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400302, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003026954340", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400302, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/112', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>193, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003046158888", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003046482237", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003051786743)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003027732339)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003046482237", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>195, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003046760052", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003047082882", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003051786743)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003027732339)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003047082882", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400305, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003051420776", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003051786743)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003027732339)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400305, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003051420776", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400305, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400305, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003051420776", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003051786743)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003027732339)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400305, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003051420776", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400305, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/108', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>197, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003078700480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003079020269", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003093686396)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003051786743)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003079020269", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>199, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003079309340", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003079627980", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003093686396)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003051786743)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003079627980", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400309, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003091870889", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003093686396)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003051786743)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400309, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003091870889", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400309, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400309, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003091870889", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003093686396)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003051786743)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400309, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003091870889", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400309, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/110', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>201, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003111019020", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003111338732", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003121243884)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003093686396)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003111338732", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>203, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003111600662", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003111917698", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003121243884)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003093686396)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003111917698", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400312, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003120852722", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003121243884)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003093686396)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400312, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003120852722", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400312, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400312, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003120852722", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003121243884)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003093686396)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400312, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003120852722", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400312, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/124', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>205, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003143368130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003143686281", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003157782581)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003121243884)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003143686281", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400315, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003156016618", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003157782581)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003121243884)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400315, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003156016618", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400315, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400315, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003156016618", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003157782581)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003121243884)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400315, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003156016618", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400315, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/120', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>207, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003175672920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003175992684", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003184530582)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003157782581)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003175992684", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400318, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003183603389", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003184530582)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003157782581)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400318, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003183603389", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400318, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400318, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003183603389", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003184530582)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003157782581)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400318, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003183603389", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400318, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/122', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>209, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003208017412", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003208338357", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003219967253)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003184530582)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003208338357", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400321, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003219579085", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003219967253)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003184530582)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400321, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003219579085", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400321, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400321, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003219579085", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003219967253)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003184530582)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400321, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003219579085", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400321, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/154', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>211, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003240376380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003240700534", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003254369036)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003219967252)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003240700534", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>213, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003240974750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003241305414", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003254369036)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003219967252)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003241305414", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400325, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003253595611", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003254369036)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003219967252)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400325, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003253595611", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400325, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/150', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>215, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003272755580", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003273078707", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003285337394)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003254369036)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003273078707", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>217, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003273357160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003273689107", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003285337394)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003254369036)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003273689107", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400327, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003278381132", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003285337394)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003254369036)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400327, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003278381132", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400327, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400328, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003284944538", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003285337394)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003254369036)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400328, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003284944538", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400328, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/152', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400331, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003316604574", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003321896851)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003308091539)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400331, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003316604574", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400331, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400332, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003321517904", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003321896851)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003308091539)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400332, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003321517904", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400332, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>219, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003309409600", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003309730444", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003321896851)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003308091539)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003309730444", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>221, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003310011430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003310337814", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003321896851)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003308091539)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003310337814", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/148', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>223, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003341586650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003341906677", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003355607992)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003321896851)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003341906677", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>225, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003342175942", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003342500416", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003355607992)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003321896851)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003342500416", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400335, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003350422422", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003355607992)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003321896851)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400335, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003350422422", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400335, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400335, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003354770911", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003355607992)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003321896851)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400335, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003354770911", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400335, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/144', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>227, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003373729070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003374046191", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003382898220)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003355607992)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003374046191", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>229, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003374325440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003374646872", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003382898220)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003355607992)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003374646872", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400338, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003382434378", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003382898220)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003355607992)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400338, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003382434378", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400338, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/146', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>231, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003411202970", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003411521418", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003425140678)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003382898220)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003411521418", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>233, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003411803288", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003412121954", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003425140678)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003382898220)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003412121954", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400342, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003424374899", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003425140678)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003382898220)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400342, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003424374899", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400342, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/160', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>235, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003443333278", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003443653704", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003455247920)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003425140678)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003443653704", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400344, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003446564523", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003455247920)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003425140678)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400344, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003446564523", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400344, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400345, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003454874998", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003455247920)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003425140678)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400345, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003454874998", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400345, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/156', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>237, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003475556360", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003475874359", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003487807910)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003455247920)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003475874359", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400348, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003483628387", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003487807910)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003455247920)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400348, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003483628387", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400348, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400348, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003487089617", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003487807910)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003455247920)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400348, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003487089617", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400348, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/158', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>239, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003507672000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003507997476", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003522219654)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003487807910)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003507997476", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400351, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003517073358", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003522219654)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003487807910)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400351, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003517073358", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400351, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400352, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003520324410", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003522219654)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003487807910)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400352, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654003520324410", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400352, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/100', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>241, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003539822422", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003540141246", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003540141246", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>243, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003540432000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003540751131", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003540751131", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400354, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003547058124", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400354, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003547058124", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400354, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400354, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003547081950", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400354, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003547081950", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400354, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400354, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003547081950", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400354, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003547081950", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400354, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003551960183", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003551960183", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400355, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003554941710", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[6].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003554941710", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400355, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003559631091", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[7].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003559631091", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400355, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003559631091", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654003560452755)
expect(envelopes[8].status[:last_timetoken]).to eq(14654003507965512)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400355, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003559631091", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400355, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/96', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>245, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003576705730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003577029908", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003577029908", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003583173029", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003583173029", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400358, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003596864384", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003596864384", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400359, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003597490028", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003597490028", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400359, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003583173029", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003583173029", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400358, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003596864384", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003596864384", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400359, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003597490028", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[6].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003597490028", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400359, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003583193115", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[7].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003583193115", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400358, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003589035999", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[8].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003589035999", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400358, :state=>nil, :occupancy=>0}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003583816826", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[9].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400358, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003583816826", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400358, :state=>nil, :occupancy=>1}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003592012725", :region_code=>2}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[10].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003592012725", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400359, :state=>nil, :occupancy=>0}})


expect(envelopes[11].status[:code]).to eq(200)
expect(envelopes[11].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>247, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003577497480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003577815802", :region_code=>12}})
expect(envelopes[11].status[:category]).to eq(:ack)
expect(envelopes[11].status[:auto_retried]).to eq(true)
expect(envelopes[11].status[:current_timetoken]).to eq(14654003598619043)
expect(envelopes[11].status[:last_timetoken]).to eq(14654003575330111)
expect(envelopes[11].status[:subscribed_channels]).to eq([])
expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[11].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[11].result[:code]).to eq(200)
expect(envelopes[11].result[:operation]).to eq(:subscribe)
expect(envelopes[11].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003577815802", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/98', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>249, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003609186430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003609510033", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003628426279)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003598619043)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003609510033", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>251, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003609794712", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003610112800", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003628426279)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003598619043)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003610112800", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400361, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003615624671", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003628426279)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003598619043)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400361, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003615624671", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400361, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400361, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003616429040", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003628426279)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003598619043)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400361, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003616429040", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400361, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400362, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003622384912", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003628426279)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003598619043)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400362, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003622384912", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400362, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400362, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003627382885", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003628426279)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003598619043)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400362, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003627382885", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400362, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/94', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>253, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003641619590", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003642190105", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003658971665)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003628426279)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003642190105", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>255, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003642483210", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003642801746", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003658971665)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003628426279)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003642801746", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400364, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003646500087", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003658971665)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003628426279)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400364, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003646500087", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400364, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400364, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003647264430", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003658971665)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003628426279)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400364, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003647264430", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400364, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400365, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003655217406", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003658971665)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003628426279)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400365, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003655217406", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400365, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400365, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003657840744", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003658971665)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003628426279)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400365, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003657840744", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400365, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/90', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>257, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003680127270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003680453354", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003680453354", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400368, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003680579901", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400368, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003680579901", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400368, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>259, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003680738320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003681058335", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003681058335", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400368, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003681279772", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400368, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003681279772", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400368, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003692317583", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003692317583", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400369, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003696367818", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003696367818", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400369, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003698490580", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[6].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003698490580", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400369, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003698490580", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654003699192763)
expect(envelopes[7].status[:last_timetoken]).to eq(14654003674926674)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400369, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003698490580", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400369, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/92', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>261, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003712560930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003712880265", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003712880265", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>263, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003713157352", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003713480415", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003713480415", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003720445920", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003720445920", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400372, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003721074920", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003721074920", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400372, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003725807295", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003725807295", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400372, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003728531362", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003728531362", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400372, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003733417156", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[6].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003733417156", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400373, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003733417156", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[7].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003733417156", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400373, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003737482434", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[8].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003737482434", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400373, :state=>nil, :occupancy=>2}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003737482434", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654003737849861)
expect(envelopes[9].status[:last_timetoken]).to eq(14654003699192763)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400373, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003737482434", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400373, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/106', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>265, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003744963892", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003745279435", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003745279435", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003761823803", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003761823803", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400376, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003762052394", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003762052394", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400376, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003761823803", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003761823803", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400376, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003762052394", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003762052394", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400376, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003751163895", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003751163895", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400375, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003757606578", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[6].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003757606578", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400375, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003750442756", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654003762825760)
expect(envelopes[7].status[:last_timetoken]).to eq(14654003743597630)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003750442756", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400375, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/102', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>267, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003777400250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003777722518", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003795206047)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003762825760)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003777722518", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400378, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003784279168", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003795206047)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003762825760)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400378, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003784279168", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400378, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400378, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003788856996", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003795206047)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003762825760)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400378, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003788856996", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400378, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400379, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003792900068", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003795206047)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003762825760)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400379, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003792900068", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400379, :state=>nil, :occupancy=>0}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400379, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003794819224", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003795206047)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003762825760)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400379, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003794819224", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400379, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400379, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003794819224", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003795206047)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003762825760)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400379, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003794819224", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400379, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/104', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>269, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003809834170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003810206838", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003810206838", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003816772874", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003816772874", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400381, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003817409845", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[2].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003817409845", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400381, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003817453146", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[3].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003817453146", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400381, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003817453146", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[4].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400381, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003817453146", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400381, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003822748366", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[5].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654003822748366", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003825380682", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[6].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003825380682", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003825396734", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[7].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654003825396734", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003829250762", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[8].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003829250762", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003829250762", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[9].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003829250762", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>1}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003829964643", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[10].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003829964643", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>2}})


expect(envelopes[11].status[:code]).to eq(200)
expect(envelopes[11].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654003829964643", :region_code=>1}})
expect(envelopes[11].status[:category]).to eq(:ack)
expect(envelopes[11].status[:auto_retried]).to eq(true)
expect(envelopes[11].status[:current_timetoken]).to eq(14654003831573306)
expect(envelopes[11].status[:last_timetoken]).to eq(14654003795206047)
expect(envelopes[11].status[:subscribed_channels]).to eq([])
expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[11].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[11].result[:code]).to eq(200)
expect(envelopes[11].result[:operation]).to eq(:presence)
expect(envelopes[11].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654003829964643", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400382, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/172', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>271, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003842252570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003842597207", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003843281538)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003831573305)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003842597207", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>273, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003842876130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003843195906", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003843281538)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003831573305)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003843195906", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/168', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>275, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003874594650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003874912997", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003875578676)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003843281538)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003874912997", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>277, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003875196270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003875518070", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003875578676)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003843281538)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003875518070", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/170', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>279, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003906910650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003907231038", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003907917179)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003875578676)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003907231038", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>281, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003907512738", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003907833598", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003907917179)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003875578676)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003907833598", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/166', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>283, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003939202612", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003939560310", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003940227206)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003907917179)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003939560310", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>285, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003939828842", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003940146907", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003940227206)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003907917179)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003940146907", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/162', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>287, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003973074320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003973392323", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654003974081335)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003940227206)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654003973392323", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>289, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654003973672500", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654003973995393", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654003974081335)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003940227206)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654003973995393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/164', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>291, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004005938790", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004006258081", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004006940044)
expect(envelopes[0].status[:last_timetoken]).to eq(14654003974081335)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654004006258081", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>293, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004006536970", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004006856237", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004006940044)
expect(envelopes[1].status[:last_timetoken]).to eq(14654003974081335)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004006856237", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/178', record: :none) do
@pubnub.subscribe(channel: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>295, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004038372018", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004038696859", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004038780151)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004006350003)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654004038696859", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/174', record: :none) do
@pubnub.subscribe(channel: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>297, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004070724760", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004071043863", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004071096963)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004038780151)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654004071043863", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/176', record: :none) do
@pubnub.subscribe(channel: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>299, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004103034430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004103352626", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004103437720)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004071096963)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654004103352626", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/316', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>301, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004135332460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004135650594", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004149933612)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004006940045)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004135650594", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>301, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004135332460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004135650594", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004149933612)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004006940045)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004135650594", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>303, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004135923260", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004136245761", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004149933612)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004006940045)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004136245761", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>303, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004135923260", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004136245761", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004149933612)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004006940045)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004136245761", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400414, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004149157709", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004149933612)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004006940045)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400414, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004149157709", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400414, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/312', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>305, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004167786482", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004168121028", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004175691891)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004149933612)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004168121028", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>305, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004167786482", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004168121028", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004175691891)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004149933612)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004168121028", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>307, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004168394210", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004168712060", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004175691891)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004149933612)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004168712060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>307, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004168394210", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004168712060", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004175691891)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004149933612)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004168712060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400417, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004174938568", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004175691891)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004149933612)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400417, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004174938568", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400417, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/314', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>309, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004200188128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004200523500", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004212833328)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004175691891)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004200523500", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>309, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004200188128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004200523500", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004212833328)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004175691891)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004200523500", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>311, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004200805480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004201124975", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004212833328)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004175691891)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004201124975", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>311, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004200805480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004201124975", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004212833328)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004175691891)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004201124975", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400421, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004212446300", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004212833328)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004175691891)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400421, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004212446300", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400421, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/310', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>313, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004232439418", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004232763470", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004246934059)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004212833328)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004232763470", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>313, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004232439418", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004232763470", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004246934059)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004212833328)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004232763470", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>315, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004233039110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004233357240", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004246934059)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004212833328)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004233357240", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>315, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004233039110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004233357240", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004246934059)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004212833328)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004233357240", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400423, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004239180520", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004246934059)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004212833328)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400423, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004239180520", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400423, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400424, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004245619950", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004246934059)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004212833328)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400424, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004245619950", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400424, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/306', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>317, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004264871200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004265190988", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004277433612)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004246934059)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004265190988", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>317, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004264871200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004265190988", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004277433612)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004246934059)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004265190988", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>319, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004265471540", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004265793990", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004277433612)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004246934059)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004265793990", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>319, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004265471540", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004265793990", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004277433612)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004246934059)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004265793990", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400427, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004271544007", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004277433612)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004246934059)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400427, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004271544007", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400427, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400427, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004276984371", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004277433612)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004246934059)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400427, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004276984371", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400427, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/308', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>321, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004300901702", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004301223328", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004313417673)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004277433612)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004301223328", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>321, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004300901702", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004301223328", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004313417673)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004277433612)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004301223328", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>323, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004301508448", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004301828451", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004313417673)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004277433612)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004301828451", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>323, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004301508448", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004301828451", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004313417673)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004277433612)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004301828451", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400430, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004305261423", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004313417673)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004277433612)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400430, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004305261423", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400430, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400431, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004313031519", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004313417673)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004277433612)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400431, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004313031519", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400431, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/322', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>325, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004333235798", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004333552937", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004345166014)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004313417673)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004333552937", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400433, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004339406399", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004345166014)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004313417673)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400433, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004339406399", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400433, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400434, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004344815497", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004345166014)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004313417673)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400434, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004344815497", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400434, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/318', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>327, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004367336300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004367656574", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004380680711)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004345166014)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004367656574", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400437, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004373283873", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004380680711)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004345166014)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400437, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004373283873", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400437, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400437, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004379899651", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004380680711)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004345166014)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400437, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004379899651", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400437, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/320', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>329, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004399723110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004400044045", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004411623031)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004380680711)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004400044045", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400440, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004406563564", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004411623031)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004380680711)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400440, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004406563564", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400440, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400441, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004411236514", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004411623031)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004380680711)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400441, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004411236514", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400441, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/298', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>331, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004432545270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004432867056", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004445048323)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004400130194)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004432867056", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>331, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004432545270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004432867056", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004445048323)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004400130194)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004432867056", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>333, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004433141482", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004433460520", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004445048323)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004400130194)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004433460520", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>333, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004433141482", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004433460520", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004445048323)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004400130194)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004433460520", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400444, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004444657292", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004445048323)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004400130194)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400444, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004444657292", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400444, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/294', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>335, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004464905150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004465231807", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004465231807", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>335, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004464905150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004465231807", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004465231807", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>337, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004465512012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004465832127", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004465832127", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>337, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004465512012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004465832127", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004465832127", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400447, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004470573843", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400447, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004470573843", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400447, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400447, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004477826861", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400447, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004477826861", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400447, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400447, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004478125661", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654004478908908)
expect(envelopes[6].status[:last_timetoken]).to eq(14654004445048323)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400447, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004478125661", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400447, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/296', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>339, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004497326050", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004497645348", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004498335116)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004478908908)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004497645348", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>339, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004497326050", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004497645348", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004498335116)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004478908908)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004497645348", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>341, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004497929490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004498247972", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004498335116)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004478908908)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004498247972", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>341, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004497929490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004498247972", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004498335116)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004478908908)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004498247972", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/292', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>343, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004530197198", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004530516626", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004545644020)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004498335116)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004530516626", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>343, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004530197198", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004530516626", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004545644020)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004498335116)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004530516626", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>345, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004530798630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004531116961", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004545644020)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004498335116)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004531116961", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>345, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004530798630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004531116961", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004545644020)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004498335116)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004531116961", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400454, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004544868655", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004545644020)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004498335116)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400454, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004544868655", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400454, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/288', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>347, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004562632110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004562952868", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004572273130)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004545644020)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004562952868", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>347, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004562632110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004562952868", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004572273130)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004545644020)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004562952868", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>349, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004563230130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004563553371", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004572273130)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004545644020)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004563553371", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>349, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004563230130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004563553371", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004572273130)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004545644020)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004563553371", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400457, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004571232116", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004572273130)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004545644020)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400457, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004571232116", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400457, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/290', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>351, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004595039958", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004595363483", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004608963439)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004572273130)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004595363483", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>351, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004595039958", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004595363483", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004608963439)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004572273130)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004595363483", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>353, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004595650042", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004595973693", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004608963439)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004572273130)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004595973693", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>353, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004595650042", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004595973693", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004608963439)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004572273130)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004595973693", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400460, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004608187480", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004608963439)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004572273130)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400460, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004608187480", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400460, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/304', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>355, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004627459058", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004627776689", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004636506719)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004608963439)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004627776689", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400463, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004635602684", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004636506719)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004608963439)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400463, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004635602684", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400463, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/300', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>357, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004659917590", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004660247557", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004674360746)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004636506719)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004660247557", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400467, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004672493501", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004674360746)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004636506719)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400467, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004672493501", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400467, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/302', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>359, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004692253708", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004692570522", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004700348144)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004674360746)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004692570522", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400469, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004699960695", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004700348144)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004674360746)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400469, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654004699960695", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400469, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/334', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>361, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004728560838", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004728883566", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004741444903)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004692487542)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004728883566", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>361, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004728560838", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004728883566", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004741444903)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004692487542)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004728883566", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>363, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004729165010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004729481669", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004741444903)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004692487542)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004729481669", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>363, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004729165010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004729481669", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004741444903)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004692487542)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004729481669", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400473, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004734661881", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004741444903)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004692487542)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400473, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004734661881", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400473, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400474, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004740647228", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004741444903)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004692487542)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400474, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004740647228", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400474, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/330', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>365, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004760807280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004761129427", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004774055486)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004741444903)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004761129427", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>365, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004760807280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004761129427", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004774055486)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004741444903)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004761129427", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>367, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004761403940", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004761730340", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004774055486)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004741444903)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004761730340", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>367, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004761403940", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004761730340", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004774055486)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004741444903)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004761730340", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400476, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004764559469", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004774055486)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004741444903)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400476, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004764559469", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400476, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400477, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004773238293", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004774055486)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004741444903)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400477, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004773238293", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400477, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/332', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>369, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004794536728", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004794850572", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004807037147)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004774055486)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004794850572", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>369, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004794536728", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004794850572", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004807037147)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004774055486)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004794850572", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>371, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004795121190", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004795437495", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004807037147)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004774055486)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004795437495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>371, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004795121190", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004795437495", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004807037147)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004774055486)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004795437495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400480, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004800091153", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004807037147)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004774055486)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400480, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004800091153", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400480, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400480, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004806565870", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004807037147)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004774055486)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400480, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004806565870", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400480, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/328', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>373, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004826800520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004827124136", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004839344336)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004807037147)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004827124136", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>373, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004826800520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004827124136", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004839344336)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004807037147)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004827124136", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>375, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004827410350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004827729348", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004839344336)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004807037147)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004827729348", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>375, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004827410350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004827729348", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004839344336)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004807037147)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004827729348", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400483, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004833067299", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004839344336)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004807037147)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400483, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004833067299", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400483, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400483, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004838873084", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004839344336)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004807037147)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400483, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004838873084", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400483, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/324', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>377, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004859028800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004859351515", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004873140481)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004839344336)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004859351515", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>377, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004859028800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004859351515", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004873140481)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004839344336)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004859351515", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>379, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004859666040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004859985060", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004873140481)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004839344336)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004859985060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>379, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004859666040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004859985060", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004873140481)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004839344336)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004859985060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400486, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004866344430", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004873140481)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004839344336)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400486, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004866344430", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400486, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400487, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004872293698", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654004873140481)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004839344336)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400487, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004872293698", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400487, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/326', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>381, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004891215220", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004891542126", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004899842543)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004873140481)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004891542126", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>381, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004891215220", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004891542126", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004899842543)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004873140481)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004891542126", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>383, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004891829288", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004892149591", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004899842543)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004873140481)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004892149591", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>383, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004891829288", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004892149591", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654004899842543)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004873140481)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004892149591", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400489, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004898233630", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654004899842543)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004873140481)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400489, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004898233630", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400489, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/340', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>385, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004923338230", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004923662760", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004935288761)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004899842543)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004923662760", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400493, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004934841696", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004935288761)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004899842543)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400493, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004934841696", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400493, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/336', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>387, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004955463892", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004955784122", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004968837105)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004935288761)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004955784122", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400496, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004961065505", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004968837105)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004935288761)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400496, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004961065505", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400496, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400496, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004968074318", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654004968837105)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004935288761)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400496, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004968074318", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400496, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/338', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>389, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654004987582710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654004987904674", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654004994989509)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004968837105)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654004987904674", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400499, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654004993796099", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654004994989509)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004968837105)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400499, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654004993796099", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400499, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/280', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>391, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005019711570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005020027690", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[0].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005020027690", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>391, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005019711570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005020027690", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[1].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005020027690", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>393, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005020320150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005020640370", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[2].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005020640370", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>393, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005020320150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005020640370", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[3].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005020640370", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400502, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005025860917", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[4].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400502, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005025860917", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400502, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005031817239", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[5].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005031817239", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400503, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005034861537", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[6].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005034861537", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400503, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005039676017", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[7].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005039676017", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400503, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400504, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005047418492", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654005047869265)
expect(envelopes[8].status[:last_timetoken]).to eq(14654004987889901)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400504, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005047418492", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400504, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/276', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>395, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005056552760", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005056867622", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005056867622", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>395, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005056552760", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005056867622", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005056867622", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>397, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005057149032", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005057466815", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005057466815", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>397, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005057149032", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005057466815", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005057466815", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400506, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005063236676", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400506, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005063236676", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400506, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400506, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005065668636", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400506, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005065668636", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400506, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400506, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005069829038", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400506, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005069829038", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400506, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400507, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005072438483", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400507, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005072438483", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400507, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400507, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005077187297", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654005078101280)
expect(envelopes[8].status[:last_timetoken]).to eq(14654005047869265)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400507, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005077187297", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400507, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/278', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>399, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005088841150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005089160012", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005089160012", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>399, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005088841150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005089160012", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005089160012", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>401, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005089435070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005089748761", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005089748761", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>401, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005089435070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005089748761", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005089748761", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005096115147", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005096115147", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400509, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005096807067", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005096807067", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400509, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005096898045", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005096898045", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400509, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400510, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005102024597", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400510, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005102024597", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400510, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400510, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005106453412", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654005108773796)
expect(envelopes[8].status[:last_timetoken]).to eq(14654005078101280)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400510, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005106453412", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400510, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/274', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>403, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005121499510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005121819019", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005121819019", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>403, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005121499510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005121819019", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005121819019", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>405, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005122103792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005122437706", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005122437706", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>405, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005122103792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005122437706", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005122437706", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005130610303", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005130610303", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400513, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005130554400", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005130554400", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400513, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005133678386", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005133678386", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400513, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005136728192", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005136728192", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400513, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400514, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005141462003", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654005142298766)
expect(envelopes[8].status[:last_timetoken]).to eq(14654005108773796)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400514, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005141462003", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400514, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/270', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>407, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005153759560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005154085709", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005154085709", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>407, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005153759560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005154085709", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005154085709", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>409, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005154368178", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005154684978", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005154684978", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>409, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005154368178", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005154684978", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005154684978", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005161311657", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005161311657", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400516, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005161394734", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005161394734", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400516, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005162027804", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005162027804", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400516, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005167127349", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005167587889)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005142298766)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005167127349", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400516, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/272', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>411, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005185946600", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005186264393", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005186264393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>411, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005185946600", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005186264393", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005186264393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>413, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005186542160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005186862655", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005186862655", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>413, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005186542160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005186862655", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005186862655", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400519, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005192849079", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400519, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005192849079", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400519, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400519, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005197981630", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400519, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005197981630", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400519, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005202054534", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005202054534", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400520, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005204944991", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005204944991", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400520, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005205184699", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654005206418938)
expect(envelopes[8].status[:last_timetoken]).to eq(14654005167587889)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005205184699", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400520, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/286', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>415, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005219556170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005219879429", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005237597826)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005216862307)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005219879429", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400523, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005237137167", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005237597826)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005216862307)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400523, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005237137167", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400523, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400522, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005224324441", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005237597826)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005216862307)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400522, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005224324441", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400522, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400523, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005231206499", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005237597826)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005216862307)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400523, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005231206499", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400523, :state=>nil, :occupancy=>0}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400522, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005225099951", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005237597826)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005216862307)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400522, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005225099951", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400522, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400523, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005235286030", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005237597826)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005216862307)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400523, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005235286030", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400523, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/282', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>417, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005251770470", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005252087710", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005256561075)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005237597826)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005252087710", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400525, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005255283649", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005256561075)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005237597826)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400525, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005255283649", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400525, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400525, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005255288832", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005256561075)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005237597826)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400525, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005255288832", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400525, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400525, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005256032298", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005256561075)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005237597826)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400525, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005256032298", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400525, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/284', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>419, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005283903182", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005284222177", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005303515115)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005256561075)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005284222177", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400529, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005295783584", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005303515115)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005256561075)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400529, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654005295783584", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400529, :state=>nil, :occupancy=>0}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400529, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005299629678", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005303515115)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005256561075)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400529, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654005299629678", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400529, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400530, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005302663849", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005303515115)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005256561075)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400530, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005302663849", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400530, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/352', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>421, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005316111670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005316441316", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005317135228)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005314697082)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005316441316", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>423, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005316784200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005317129591", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005317135228)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005314697082)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005317129591", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>421, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005316111670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005316441316", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005317135228)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005314697082)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005316441316", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>423, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005316784200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005317129591", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005317135228)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005314697082)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005317129591", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/348', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>425, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005348412910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005348762974", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005349281592)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005317135228)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005348762974", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>425, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005348412910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005348762974", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005349281592)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005317135228)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005348762974", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>427, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005349036040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005349364007", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005349281592)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005317135228)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005349364007", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>427, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005349036040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005349364007", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005349281592)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005317135228)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005349364007", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/350', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>429, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005381038380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005381361633", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005381980767)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005349281592)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005381361633", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>429, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005381038380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005381361633", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005381980767)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005349281592)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005381361633", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>431, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005381641212", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005381959522", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005381980767)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005349281592)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005381959522", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>431, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005381641212", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005381959522", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005381980767)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005349281592)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005381959522", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/346', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>433, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005413220858", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005413540393", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005414068233)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005381980767)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005413540393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>433, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005413220858", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005413540393", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005414068233)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005381980767)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005413540393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>435, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005413835718", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005414152478", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005414068233)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005381980767)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005414152478", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>435, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005413835718", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005414152478", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005414068233)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005381980767)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005414152478", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/342', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>437, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005445421750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005445742396", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005446337540)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005414068233)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005445742396", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>437, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005445421750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005445742396", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005446337540)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005414068233)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005445742396", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>439, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005446027572", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005446347537", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005446337540)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005414068233)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005446347537", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>439, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005446027572", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005446347537", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005446337540)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005414068233)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005446347537", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/344', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>441, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005477508162", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005477831123", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005478451213)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005446337540)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005477831123", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>441, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005477508162", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005477831123", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005478451213)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005446337540)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005477831123", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>443, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005478128080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005478447534", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005478451213)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005446337540)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005478447534", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>443, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005478128080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005478447534", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005478451213)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005446337540)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005478447534", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/358', record: :none) do
@pubnub.subscribe(channel: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>445, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005509553988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005509875005", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005509878935)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005478451212)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005509875005", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/354', record: :none) do
@pubnub.subscribe(channel: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>447, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005541605970", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005541926493", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005541930937)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005509878935)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005541926493", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/356', record: :none) do
@pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>449, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005573673260", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005573994176", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005574062156)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005541930937)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005573994176", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/46', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005620999150", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005622285999)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005604453186)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005620999150", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400562, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>455, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005607004192", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005607326912", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005622285999)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005604453186)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005607326912", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>451, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005605781930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005606098270", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005622285999)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005604453186)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005606098270", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>453, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005606392270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005606713574", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005622285999)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005604453186)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005606713574", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>457, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005607616488", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005607940478", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005622285999)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005604453186)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005607940478", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/42', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>459, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005637967510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005638284204", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005650284647)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005622285999)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005638284204", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>461, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005638560850", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005638887172", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005650284647)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005622285999)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005638887172", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>463, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005639170360", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005639719438", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005650284647)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005622285999)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005639719438", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>465, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005640006120", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005640324801", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005650284647)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005622285999)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005640324801", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400564, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005648021420", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005650284647)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005622285999)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400564, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005648021420", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400564, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/44', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>467, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005670187230", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005670504808", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005683872237)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005650284647)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005670504808", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>469, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005670772710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005671088842", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005683872237)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005650284647)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005671088842", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>471, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005671361868", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005671677626", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005683872237)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005650284647)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005671677626", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>473, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005671949188", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005672301996", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005683872237)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005650284647)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005672301996", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400568, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005683427409", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005683872237)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005650284647)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400568, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005683427409", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400568, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/40', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>475, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005702246752", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005702560416", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005713700698)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005683872237)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005702560416", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>477, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005702834440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005703151556", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005713700698)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005683872237)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005703151556", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>479, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005703415440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005703736268", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005713700698)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005683872237)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005703736268", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>481, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005704001898", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005704318223", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005713700698)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005683872237)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005704318223", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400571, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005712863277", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005713700698)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005683872237)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400571, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005712863277", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400571, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/36', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>483, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005734372978", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005734702553", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005749815649)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005713700698)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005734702553", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>485, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005734986160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005735309837", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005749815649)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005713700698)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005735309837", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>487, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005735619820", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005735935875", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005749815649)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005713700698)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005735935875", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>489, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005736230280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005736550511", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005749815649)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005713700698)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005736550511", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400574, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005748900883", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005749815649)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005713700698)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400574, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005748900883", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400574, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/38', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400577, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005777883700", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005786187447)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005769579921)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400577, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005777883700", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400577, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400578, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005785401633", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005786187447)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005769579921)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400578, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005785401633", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400578, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>495, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005772136200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005772457871", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005786187447)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005769579921)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005772457871", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>491, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005770927140", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005771247517", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005786187447)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005769579921)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005771247517", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>493, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005771529542", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005771846783", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005786187447)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005769579921)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005771846783", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>497, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005772756770", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005773076834", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005786187447)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005769579921)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005773076834", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/52', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400581, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005811236072", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005811624627)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005801886765)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400581, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005811236072", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400581, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>503, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005804445482", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005804762109", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005811624627)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005801886765)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005804762109", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>499, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005803238048", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005803563080", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005811624627)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005801886765)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005803563080", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>501, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005803844932", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005804159495", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005811624627)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005801886765)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005804159495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/48', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>505, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005835642400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005835960399", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005851529025)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005811624627)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005835960399", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>507, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005836240460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005836560263", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005851529025)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005811624627)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005836560263", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>509, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005836840330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005837154104", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005851529025)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005811624627)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005837154104", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400584, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005849354349", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005851529025)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005811624627)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400584, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005849354349", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400584, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/50', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>511, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005867949498", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005868273263", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005881042783)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005851529025)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005868273263", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>513, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005868578410", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005868906908", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005881042783)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005851529025)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005868906908", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>515, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005869198160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005869516124", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005881042783)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005851529025)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005869516124", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400587, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005878313863", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005881042783)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005851529025)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400587, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005878313863", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400587, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400588, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005880680240", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005881042783)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005851529025)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400588, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654005880680240", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400588, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/28', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>521, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005901514060", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005901833737", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005901833737", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400590, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005909270264", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400590, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005909270264", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400590, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400591, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005913557586", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400591, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005913557586", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400591, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400590, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005909270264", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400590, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005909270264", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400590, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400591, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005913557586", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400591, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005913557586", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400591, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>517, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005900252412", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005900576945", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005900576945", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>519, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005900869818", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005901233236", :region_code=>12}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:subscribe)
expect(envelopes[6].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005901233236", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>523, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005902112350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005902430079", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005913949377)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005898889040)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005902430079", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/24', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>525, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005932682728", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005933001820", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005933001820", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>527, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005933284978", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005933602113", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005933602113", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>529, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005933883728", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005934203073", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005934203073", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>531, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005934493692", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005934815145", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005934815145", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005941658235", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005941658235", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400594, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005941658235", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005941658235", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400594, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005947071361", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005947071361", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400594, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005947071361", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005947848098)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005913949377)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400594, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005947071361", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400594, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/26', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>533, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005970597342", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005970915164", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654005970915164", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>535, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005971199300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005971518438", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654005971518438", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>537, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005971797640", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005972118609", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654005972118609", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>539, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654005972394300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654005972712027", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654005972712027", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400597, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005979130424", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400597, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005979130424", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400597, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400597, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005979130424", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400597, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005979130424", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400597, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400598, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005983912896", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400598, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005983912896", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400598, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400598, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654005983912896", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654005984302797)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005947848098)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400598, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654005983912896", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400598, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/22', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>541, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006002936310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006003254006", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[0].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006003254006", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>543, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006003540240", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006003859490", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[1].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006003859490", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>545, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006004153840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006004474274", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[2].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006004474274", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>547, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006004769280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006005088126", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[3].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006005088126", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006010479462", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[4].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006010479462", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400601, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006010479462", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[5].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006010479462", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400601, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006016288063", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[6].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006016288063", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400601, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006016288063", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006016998718)
expect(envelopes[7].status[:last_timetoken]).to eq(14654005984302797)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400601, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006016288063", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400601, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/18', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>549, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006035356550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006035673910", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006035673910", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>551, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006035947578", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006036268307", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006036268307", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>553, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006036550300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006036868173", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006036868173", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>555, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006037147350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006037461878", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006037461878", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006042737809", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006042737809", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400604, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006042737809", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006042737809", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400604, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006048624801", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006048624801", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400604, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006048624801", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006049014086)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006016998718)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400604, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006048624801", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400604, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/20', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>557, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006067771762", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006068089773", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006068089773", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>559, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006068369940", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006068687959", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006068687959", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>561, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006068968652", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006069290498", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006069290498", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>563, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006069565320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006069883892", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006069883892", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400607, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006077031822", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400607, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006077031822", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400607, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400607, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006077031822", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400607, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006077031822", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400607, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400608, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006082204799", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400608, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006082204799", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400608, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400608, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006082204799", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006082981024)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006049014086)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400608, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006082204799", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400608, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/34', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400610, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006101032072", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006101736410)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006098767232)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400610, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006101032072", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400610, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>569, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006101332160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006101650671", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006101736410)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006098767232)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006101650671", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400610, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006101032072", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006101736410)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006098767232)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400610, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006101032072", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400610, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>565, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006100134700", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006100450418", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006101736410)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006098767232)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006100450418", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>567, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006100734820", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006101049220", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006101736410)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006098767232)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006101049220", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/30', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>571, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006132466380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006132785323", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006134061088)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006101736410)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006132785323", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>573, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006133065980", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006133381118", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006134061088)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006101736410)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006133381118", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>575, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006133659070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006133977339", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006134061088)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006101736410)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006133977339", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/32', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400617, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006174965944", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006177800551)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006134061088)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400617, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006174965944", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400617, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400617, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006174965944", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006177800551)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006134061088)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400617, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006174965944", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400617, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>577, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006176198910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006176514556", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006177800551)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006134061088)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006176514556", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>579, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006176798740", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006177115196", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006177800551)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006134061088)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006177115196", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>581, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006177398200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006177717752", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006177800551)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006134061088)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006177717752", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/64', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>583, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006197126038", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006197444464", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006212788389)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006177800551)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006197444464", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>585, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006197724468", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006198047414", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006212788389)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006177800551)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006198047414", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>587, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006198331230", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006198652559", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006212788389)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006177800551)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006198652559", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>589, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006198934760", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006199253257", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006212788389)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006177800551)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006199253257", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400621, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006210420118", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006212788389)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006177800551)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400621, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006210420118", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400621, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400621, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006211933538", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006212788389)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006177800551)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400621, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006211933538", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400621, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/60', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>591, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006229543670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006229862226", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006243229149)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006212788389)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006229862226", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>593, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006230144070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006230462746", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006243229149)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006212788389)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006230462746", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>595, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006230748680", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006231065551", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006243229149)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006212788389)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006231065551", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>597, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006231349950", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006231671170", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006243229149)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006212788389)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006231671170", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400624, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006240478181", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006243229149)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006212788389)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400624, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006240478181", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400624, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400624, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006242842713", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006243229149)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006212788389)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400624, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006242842713", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400624, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/62', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>599, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006269478440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006269792856", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006285465598)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006243229149)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006269792856", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>601, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006270063880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006270384078", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006285465598)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006243229149)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006270384078", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>603, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006270650770", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006270970855", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006285465598)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006243229149)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006270970855", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>605, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006271256710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006271574011", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006285465598)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006243229149)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006271574011", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400628, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006284429727", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006285465598)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006243229149)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400628, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006284429727", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400628, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/58', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>607, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006301671628", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006301987777", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006318244882)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006285599197)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006301987777", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>609, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006302266000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006302581339", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006318244882)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006285599197)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006302581339", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>611, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006302847118", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006303166301", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006318244882)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006285599197)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006303166301", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>613, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006303447812", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006303768788", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006318244882)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006285599197)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006303768788", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400631, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006316102292", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006318244882)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006285599197)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400631, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006316102292", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400631, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/54', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>615, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006333812458", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006334132015", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006343170739)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006318244882)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006334132015", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>617, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006334416990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006334741925", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006343170739)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006318244882)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006334741925", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>619, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006335025990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006335345591", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006343170739)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006318244882)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006335345591", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>621, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006335627850", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006335949754", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006343170739)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006318244882)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006335949754", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400634, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006341916346", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006343170739)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006318244882)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400634, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006341916346", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400634, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/56', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>623, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006365953222", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006366271268", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006379667579)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006343170739)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006366271268", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>625, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006366555180", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006366869313", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006379667579)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006343170739)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006366869313", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>627, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006367137780", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006367451558", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006379667579)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006343170739)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006367451558", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>629, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006367734110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006368056958", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006379667579)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006343170739)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006368056958", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400637, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006379232550", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006379667579)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006343170739)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400637, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006379232550", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400637, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/70', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400640, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006406018371", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006406469041)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006396727186)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400640, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006406018371", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400640, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>635, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006399293670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006399609982", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006406469041)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006396727186)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006399609982", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>631, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006398043608", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006398405963", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006406469041)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006396727186)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006398405963", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>633, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006398697960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006399013826", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006406469041)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006396727186)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006399013826", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/66', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>637, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006430225332", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006430543042", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006443411516)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006406469041)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006430543042", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>639, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006430831730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006431152918", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006443411516)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006406469041)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006431152918", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>641, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006431426042", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006431744313", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006443411516)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006406469041)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006431744313", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400644, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006442930727", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006443411516)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006406469041)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400644, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006442930727", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400644, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/68', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>643, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006462308428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006462624303", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006470001650)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006443411516)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006462624303", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>645, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006462908580", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006463234211", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006470001650)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006443411516)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006463234211", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>647, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006463518290", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006463835318", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006470001650)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006443411516)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006463835318", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400646, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006469470546", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006470001650)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006443411516)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400646, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654006469470546", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400646, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/10', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>653, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006495626270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006495951041", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006495951041", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400651, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006512415063", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400651, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006512415063", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400651, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400651, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006512415063", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400651, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006512415063", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400651, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>649, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006494415050", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006494733896", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006494733896", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400650, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006509555272", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400650, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006509555272", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400650, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>651, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006495021708", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006495341130", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006495341130", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400651, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006510391382", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400651, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006510391382", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400651, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>655, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006496231270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006496556391", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006513331661)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006493092452)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006496556391", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/6', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>657, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006528011160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006528325136", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006528325136", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>659, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006528606960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006528923256", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006528923256", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>661, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006529197912", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006529519279", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006529519279", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>663, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006529787620", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006530112019", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006530112019", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400653, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006534741732", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400653, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006534741732", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400653, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400653, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006534741732", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400653, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006534741732", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400653, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006541282050", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006541282050", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400654, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006547236451", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006547236451", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400654, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006549247203", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[8].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006549247203", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400654, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006549247203", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[9].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006549247203", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400654, :state=>nil, :occupancy=>1}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006548693936", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654006550654004)
expect(envelopes[10].status[:last_timetoken]).to eq(14654006513331661)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400654, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006548693936", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400654, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/8', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>665, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006564856380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006565174025", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006565174025", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>667, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006565459772", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006565778910", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006565778910", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>669, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006566062880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006566383994", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006566383994", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>671, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006566674318", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006566994010", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006566994010", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400657, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006571328142", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400657, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006571328142", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400657, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400657, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006571328142", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400657, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006571328142", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400657, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400657, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006572810427", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400657, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006572810427", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400657, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400658, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006580158261", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400658, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006580158261", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400658, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400658, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006588606745", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654006589051820)
expect(envelopes[8].status[:last_timetoken]).to eq(14654006550654004)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400658, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006588606745", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400658, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/4', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400659, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006598593075", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400659, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006598593075", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400659, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400660, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006615600998", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400660, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006615600998", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400660, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400660, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006615600998", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400660, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006615600998", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400660, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>673, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006623600650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006623919500", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006623919500", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>675, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006624203320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006624531866", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006624531866", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>677, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006624808162", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006625137018", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006625137018", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>679, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006625409830", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006625728351", :region_code=>12}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:subscribe)
expect(envelopes[6].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006625728351", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400662, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006624616118", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006627050109)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006589051820)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400662, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006624616118", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400662, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/0', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400664, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006640388368", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400664, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006640388368", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400664, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400664, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006640388368", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400664, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006640388368", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400664, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400663, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006637973310", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400663, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006637973310", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400663, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>681, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006646390090", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006646707818", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006646707818", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>683, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006646987050", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006647303133", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006647303133", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>685, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006647572238", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006647887400", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006647887400", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400664, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006644703161", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400664, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006644703161", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400664, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>687, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006648169070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006648485630", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006648484292)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006627050109)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006648485630", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/2', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400666, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006668941642", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400666, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006668941642", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400666, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006673592383", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006673592383", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400667, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006676092346", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006676092346", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400667, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006676092346", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006676092346", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400667, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006679604590", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006679604590", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400667, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006679604590", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400667, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006679604590", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400667, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>689, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006684135800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006684451330", :region_code=>12}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:subscribe)
expect(envelopes[6].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006684451330", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>691, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006684722720", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006685037846", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006685037846", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>693, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006685317010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006685638501", :region_code=>12}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[8].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:subscribe)
expect(envelopes[8].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006685638501", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>695, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006685916118", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006686234640", :region_code=>12}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654006686233663)
expect(envelopes[9].status[:last_timetoken]).to eq(14654006648484292)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:subscribe)
expect(envelopes[9].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006686234640", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/16', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006708052570", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006708052570", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400670, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>701, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006710442932", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006710760852", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006710760852", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006708052570", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006708052570", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400670, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>697, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006709247190", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006709564237", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006709564237", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400669, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006698514460", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400669, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006698514460", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400669, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400671, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006718521227", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400671, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006718521227", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400671, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006722331900", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006722331900", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400672, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>699, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006709839920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006710162607", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006710162607", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006705755452", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[8].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006705755452", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400670, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006706448116", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654006723148918)
expect(envelopes[9].status[:last_timetoken]).to eq(14654006692380638)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400670, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006706448116", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400670, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/12', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006726965428", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006726965428", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400672, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006726965428", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006726965428", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400672, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006727939311", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006727939311", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400672, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006729048443", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400672, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006729048443", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400672, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400673, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006732728761", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400673, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006732728761", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400673, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400673, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006732728761", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400673, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006732728761", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400673, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>703, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006736214718", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006736535168", :region_code=>12}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:subscribe)
expect(envelopes[6].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006736535168", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>705, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006736825700", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006737142904", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[7].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006737142904", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>707, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006737424012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006737743168", :region_code=>12}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654006737742058)
expect(envelopes[8].status[:last_timetoken]).to eq(14654006723148918)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:subscribe)
expect(envelopes[8].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006737743168", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/14', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>709, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006758192730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006758510856", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006758510856", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>711, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006758793158", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006759108931", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006759108931", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>713, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006759403980", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006759721186", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006759721186", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400677, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006771009034", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400677, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654006771009034", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400677, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400677, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006775786280", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400677, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654006775786280", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400677, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400678, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006783280481", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[5].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400678, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006783280481", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400678, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465400678, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006783280481", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654006784626149)
expect(envelopes[6].status[:last_timetoken]).to eq(14654006757075815)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400678, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006783280481", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400678, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/82', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>719, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006791536770", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006791855896", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006803975247)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006789003083)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006791855896", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465400680, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654006803125541", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006803975247)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006789003083)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400680, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654006803125541", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400680, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>715, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006790330740", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006790649570", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006803975247)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006789003083)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006790649570", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>717, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006790926840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006791250521", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006803975247)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006789003083)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006791250521", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>721, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006792144498", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006792463426", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654006803975247)
expect(envelopes[4].status[:last_timetoken]).to eq(14654006789003083)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006792463426", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/78', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>723, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006823037738", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006823355372", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006825168983)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006803975247)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006823355372", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>725, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006823638520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006823962964", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006825168983)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006803975247)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006823962964", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>727, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006824246650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006824561311", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006825168983)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006803975247)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006824561311", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>729, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006824844800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006825162370", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006825168983)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006803975247)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006825162370", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/80', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>731, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006855188942", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006855508509", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006857303749)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006825168983)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006855508509", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>733, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006855788720", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006856104590", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006857303749)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006825168983)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006856104590", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>735, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006856385390", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006856700710", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006857303749)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006825168983)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006856700710", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>737, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006856993570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006857314877", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006857303749)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006825168983)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006857314877", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/76', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>739, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006888677570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006888996032", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006890855120)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006857303749)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006888996032", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>741, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006889278910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006889623562", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006890855120)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006857303749)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006889623562", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>743, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006889943150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006890259075", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006890855120)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006857303749)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006890259075", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>745, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006890547998", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006890866495", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006890855120)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006857303749)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006890866495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/72', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>747, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006920835090", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006921153429", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006922928838)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006890855120)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006921153429", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>749, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006921435930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006921751458", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006922928838)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006890855120)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006921751458", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>751, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006922036090", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006922355324", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006922928838)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006890855120)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006922355324", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>753, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006922640980", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006922959570", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006922928838)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006890855120)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006922959570", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/74', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>755, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006952983300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006953302134", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006955112230)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006922928838)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006953302134", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>757, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006953585332", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006953898016", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006955112230)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006922928838)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006953898016", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>759, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006954195358", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006954528641", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006955112230)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006922928838)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006954528641", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>761, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006954792400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006955108485", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654006955112230)
expect(envelopes[3].status[:last_timetoken]).to eq(14654006922928838)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654006955108485", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/88', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>763, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006985177072", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006985497268", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654006986732871)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006954532395)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654006985497268", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>765, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006985780680", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006986109086", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654006986732871)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006954532395)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654006986109086", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>767, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654006986392440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654006986712126", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654006986732871)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006954532395)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654006986712126", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/84', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>769, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007017384498", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007017701485", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007018902109)
expect(envelopes[0].status[:last_timetoken]).to eq(14654006986732871)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654007017701485", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>771, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007017983072", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007018304400", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007018902109)
expect(envelopes[1].status[:last_timetoken]).to eq(14654006986732871)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654007018304400", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>773, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007018598452", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007018916437", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654007018902109)
expect(envelopes[2].status[:last_timetoken]).to eq(14654006986732871)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654007018916437", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/86', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>775, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007049570802", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007049886985", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007051107296)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007018902109)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654007049886985", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>777, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007050175840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007050496846", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007051107296)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007018902109)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654007050496846", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>779, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007050782090", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007051102210", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654007051107296)
expect(envelopes[2].status[:last_timetoken]).to eq(14654007018902109)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654007051102210", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/406', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400709, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007095795831", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007098196231)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007080403944)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400709, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007095795831", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400709, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>781, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007081741000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007082065854", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007098196231)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007080403944)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007082065854", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/402', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400714, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007141949911", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007143397981)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007116555273)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400714, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007141949911", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400714, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>783, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007117923388", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007118247158", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007143397981)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007116555273)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007118247158", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/404', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400715, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007159392403", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007161206413)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007143397981)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400715, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007159392403", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400715, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>785, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007160830330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007161143681", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007161206413)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007143397981)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007161143681", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/400', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>787, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007182540660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007182853034", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007194484157)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007161206413)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007182853034", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400718, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007189792273", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007194484157)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007161206413)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400718, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007189792273", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400718, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400719, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007194098475", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654007194484157)
expect(envelopes[2].status[:last_timetoken]).to eq(14654007161206413)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400719, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007194098475", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400719, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/396', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>789, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007214943170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007215314373", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007221031965)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007194484157)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007215314373", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400722, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007220645518", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007221031965)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007194484157)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400722, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007220645518", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400722, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/398', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>791, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007247710478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007248054627", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007248138299)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007221031965)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007248054627", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/412', record: :none) do
@pubnub.subscribe(presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400727, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007278989858", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007282438817)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007221031965)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400727, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007278989858", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400727, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/408', record: :none) do
@pubnub.subscribe(presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400732, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007320217832", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007343247949)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007282438817)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400732, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007320217832", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400732, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400733, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007342857843", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007343247949)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007282438817)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400733, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007342857843", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400733, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/410', record: :none) do
@pubnub.subscribe(presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400735, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007354728670", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007355115402)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007343247949)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400735, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007354728670", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400735, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/388', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400739, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007390803680", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007391784386)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007377854830)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400739, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007390803680", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400739, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>793, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007379320510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007379644947", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007391784386)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007377854830)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007379644947", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/384', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>795, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007411682382", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007411999889", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007420567075)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007391784386)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007411999889", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400741, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007417215667", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007420567075)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007391784386)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400741, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007417215667", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400741, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/386', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>797, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007443935890", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007444253602", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007455752640)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007420567075)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007444253602", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400745, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007455393397", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007455752640)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007420567075)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400745, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007455393397", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400745, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/382', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>799, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007476501420", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007476823690", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007497551059)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007474954595)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007476823690", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400749, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007497159889", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007497551059)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007474954595)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400749, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007497159889", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400749, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/378', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>801, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007508816400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007509141777", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007520823332)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007497551059)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007509141777", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400751, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007517136268", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007520823332)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007497551059)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400751, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007517136268", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400751, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/380', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>803, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007541076620", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007541392891", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007556065552)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007520823332)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007541392891", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400755, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007553631008", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007556065552)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007520823332)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400755, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007553631008", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400755, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/394', record: :none) do
@pubnub.subscribe(presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400758, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007580213484", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007584657936)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007556065552)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400758, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007580213484", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400758, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400758, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007584292689", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007584657936)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007556065552)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400758, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007584292689", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400758, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/390', record: :none) do
@pubnub.subscribe(presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400774, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007747198319", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007747905270)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007584657936)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400774, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007747198319", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400774, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/392', record: :none) do
@pubnub.subscribe(presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400776, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007761695111", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007779030020)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007747905270)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400776, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007761695111", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400776, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400777, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007778640389", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007779030020)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007747905270)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400777, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654007778640389", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400777, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/424', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>805, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007782441910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007783455668", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007797195525)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007541311632)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007783455668", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400779, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007796364851", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007797195525)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007541311632)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400779, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007796364851", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400779, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/420', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>807, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007814567440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007814915779", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007826565113)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007797195525)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007814915779", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400781, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007818623412", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007826565113)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007797195525)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400781, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007818623412", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400781, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400782, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007826104369", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654007826565113)
expect(envelopes[2].status[:last_timetoken]).to eq(14654007797195525)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400782, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007826104369", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400782, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/422', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>809, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007846708522", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007847050403", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007861465786)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007826565113)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007847050403", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400785, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007853381823", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007861465786)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007826565113)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400785, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007853381823", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400785, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400785, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007859321805", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654007861465786)
expect(envelopes[2].status[:last_timetoken]).to eq(14654007826565113)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400785, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007859321805", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400785, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/418', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>811, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007878760440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007879101674", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007886950862)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007861465786)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007879101674", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400788, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007885093566", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007886950862)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007861465786)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400788, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007885093566", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400788, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/414', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>813, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007912453560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007912780863", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007928090242)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007886950862)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007912780863", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400792, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007925594363", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007928090242)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007886950862)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400792, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007925594363", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400792, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/416', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>815, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654007949272070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654007949687333", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007961228163)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007926634310)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654007949687333", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400795, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007959618468", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007961228163)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007926634310)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400795, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007959618468", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400795, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400796, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007960838244", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654007961228163)
expect(envelopes[2].status[:last_timetoken]).to eq(14654007926634310)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400796, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007960838244", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400796, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/430', record: :none) do
@pubnub.subscribe(presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400799, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007992836218", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654007997139709)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007961228163)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400799, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007992836218", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400799, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400799, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654007994960871", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654007997139709)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007961228163)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400799, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654007994960871", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400799, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/426', record: :none) do
@pubnub.subscribe(presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400802, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008023832497", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008027026504)
expect(envelopes[0].status[:last_timetoken]).to eq(14654007997139709)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400802, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008023832497", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400802, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400802, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008026639148", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008027026504)
expect(envelopes[1].status[:last_timetoken]).to eq(14654007997139709)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400802, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008026639148", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400802, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/428', record: :none) do
@pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465400805, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008059360825", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008061474050)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008027026504)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400805, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008059360825", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400805, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465400806, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008060075630", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008061474050)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008027026504)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400806, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008060075630", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400806, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/370', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400809, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008093091230", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008108880534)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008079100443)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400809, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008093091230", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400809, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400810, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008108172777", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008108880534)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008079100443)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400810, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008108172777", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400810, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>817, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008080471520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008080797723", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008108880534)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008079100443)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008080797723", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/366', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>819, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008112870478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008113199813", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008138483952)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008111784566)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008113199813", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400811, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008116788942", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008138483952)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008111784566)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400811, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008116788942", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400811, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400813, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008136303667", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008138483952)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008111784566)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400813, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008136303667", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400813, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400813, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008136302308", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008138483952)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008111784566)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400813, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008136302308", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400813, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/368', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>821, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008145227950", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008145549873", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008167097558)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008138483952)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008145549873", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400815, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008157857080", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008167097558)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008138483952)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400815, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008157857080", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400815, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400816, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008161426290", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008167097558)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008138483952)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400816, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008161426290", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400816, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400816, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008162380930", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008167097558)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008138483952)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400816, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008162380930", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400816, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400816, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008166710867", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008167097558)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008138483952)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400816, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008166710867", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400816, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/364', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>823, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008177576802", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008177900357", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008195507481)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008176391211)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008177900357", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400818, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008184631728", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008195507481)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008176391211)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400818, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008184631728", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400818, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400818, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008189136482", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008195507481)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008176391211)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400818, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008189136482", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400818, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400819, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008193221923", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008195507481)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008176391211)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400819, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008193221923", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400819, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/360', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>825, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008209943878", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008210266725", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008228098313)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008195507481)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008210266725", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400821, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008214445745", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008228098313)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008195507481)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400821, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008214445745", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400821, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400821, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008215204223", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008228098313)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008195507481)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400821, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008215204223", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400821, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400822, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008224145622", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008228098313)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008195507481)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400822, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008224145622", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400822, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400822, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008227710069", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008228098313)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008195507481)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400822, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008227710069", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400822, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/362', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>827, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008242331578", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008242656718", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008242656718", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400824, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008248498525", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400824, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008248498525", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400824, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400824, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008249202169", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400824, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008249202169", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400824, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400825, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008254990775", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400825, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008254990775", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400825, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400825, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008257656256", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400825, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008257656256", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400825, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400826, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008263015622", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[5].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400826, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008263015622", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400826, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400827, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008270973506", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654008271364024)
expect(envelopes[6].status[:last_timetoken]).to eq(14654008228098313)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400827, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008270973506", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400827, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/376', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400827, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008279770747", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008290139220)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008273829519)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400827, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008279770747", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400827, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400828, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008289751218", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008290139220)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008273829519)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400828, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008289751218", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400828, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400828, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008280445990", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008290139220)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008273829519)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400828, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008280445990", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400828, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400828, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008287803113", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008290139220)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008273829519)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400828, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008287803113", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400828, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/372', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400831, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008316538289", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008324857524)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008306113124)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400831, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008316538289", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400831, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400832, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008324406398", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008324857524)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008306113124)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400832, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008324406398", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400832, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400831, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008318357247", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008324857524)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008306113124)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400831, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008318357247", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400831, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400831, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008315844702", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008324857524)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008306113124)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400831, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008315844702", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400831, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400832, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008322896728", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008324857524)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008306113124)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400832, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008322896728", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400832, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400832, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008322407596", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654008324857524)
expect(envelopes[5].status[:last_timetoken]).to eq(14654008306113124)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400832, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008322407596", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400832, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/374', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400834, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008347963444", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008357807567)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008324857524)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400834, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008347963444", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400834, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400834, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008348210365", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008357807567)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008324857524)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400834, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008348210365", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400834, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400835, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008350529469", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008357807567)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008324857524)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400835, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654008350529469", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400835, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400835, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008353635584", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008357807567)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008324857524)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400835, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654008353635584", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400835, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400835, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008357275896", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008357807567)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008324857524)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400835, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008357275896", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400835, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/442', record: :none) do
@pubnub.subscribe(channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>829, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008371814458", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008372139740", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008372144142)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008242656511)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008372139740", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/438', record: :none) do
@pubnub.subscribe(channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>831, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008403933430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008404257884", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008404247503)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008372144142)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008404257884", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/440', record: :none) do
@pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>833, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008436039900", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008436365002", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008436334477)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008404247503)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008436365002", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback__nil_' do
VCR.use_cassette('examples/subscribe/436', record: :none) do
@pubnub.subscribe(channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>835, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008468138052", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008468462832", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008468433375)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008436334477)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008468462832", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___block_' do
VCR.use_cassette('examples/subscribe/432', record: :none) do
@pubnub.subscribe(channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>837, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008500247008", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008500569561", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008500641580)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008468433375)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008500569561", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/subscribe/434', record: :none) do
@pubnub.subscribe(channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"test_message", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>839, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008532360762", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008532690792", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008532695244)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008500641580)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"test_message", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008532690792", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/227', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>1, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008564514858", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008565443486", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008579741840)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008532695245)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008565443486", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>1, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008564514858", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008565443486", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008579741840)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008532695245)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008565443486", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>3, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008565725792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008566063920", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008579741840)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008532695245)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008566063920", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>3, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008565725792", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008566063920", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008579741840)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008532695245)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008566063920", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400857, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008578895011", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008579741840)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008532695245)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400857, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008578895011", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400857, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/223', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>5, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008596691142", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008597041877", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008603254007)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008579741840)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008597041877", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>5, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008596691142", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008597041877", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008603254007)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008579741840)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008597041877", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>7, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008597336500", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008597674348", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008603254007)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008579741840)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008597674348", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>7, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008597336500", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008597674348", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008603254007)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008579741840)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008597674348", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400860, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008601315748", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008603254007)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008579741840)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400860, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008601315748", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400860, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/225', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>9, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008628860328", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008629180859", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008641413794)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008603254007)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008629180859", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>9, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008628860328", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008629180859", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008641413794)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008603254007)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008629180859", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>11, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008629471150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008629794888", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008641413794)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008603254007)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008629794888", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>11, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008629471150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008629794888", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008641413794)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008603254007)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008629794888", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400864, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008640943222", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008641413794)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008603254007)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400864, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008640943222", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400864, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/221', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>13, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008666640188", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008666964596", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008681854470)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008641413794)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008666964596", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>13, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008666640188", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008666964596", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008681854470)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008641413794)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008666964596", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>15, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008667257130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008667579495", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008681854470)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008641413794)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008667579495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>15, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008667257130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008667579495", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008681854470)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008641413794)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008667579495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400867, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008674565193", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008681854470)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008641413794)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400867, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008674565193", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400867, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400867, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008679854565", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654008681854470)
expect(envelopes[5].status[:last_timetoken]).to eq(14654008641413794)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400867, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008679854565", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400867, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/217', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>17, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008698855490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008699184701", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008707531707)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008681854470)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008699184701", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>17, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008698855490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008699184701", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008707531707)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008681854470)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008699184701", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>19, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008699484880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008699810675", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008707531707)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008681854470)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008699810675", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>19, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008699484880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008699810675", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008707531707)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008681854470)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008699810675", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400870, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008706700996", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008707531707)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008681854470)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400870, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008706700996", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400870, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/219', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>21, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008731013310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008731333445", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008743562065)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008707531707)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008731333445", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>21, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008731013310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008731333445", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008743562065)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008707531707)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008731333445", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>23, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008731613610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008731934546", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008743562065)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008707531707)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008731934546", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>23, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008731613610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008731934546", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008743562065)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008707531707)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008731934546", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400874, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008743127346", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008743562065)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008707531707)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400874, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008743127346", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400874, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/233', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>25, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008763136840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008763461066", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008768515208)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008743562065)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008763461066", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400876, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008768044235", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008768515208)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008743562065)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400876, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008768044235", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400876, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/229', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>27, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008795291080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008795612801", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008807264569)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008768515208)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008795612801", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400880, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008806798935", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008807264569)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008768515208)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400880, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008806798935", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400880, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/231', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>29, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008827409920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008827737730", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008841988480)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008807264569)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008827737730", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400883, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008831702803", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008841988480)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008807264569)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400883, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008831702803", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400883, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400883, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008839997567", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008841988480)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008807264569)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400883, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654008839997567", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400883, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/209', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>31, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008859503250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008859831354", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008874147806)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008827654612)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008859831354", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>31, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008859503250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008859831354", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008874147806)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008827654612)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008859831354", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>33, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008860119550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008860443094", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008874147806)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008827654612)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008860443094", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>33, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008860119550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008860443094", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008874147806)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008827654612)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008860443094", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400886, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008867429338", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008874147806)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008827654612)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400886, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008867429338", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400886, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400887, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008872644717", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654008874147806)
expect(envelopes[5].status[:last_timetoken]).to eq(14654008827654612)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400887, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008872644717", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400887, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/205', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>35, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008891677880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008892002663", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008900046735)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008874147806)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008892002663", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>35, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008891677880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008892002663", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008900046735)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008874147806)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008892002663", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>37, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008892287710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008892612132", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008900046735)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008874147806)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008892612132", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>37, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008892287710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008892612132", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008900046735)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008874147806)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008892612132", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400889, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008899599015", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008900046735)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008874147806)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400889, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008899599015", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400889, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/207', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>39, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008923871128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008924195661", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008941150452)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008900046735)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008924195661", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>39, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008923871128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008924195661", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008941150452)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008900046735)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008924195661", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>41, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008924485362", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008924816866", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008941150452)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008900046735)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008924816866", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>41, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008924485362", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008924816866", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008941150452)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008900046735)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008924816866", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400893, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008940779126", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008941150452)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008900046735)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400893, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008940779126", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400893, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/203', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>43, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008962826690", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008963150193", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654008977897896)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008941150452)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008963150193", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>43, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008962826690", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008963150193", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654008977897896)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008941150452)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008963150193", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>45, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008963438258", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008963766236", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654008977897896)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008941150452)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008963766236", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>45, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008963438258", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008963766236", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654008977897896)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008941150452)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008963766236", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400897, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008971463264", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654008977897896)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008941150452)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400897, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008971463264", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400897, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400897, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654008975964656", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654008977897896)
expect(envelopes[5].status[:last_timetoken]).to eq(14654008941150452)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400897, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654008975964656", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400897, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/199', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>47, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008995021530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008995345009", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009004708073)
expect(envelopes[0].status[:last_timetoken]).to eq(14654008977897896)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008995345009", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>47, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008995021530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008995345009", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009004708073)
expect(envelopes[1].status[:last_timetoken]).to eq(14654008977897896)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008995345009", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>49, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008995631738", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008995959673", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009004708073)
expect(envelopes[2].status[:last_timetoken]).to eq(14654008977897896)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008995959673", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>49, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654008995631738", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654008995959673", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009004708073)
expect(envelopes[3].status[:last_timetoken]).to eq(14654008977897896)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654008995959673", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400900, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009003858431", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009004708073)
expect(envelopes[4].status[:last_timetoken]).to eq(14654008977897896)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400900, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009003858431", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400900, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/201', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>51, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009027218098", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009027540206", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009041275620)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009004708073)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009027540206", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>51, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009027218098", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009027540206", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009041275620)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009004708073)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009027540206", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>53, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009027827200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009028149897", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009041275620)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009004708073)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009028149897", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>53, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009027827200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009028149897", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009041275620)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009004708073)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009028149897", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400904, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009040417259", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009041275620)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009004708073)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400904, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009040417259", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400904, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/215', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>55, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009059348280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009059670208", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009067575576)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009058017777)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009059670208", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400906, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009067195746", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009067575576)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009058017777)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400906, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009067195746", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400906, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/211', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>57, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009091484880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009091802194", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009103454915)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009067575576)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009091802194", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400910, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009103009457", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009103454915)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009067575576)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400910, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009103009457", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400910, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/213', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>59, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009128189690", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009128510219", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009142313329)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009103454915)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009128510219", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400913, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009135269386", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009142313329)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009103454915)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400913, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009135269386", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400913, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400914, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009140768366", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009142313329)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009103454915)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400914, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009140768366", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400914, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/245', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>61, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009160324800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009160654041", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009174400716)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009128515331)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009160654041", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>61, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009160324800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009160654041", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009174400716)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009128515331)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009160654041", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>63, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009160941330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009161264058", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009174400716)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009128515331)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009161264058", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>63, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009160941330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009161264058", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009174400716)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009128515331)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009161264058", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400917, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009173533981", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009174400716)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009128515331)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400917, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009173533981", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400917, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/241', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>65, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009192485530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009192807531", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009201044451)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009174400716)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009192807531", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>65, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009192485530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009192807531", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009201044451)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009174400716)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009192807531", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>67, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009193098062", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009193419204", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009201044451)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009174400716)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009193419204", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>67, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009193098062", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009193419204", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009201044451)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009174400716)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009193419204", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400919, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009199214195", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009201044451)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009174400716)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400919, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009199214195", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400919, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/243', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>69, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009224675672", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009225005506", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009242956776)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009201044451)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009225005506", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>69, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009224675672", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009225005506", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009242956776)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009201044451)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009225005506", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>71, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009225304510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009225631200", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009242956776)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009201044451)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009225631200", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>71, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009225304510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009225631200", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009242956776)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009201044451)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009225631200", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400924, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009242492646", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009242956776)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009201044451)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400924, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009242492646", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400924, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/239', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>73, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009258263402", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009258585215", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009266140146)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009242956776)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009258585215", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>73, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009258263402", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009258585215", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009266140146)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009242956776)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009258585215", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>75, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009258877730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009259198644", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009266140146)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009242956776)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009259198644", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>75, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009258877730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009259198644", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009266140146)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009242956776)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009259198644", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400926, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009265273144", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009266140146)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009242956776)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400926, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009265273144", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400926, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/235', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>77, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009290484428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009290811715", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009303039263)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009266140146)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009290811715", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>77, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009290484428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009290811715", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009303039263)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009266140146)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009290811715", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>79, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009291097660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009291424436", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009303039263)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009266140146)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009291424436", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>79, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009291097660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009291424436", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009303039263)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009266140146)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009291424436", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400930, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009302661807", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009303039263)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009266140146)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400930, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009302661807", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400930, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/237', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>81, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009327470310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009327792664", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009339942922)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009303051388)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009327792664", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>81, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009327470310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009327792664", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009339942922)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009303051388)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009327792664", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>83, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009328080000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009328402391", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009339942922)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009303051388)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009328402391", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>83, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009328080000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009328402391", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009339942922)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009303051388)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009328402391", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400933, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009334393489", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009339942922)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009303051388)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400933, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009334393489", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400933, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400933, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009339555117", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009339942922)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009303051388)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400933, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009339555117", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400933, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/251', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>85, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009359932590", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009360254404", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009372552806)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009339942922)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009360254404", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400936, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009367437059", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009372552806)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009339942922)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400936, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009367437059", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400936, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400937, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009371846708", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009372552806)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009339942922)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400937, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009371846708", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400937, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/247', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>87, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009392313568", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009392634907", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009406943305)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009372552806)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009392634907", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400939, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009397718879", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009406943305)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009372552806)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400939, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009397718879", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400939, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400940, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009405191208", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009406943305)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009372552806)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400940, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009405191208", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400940, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/249', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>89, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009424684570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009425006840", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009436640075)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009406943305)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009425006840", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400943, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009432062049", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009436640075)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009406943305)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400943, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009432062049", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400943, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400943, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009436248885", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009436640075)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009406943305)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400943, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654009436248885", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400943, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/191', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>91, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009457067480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009457391403", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009457391403", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>91, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009457067480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009457391403", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009457391403", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>93, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009457681122", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009458003508", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009458003508", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>93, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009457681122", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009458003508", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009458003508", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400946, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009466234844", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400946, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009466234844", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400946, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400946, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009466899840", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400946, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009466899840", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400946, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400946, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009467042235", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400946, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009467042235", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400946, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400947, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009470316594", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[7].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400947, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009470316594", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400947, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400947, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009473070467", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[8].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400947, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009473070467", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400947, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400947, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009476926406", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654009477313543)
expect(envelopes[9].status[:last_timetoken]).to eq(14654009425092564)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400947, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009476926406", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400947, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/187', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>95, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009489595850", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009489916000", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009489916000", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>95, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009489595850", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009489916000", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009489916000", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>97, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009490203290", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009490525598", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009490525598", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>97, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009490203290", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009490525598", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009490525598", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400949, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009498563363", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400949, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009498563363", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400949, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400949, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009497973493", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400949, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009497973493", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400949, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400949, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009498616588", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400949, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009498616588", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400949, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400950, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009502853871", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[7].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400950, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009502853871", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400950, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400950, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009506259773", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654009506649394)
expect(envelopes[8].status[:last_timetoken]).to eq(14654009477313543)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400950, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009506259773", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400950, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/189', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>99, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009522101460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009522433380", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009522433380", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>99, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009522101460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009522433380", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009522433380", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>101, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009522724600", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009523049710", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009523049710", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>101, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009522724600", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009523049710", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009523049710", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400952, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009529736487", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400952, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009529736487", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400952, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400952, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009529761661", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400952, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009529761661", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400952, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400953, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009534836880", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400953, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009534836880", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400953, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400953, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009539641183", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654009540395854)
expect(envelopes[7].status[:last_timetoken]).to eq(14654009506649394)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400953, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009539641183", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400953, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/185', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>103, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009554439192", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009554769421", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009554769421", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>103, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009554439192", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009554769421", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009554769421", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>105, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009555055192", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009555379740", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009555379740", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>105, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009555055192", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009555379740", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009555379740", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400956, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009560244496", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400956, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009560244496", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400956, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400956, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009561339678", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400956, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009561339678", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400956, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400956, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009567691371", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400956, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009567691371", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400956, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400957, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009570810400", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[7].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400957, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009570810400", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400957, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400957, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009575232872", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654009575978514)
expect(envelopes[8].status[:last_timetoken]).to eq(14654009540395854)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400957, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009575232872", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400957, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/181', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>107, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009586893330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009587215872", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009587215872", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>107, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009586893330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009587215872", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009587215872", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>109, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009587512000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009587852889", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009587852889", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>109, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009587512000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009587852889", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009587852889", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400959, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009595574910", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400959, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009595574910", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400959, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400959, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009596266175", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400959, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009596266175", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400959, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400959, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009596287799", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400959, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009596287799", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400959, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400960, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009600427937", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[7].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400960, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009600427937", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400960, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400960, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009605550208", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654009607366433)
expect(envelopes[8].status[:last_timetoken]).to eq(14654009575978514)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400960, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009605550208", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400960, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/183', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>111, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009619341490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009619665389", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009619665389", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>111, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009619341490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009619665389", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009619665389", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>113, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009619948428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009620272610", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009620272610", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>113, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009619948428", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009620272610", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009620272610", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400962, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009627238267", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400962, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009627238267", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400962, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400962, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009627943530", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400962, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009627943530", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400962, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400963, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009633836701", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009634616532)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009607366433)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400963, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009633836701", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400963, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/197', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>115, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009653099232", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009653425386", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009671178045)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009634616532)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009653425386", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400965, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009658864347", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009671178045)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009634616532)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400965, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009658864347", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400965, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400966, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009664995538", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009671178045)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009634616532)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400966, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009664995538", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400966, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400966, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009668772947", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009671178045)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009634616532)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400966, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009668772947", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400966, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400967, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009670788004", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009671178045)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009634616532)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400967, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009670788004", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400967, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/193', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>117, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009685571830", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009685894349", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009685894349", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009691368742", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009691368742", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400969, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009691369663", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009691369663", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400969, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009692129357", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009692129357", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400969, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009697401354", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400969, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009697401354", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400969, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400970, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009701461896", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400970, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009701461896", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400970, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400970, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009704472694", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009705262657)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009671178045)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400970, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009704472694", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400970, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/195', record: :none) do
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>119, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009718046610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009718367493", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009718367493", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009727583577", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009727583577", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400972, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009726845445", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009726845445", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400972, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009727588984", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009727588984", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400972, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009729862887", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[4].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400972, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654009729862887", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400972, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400973, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009733798146", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[5].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400973, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654009733798146", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400973, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465400973, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654009735798772", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654009736703444)
expect(envelopes[6].status[:last_timetoken]).to eq(14654009705262657)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465400973, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654009735798772", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465400973, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/263', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>121, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009750891130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009751220926", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009751915202)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009718452085)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009751220926", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>121, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009750891130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009751220926", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009751915202)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009718452085)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009751220926", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>123, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009751509990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009751833676", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009751915202)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009718452085)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009751833676", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>123, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009751509990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009751833676", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009751915202)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009718452085)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009751833676", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/259', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>125, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009783323478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009783652455", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009784340303)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009751915202)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009783652455", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>125, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009783323478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009783652455", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009784340303)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009751915202)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009783652455", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>127, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009783927550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009784255550", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009784340303)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009751915202)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009784255550", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>127, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009783927550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009784255550", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009784340303)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009751915202)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009784255550", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/261', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>129, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009815725840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009816047299", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009816744404)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009784340303)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009816047299", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>129, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009815725840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009816047299", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009816744404)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009784340303)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009816047299", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>131, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009816331670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009816654883", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009816744404)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009784340303)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009816654883", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>131, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009816331670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009816654883", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009816744404)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009784340303)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009816654883", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/257', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>133, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009852225048", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009852546222", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009853237108)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009816744404)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009852546222", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>133, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009852225048", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009852546222", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009853237108)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009816744404)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009852546222", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>135, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009852828930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009853151449", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009853237108)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009816744404)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009853151449", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>135, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009852828930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009853151449", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009853237108)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009816744404)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009853151449", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/253', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>137, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009884599240", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009884919460", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009885609457)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009853237108)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009884919460", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>137, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009884599240", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009884919460", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009885609457)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009853237108)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009884919460", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>139, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009885200992", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009885524992", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009885609457)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009853237108)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009885524992", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>139, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009885200992", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009885524992", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009885609457)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009853237108)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009885524992", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/255', record: :none) do
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>141, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009916974330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009917296415", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009918000126)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009885609457)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009917296415", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>141, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009916974330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009917296415", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654009918000126)
expect(envelopes[1].status[:last_timetoken]).to eq(14654009885609457)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009917296415", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>143, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009917583402", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009917914581", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654009918000126)
expect(envelopes[2].status[:last_timetoken]).to eq(14654009885609457)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009917914581", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>143, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009917583402", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009917914581", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654009918000126)
expect(envelopes[3].status[:last_timetoken]).to eq(14654009885609457)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009917914581", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/269', record: :none) do
@pubnub.subscribe(channel: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>145, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009949371772", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009949699093", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009949783635)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009918000125)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009949699093", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/265', record: :none) do
@pubnub.subscribe(channel: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>147, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654009981664488", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654009981986809", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654009982068847)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009949783635)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654009981986809", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/267', record: :none) do
@pubnub.subscribe(channel: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>149, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010013935070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010014260362", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010014344733)
expect(envelopes[0].status[:last_timetoken]).to eq(14654009982068847)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010014260362", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/137', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>151, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010046216660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010046541666", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010059523524)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010014344733)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010046541666", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>153, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010046833860", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010047167902", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010059523524)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010014344733)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010047167902", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401005, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010059138555", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010059523524)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010014344733)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401005, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010059138555", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401005, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/133', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>155, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010079988448", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010080318101", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010095124048)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010059523524)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010080318101", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>157, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010080601290", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010080930421", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010095124048)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010059523524)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010080930421", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401008, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010085870496", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010095124048)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010059523524)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401008, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010085870496", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401008, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401009, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010093190316", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010095124048)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010059523524)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401009, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010093190316", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401009, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/135', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>159, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010112411142", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010112733347", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010119563412)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010095124048)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010112733347", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>161, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010113017590", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010113338425", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010119563412)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010095124048)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010113338425", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401011, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010119171868", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010119563412)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010095124048)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401011, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010119171868", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401011, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/131', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>163, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010144755750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010145086346", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010159003748)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010119563412)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010145086346", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>165, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010145376862", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010145696223", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010159003748)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010119563412)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010145696223", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401015, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010158045725", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010159003748)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010119563412)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401015, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010158045725", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401015, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/127', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>167, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010177164140", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010177490284", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010189642405)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010159003748)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010177490284", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>169, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010177771320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010178097510", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010189642405)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010159003748)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010178097510", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401018, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010184069755", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010189642405)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010159003748)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401018, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010184069755", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401018, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401018, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010189251056", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010189642405)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010159003748)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401018, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010189251056", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401018, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/129', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>171, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010209605692", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010209937713", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010222845827)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010189642405)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010209937713", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>173, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010210214688", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010210533409", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010222845827)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010189642405)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010210533409", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401021, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010215574498", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010222845827)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010189642405)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401021, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010215574498", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401021, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401022, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010222073551", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010222845827)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010189642405)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401022, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010222073551", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401022, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/143', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>175, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010246654920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010246979254", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010261374130)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010222845827)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010246979254", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401025, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010254688990", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010261374130)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010222845827)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401025, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010254688990", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401025, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401025, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010259235901", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010261374130)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010222845827)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401025, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010259235901", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401025, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/139', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>177, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010279034860", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010279355318", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010285505482)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010261374130)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010279355318", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401028, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010285118411", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010285505482)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010261374130)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401028, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010285118411", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401028, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/141', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>179, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010311827662", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010312155200", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010325684160)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010285505482)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010312155200", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401032, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010324372987", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010325684160)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010285505482)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401032, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010324372987", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401032, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401032, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010324916129", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010325684160)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010285505482)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401032, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010324916129", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401032, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/119', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>181, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010343998048", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010344318664", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010358645909)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010342673177)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010344318664", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401035, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010357178699", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010358645909)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010342673177)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401035, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010357178699", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401035, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401035, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010357178699", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010358645909)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010342673177)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401035, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010357178699", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401035, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>183, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010344603630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010344925798", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010358645909)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010342673177)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010344925798", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/115', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>185, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010376178630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010376496866", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010389002071)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010358645909)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010376496866", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>187, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010376784050", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010377109344", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010389002071)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010358645909)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010377109344", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010385988848", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010389002071)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010358645909)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010385988848", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401038, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010385988848", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010389002071)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010358645909)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010385988848", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401038, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010388537720", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010389002071)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010358645909)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010388537720", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401038, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010388537720", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010389002071)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010358645909)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401038, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010388537720", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401038, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/117', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>189, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010408372008", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010408694343", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010421069227)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010389002071)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010408694343", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>191, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010408978870", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010409371375", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010421069227)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010389002071)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010409371375", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401041, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010417024859", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010421069227)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010389002071)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401041, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010417024859", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401041, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401041, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010417024859", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010421069227)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010389002071)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401041, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010417024859", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401041, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401042, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010420596836", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010421069227)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010389002071)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401042, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010420596836", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401042, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401042, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010420596836", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010421069227)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010389002071)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401042, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010420596836", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401042, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/113', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>193, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010445101490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010445434670", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010457601764)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010421069227)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010445434670", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>195, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010445717340", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010446043770", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010457601764)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010421069227)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010446043770", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010451827184", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010457601764)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010421069227)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010451827184", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401045, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010451827184", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010457601764)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010421069227)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010451827184", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401045, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010457220977", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010457601764)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010421069227)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010457220977", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401045, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010457220977", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010457601764)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010421069227)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401045, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010457220977", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401045, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/109', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>197, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010477324560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010477647899", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010490656408)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010457601764)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010477647899", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>199, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010477934310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010478263081", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010490656408)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010457601764)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010478263081", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010483006234", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010490656408)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010457601764)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010483006234", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401048, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010483006234", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010490656408)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010457601764)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010483006234", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401048, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010489803561", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010490656408)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010457601764)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010489803561", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401048, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010489803561", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010490656408)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010457601764)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401048, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010489803561", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401048, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/111', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>201, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010509464478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010509794232", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010521977039)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010490656408)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010509794232", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>203, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010510077948", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010510420161", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010521977039)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010490656408)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010510420161", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401051, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010517359881", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010521977039)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010490656408)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401051, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010517359881", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401051, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401051, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010517359881", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010521977039)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010490656408)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401051, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010517359881", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401051, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401052, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010521567955", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010521977039)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010490656408)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401052, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010521567955", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401052, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401052, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010521567955", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010521977039)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010490656408)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401052, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010521567955", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401052, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/125', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>205, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010543009970", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010543508040", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010556736720)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010541699608)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010543508040", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401054, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010546894701", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010556736720)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010541699608)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401054, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010546894701", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401054, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401055, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010555688597", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010556736720)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010541699608)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401055, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010555688597", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401055, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401054, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010546894701", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010556736720)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010541699608)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401054, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010546894701", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401054, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401055, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010555688597", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010556736720)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010541699608)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401055, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010555688597", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401055, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/121', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>207, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010575169642", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010575507140", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010583865714)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010556736720)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010575507140", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401058, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010582610482", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010583865714)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010556736720)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401058, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010582610482", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401058, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401058, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010582610482", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010583865714)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010556736720)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401058, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010582610482", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401058, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/123', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>209, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010607279830", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010607603603", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010620722067)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010583865714)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010607603603", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401061, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010619885725", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010620722067)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010583865714)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401061, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010619885725", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401061, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401061, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010619885725", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010620722067)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010583865714)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401061, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010619885725", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401061, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/155', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>211, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010639464860", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010639789186", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010653480048)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010620722066)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010639789186", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>213, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010640075532", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010640401925", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010653480048)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010620722066)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010640401925", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401065, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010652633755", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010653480048)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010620722066)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401065, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010652633755", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401065, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/151', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>215, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010671706880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010672031032", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010677571716)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010653480048)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010672031032", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>217, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010672328100", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010672649760", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010677571716)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010653480048)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010672649760", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401067, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010677104286", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010677571716)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010653480048)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401067, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010677104286", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401067, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/153', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>219, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010703892920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010704216766", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010718831789)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010677571716)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010704216766", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>221, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010704502558", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010704824138", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010718831789)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010677571716)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010704824138", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401071, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010717139481", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010718831789)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010677571716)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401071, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010717139481", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401071, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/149', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>223, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010736091190", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010736423220", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010748838079)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010718831789)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010736423220", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>225, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010736696250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010737023639", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010748838079)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010718831789)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010737023639", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401074, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010744280250", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010748838079)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010718831789)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401074, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010744280250", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401074, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401074, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010748167260", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010748838079)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010718831789)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401074, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010748167260", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401074, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/145', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>227, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010768262852", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010768597981", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010780805783)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010748838079)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010768597981", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>229, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010768875830", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010769197822", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010780805783)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010748838079)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010769197822", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401077, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010774743504", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010780805783)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010748838079)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401077, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010774743504", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401077, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401078, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010780353958", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010780805783)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010748838079)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401078, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010780353958", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401078, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/147', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>231, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010800418120", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010800740910", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010801369924)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010780805783)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010800740910", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>233, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010801023988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010801349055", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010801369924)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010780805783)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010801349055", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/161', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>235, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010832539840", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010832862088", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010855294415)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010800761798)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010832862088", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401083, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010839817323", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010855294415)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010800761798)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401083, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010839817323", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401083, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401085, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010854529710", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010855294415)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010800761798)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401085, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010854529710", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401085, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/157', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>237, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010869333660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010869657907", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010874354462)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010855294415)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010869657907", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401087, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010873871490", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010874354462)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010855294415)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401087, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010873871490", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401087, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/159', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>239, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010901448650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010901771707", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010913448179)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010874354462)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010901771707", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401091, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010912976163", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010913448179)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010874354462)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401091, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654010912976163", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401091, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/101', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>241, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010933586528", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010933915528", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010933915528", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>243, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010934202108", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010934551064", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010934551064", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010942708666", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010942708666", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401094, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010942708666", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010942708666", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401094, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010941950823", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654010941950823", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401094, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010945755844", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654010945755844", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401094, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010948761449", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[6].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401094, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654010948761449", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401094, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401095, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010953594701", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[7].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401095, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010953594701", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401095, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401095, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010953594701", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654010954514627)
expect(envelopes[8].status[:last_timetoken]).to eq(14654010901770973)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401095, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010953594701", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401095, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/97', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>245, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010965834120", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010966155456", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010966155456", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>247, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010966439960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010966762977", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010966762977", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010975104213", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654010975104213", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401097, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010975795865", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654010975795865", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401097, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010975821516", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010975821516", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401097, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010975821516", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401097, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010975821516", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401097, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010980322347", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[6].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010980322347", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401098, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010980322347", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[7].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010980322347", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401098, :state=>nil, :occupancy=>2}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010980448280", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[8].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010980448280", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401098, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654010980448280", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654010982349844)
expect(envelopes[9].status[:last_timetoken]).to eq(14654010954514627)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401098, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654010980448280", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401098, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/99', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>249, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010998329280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010998651518", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[0].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654010998651518", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>251, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654010998937130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654010999263489", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[1].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654010999263489", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401101, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011011601364", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[2].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401101, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654011011601364", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401101, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401101, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011014472278", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[3].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401101, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011014472278", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401101, :state=>nil, :occupancy=>0}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401101, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011014570767", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[4].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401101, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011014570767", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401101, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401102, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011021756731", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[5].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401102, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011021756731", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401102, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401102, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011021756731", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654011022603078)
expect(envelopes[6].status[:last_timetoken]).to eq(14654010982349844)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401102, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011021756731", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401102, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/95', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>253, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011030470988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011030795186", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011045444589)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011029533844)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011030795186", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>255, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011031077362", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011031402961", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011045444589)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011029533844)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011031402961", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401103, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011039846486", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011045444589)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011029533844)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401103, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011039846486", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401103, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401103, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011039846486", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011045444589)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011029533844)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401103, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011039846486", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401103, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401104, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011044427877", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011045444589)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011029533844)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401104, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011044427877", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401104, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/91', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>257, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011062660520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011062987945", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011062987945", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>259, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011063275180", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011063595574", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011063595574", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401106, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011067080320", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401106, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011067080320", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401106, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401107, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011074807840", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401107, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654011074807840", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401107, :state=>nil, :occupancy=>0}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401107, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011077749304", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401107, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011077749304", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401107, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401107, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011078353138", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401107, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011078353138", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401107, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401108, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011081994369", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[6].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401108, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011081994369", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401108, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401108, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011081994369", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654011082446706)
expect(envelopes[7].status[:last_timetoken]).to eq(14654011045444589)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401108, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011081994369", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401108, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/93', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>261, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011094859100", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011095183418", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011103707332)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011082446706)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011095183418", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>263, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011095467470", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011095793085", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011103707332)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011082446706)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011095793085", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401110, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011102684738", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011103707332)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011082446706)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401110, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654011102684738", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401110, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401110, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011102698519", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011103707332)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011082446706)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401110, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011102698519", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401110, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401110, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011102698519", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011103707332)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011082446706)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401110, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011102698519", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401110, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/107', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>265, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011127020538", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011127343533", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011127343533", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011147213489", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011147213489", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401114, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011146032346", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011146032346", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401114, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011147213489", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011147213489", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401114, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011146032346", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011146032346", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401114, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401113, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011138659672", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401113, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654011138659672", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401113, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401115, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011153920775", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[6].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401115, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654011153920775", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401115, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011142999181", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654011154531549)
expect(envelopes[7].status[:last_timetoken]).to eq(14654011125694229)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401114, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011142999181", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401114, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/103', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>267, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011159259362", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011159582523", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011171932578)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011154531549)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011159582523", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401116, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011164952981", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011171932578)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011154531549)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401116, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011164952981", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401116, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401117, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011171480003", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011171932578)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011154531549)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401117, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011171480003", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401117, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/105', record: :none) do
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>269, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011191410182", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011191733527", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011209518802)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011171932578)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011191733527", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401119, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011197538641", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011209518802)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011171932578)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401119, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011197538641", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401119, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011202970938", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011209518802)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011171932578)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654011202970938", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401120, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011207114759", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011209518802)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011171932578)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654011207114759", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401120, :state=>nil, :occupancy=>0}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011209082537", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011209518802)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011171932578)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011209082537", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401120, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011209082537", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011209518802)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011171932578)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401120, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011209082537", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401120, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/173', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>271, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011223532450", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011223854269", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011224515592)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011222202154)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011223854269", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>273, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011224156990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011224515622", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011224515592)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011222202154)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011224515622", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/169', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>275, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011261310070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011261632992", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011262169181)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011224515592)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011261632992", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>277, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011261928080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011262249822", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011262169181)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011224515592)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011262249822", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/171', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>279, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011298012920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011298338385", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011299025820)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011262169181)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011298338385", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>281, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011298625980", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011298950432", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011299025820)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011262169181)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011298950432", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/167', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>283, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011330146098", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011330477199", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011331119141)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011299025820)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011330477199", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>285, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011330774012", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011331097246", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011331119141)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011299025820)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011331097246", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/163', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>287, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011362269230", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011362600741", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011363132843)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011331119141)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011362600741", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>289, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011362890710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011363213467", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011363132843)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011331119141)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011363213467", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/165', record: :none) do
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>291, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011394328570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011394654521", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011395265861)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011363132843)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011394654521", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>293, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011394940870", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011395261892", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011395265861)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011363132843)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011395261892", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/179', record: :none) do
@pubnub.subscribe(channel: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>295, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011426400640", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011426728691", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011426732896)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011394658800)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011426728691", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/175', record: :none) do
@pubnub.subscribe(channel: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>297, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011458517440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011458840663", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011458840068)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011426732896)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011458840663", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/177', record: :none) do
@pubnub.subscribe(channel: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>299, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011490601048", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011490924412", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011490928771)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011458840068)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654011490924412", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/317', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>301, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011522672760", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011522996232", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011536477637)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011395265862)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011522996232", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>301, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011522672760", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011522996232", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011536477637)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011395265862)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011522996232", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>303, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011523280130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011523610875", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011536477637)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011395265862)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011523610875", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>303, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011523280130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011523610875", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011536477637)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011395265862)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011523610875", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401153, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011535714946", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011536477637)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011395265862)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401153, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011535714946", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401153, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/313', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>305, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011554835852", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011555449058", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011567703231)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011536477637)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011555449058", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>305, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011554835852", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011555449058", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011567703231)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011536477637)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011555449058", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>307, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011555730582", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011556052213", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011567703231)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011536477637)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011556052213", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>307, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011555730582", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011556052213", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011567703231)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011536477637)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011556052213", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401156, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011562018337", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011567703231)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011536477637)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401156, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011562018337", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401156, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401156, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011567296444", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011567703231)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011536477637)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401156, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011567296444", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401156, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/315', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>309, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011593585322", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011593909075", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011607631916)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011567703231)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011593909075", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>309, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011593585322", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011593909075", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011607631916)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011567703231)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011593909075", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>311, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011594201310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011594524046", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011607631916)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011567703231)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011594524046", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>311, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011594201310", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011594524046", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011607631916)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011567703231)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011594524046", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401159, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011597453238", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011607631916)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011567703231)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401159, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011597453238", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401159, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401160, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011606810902", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011607631916)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011567703231)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401160, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011606810902", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401160, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/311', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>313, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011625715420", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011626037349", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011634518034)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011607631916)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011626037349", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>313, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011625715420", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011626037349", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011634518034)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011607631916)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011626037349", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>315, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011626329128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011626649063", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011634518034)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011607631916)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011626649063", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>315, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011626329128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011626649063", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011634518034)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011607631916)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011626649063", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401163, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011633695065", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011634518034)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011607631916)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401163, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011633695065", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401163, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/307', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>317, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011657865800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011658185999", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011671993806)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011634518034)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011658185999", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>317, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011657865800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011658185999", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011671993806)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011634518034)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011658185999", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>319, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011658476410", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011658798089", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011671993806)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011634518034)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011658798089", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>319, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011658476410", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011658798089", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011671993806)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011634518034)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011658798089", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401167, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011671128257", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011671993806)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011634518034)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401167, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011671128257", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401167, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/309', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>321, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011690021360", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011690343672", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011697167528)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011671993806)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011690343672", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>321, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011690021360", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011690343672", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011697167528)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011671993806)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011690343672", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>323, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011690633118", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011690953326", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011697167528)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011671993806)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011690953326", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>323, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011690633118", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011690953326", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011697167528)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011671993806)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011690953326", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401169, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011696630433", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011697167528)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011671993806)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401169, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011696630433", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401169, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/323', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>325, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011726686280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011727009598", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011740911313)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011697167528)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011727009598", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401173, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011739245340", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011740911313)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011697167528)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401173, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011739245340", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401173, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/319', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>327, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011758814220", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011759135820", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011767930538)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011740911313)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011759135820", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401176, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011766042540", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011767930538)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011740911313)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401176, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654011766042540", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401176, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/321', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>329, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011790917382", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011791242056", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011791226691)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011767930538)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011791242056", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/299', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>331, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011834635480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011834957368", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011848781332)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011791226692)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011834957368", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>331, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011834635480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011834957368", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011848781332)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011791226692)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011834957368", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>333, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011835244610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011835574277", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011848781332)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011791226692)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011835574277", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>333, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011835244610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011835574277", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011848781332)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011791226692)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011835574277", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401184, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011844097036", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011848781332)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011791226692)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401184, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011844097036", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401184, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401184, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011847860434", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011848781332)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011791226692)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401184, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011847860434", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401184, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/295', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>335, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011855195652", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011855523725", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011856135170)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011848781332)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011855523725", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>335, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011855195652", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011855523725", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011856135170)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011848781332)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011855523725", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>337, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011855808670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011856130406", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011856135170)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011848781332)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011856130406", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>337, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011855808670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011856130406", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011856135170)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011848781332)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011856130406", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/297', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>339, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011888888572", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011889210785", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011909433579)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011856135170)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011889210785", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>339, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011888888572", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011889210785", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011909433579)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011856135170)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011889210785", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>341, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011889489080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011889811912", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011909433579)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011856135170)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011889811912", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>341, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011889489080", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011889811912", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011909433579)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011856135170)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011889811912", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401190, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011908297387", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011909433579)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011856135170)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401190, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011908297387", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401190, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/293', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401192, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011933205022", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011935193649)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011909433579)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401192, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011933205022", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401192, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>343, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011934258712", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011934582858", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011935193649)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011909433579)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011934582858", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>343, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011934258712", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011934582858", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011935193649)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011909433579)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011934582858", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>345, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011934867232", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011935189435", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011935193649)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011909433579)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011935189435", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>345, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011934867232", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011935189435", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011935193649)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011909433579)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011935189435", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/289', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>347, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011953272478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011953591844", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011967351781)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011935193649)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011953591844", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>347, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011953272478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011953591844", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011967351781)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011935193649)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011953591844", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>349, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011953884800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011954206746", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011967351781)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011935193649)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011954206746", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>349, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011953884800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011954206746", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011967351781)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011935193649)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011954206746", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401196, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011960414114", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011967351781)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011935193649)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401196, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011960414114", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401196, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401196, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011966504869", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654011967351781)
expect(envelopes[5].status[:last_timetoken]).to eq(14654011935193649)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401196, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011966504869", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401196, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/291', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>351, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011985465378", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011985787750", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654011993708540)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011967351781)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011985787750", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>351, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011985465378", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011985787750", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654011993708540)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011967351781)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011985787750", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>353, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011986077340", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011986402160", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654011993708540)
expect(envelopes[2].status[:last_timetoken]).to eq(14654011967351781)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011986402160", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>353, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654011986077340", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654011986402160", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654011993708540)
expect(envelopes[3].status[:last_timetoken]).to eq(14654011967351781)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654011986402160", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401199, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654011992854261", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654011993708540)
expect(envelopes[4].status[:last_timetoken]).to eq(14654011967351781)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401199, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654011992854261", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401199, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/305', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>355, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012017644238", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012017965977", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012030071070)
expect(envelopes[0].status[:last_timetoken]).to eq(14654011993708540)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012017965977", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401202, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012029142377", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012030071070)
expect(envelopes[1].status[:last_timetoken]).to eq(14654011993708540)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401202, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012029142377", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401202, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/301', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>357, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012049782130", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012050100588", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012062493513)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012030071070)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012050100588", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401205, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012054570252", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012062493513)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012030071070)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401205, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012054570252", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401205, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401206, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012061656913", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012062493513)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012030071070)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401206, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012061656913", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401206, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/303', record: :none) do
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>359, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012081918170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012082249310", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012093884439)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012062493513)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012082249310", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012089055439", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012093884439)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012062493513)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401208, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012089055439", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401208, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401209, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012093438217", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012093884439)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012062493513)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401209, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012093438217", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401209, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/335', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>361, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012114066990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012114386303", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012129647736)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012082169919)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012114386303", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>361, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012114066990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012114386303", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012129647736)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012082169919)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012114386303", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>363, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012114673322", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012114991757", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012129647736)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012082169919)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012114991757", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>363, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012114673322", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012114991757", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012129647736)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012082169919)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012114991757", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401212, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012127343668", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012129647736)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012082169919)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401212, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012127343668", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401212, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/331', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>365, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012146237400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012146560880", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012158879446)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012129647736)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012146560880", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>365, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012146237400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012146560880", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012158879446)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012129647736)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012146560880", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>367, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012146852018", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012147173111", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012158879446)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012129647736)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012147173111", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>367, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012146852018", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012147173111", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012158879446)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012129647736)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012147173111", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012152100576", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012158879446)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012129647736)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012152100576", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401215, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012158340767", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012158879446)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012129647736)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401215, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012158340767", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401215, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/333', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>369, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012178418660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012178739312", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012192508578)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012158879446)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012178739312", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>369, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012178418660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012178739312", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012192508578)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012158879446)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012178739312", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>371, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012179033120", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012179353921", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012192508578)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012158879446)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012179353921", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>371, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012179033120", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012179353921", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012192508578)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012158879446)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012179353921", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401218, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012184366171", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012192508578)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012158879446)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401218, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012184366171", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401218, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401219, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012191559660", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012192508578)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012158879446)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401219, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012191559660", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401219, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/329', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>373, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012211064860", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012211385049", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012219143810)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012192508578)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012211385049", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>373, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012211064860", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012211385049", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012219143810)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012192508578)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012211385049", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>375, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012211676690", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012211999094", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012219143810)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012192508578)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012211999094", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>375, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012211676690", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012211999094", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012219143810)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012192508578)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012211999094", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012218323083", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012219143810)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012192508578)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401221, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012218323083", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401221, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/325', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>377, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012243174998", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012243496274", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012255812172)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012219143810)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012243496274", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>377, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012243174998", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012243496274", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012255812172)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012219143810)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012243496274", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>379, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012243801768", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012244122316", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012255812172)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012219143810)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012244122316", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>379, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012243801768", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012244122316", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012255812172)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012219143810)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012244122316", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401225, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012255365215", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012255812172)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012219143810)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401225, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012255365215", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401225, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/327', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>381, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012276903460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012277231025", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012289920472)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012255812172)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012277231025", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>381, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012276903460", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012277231025", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012289920472)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012255812172)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012277231025", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>383, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012277521852", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012277847583", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012289920472)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012255812172)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012277847583", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>383, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012277521852", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012277847583", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012289920472)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012255812172)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012277847583", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012284538318", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012289920472)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012255812172)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012284538318", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401228, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012289013073", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012289920472)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012255812172)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401228, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012289013073", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401228, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/341', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>385, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012309065390", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012309393260", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012315359662)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012289920472)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012309393260", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401231, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012314711756", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012315359662)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012289920472)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401231, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012314711756", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401231, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/337', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>387, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012341192030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012341511409", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012355095373)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012315359662)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012341511409", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401235, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012353809735", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012355095373)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012315359662)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401235, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012353809735", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401235, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/339', record: :none) do
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>389, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012373367290", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012373688192", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012383764519)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012355095373)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012373688192", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401238, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012382328531", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012383764519)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012355095373)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401238, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654012382328531", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401238, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/281', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>391, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012405475522", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012405809204", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012405809204", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>391, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012405475522", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012405809204", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012405809204", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>393, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012406105358", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012406430495", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012406430495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>393, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012406105358", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012406430495", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012406430495", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012412379261", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012412379261", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401241, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012412434494", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012412434494", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401241, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012413162305", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[6].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012413162305", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401241, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012418700715", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[7].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401241, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012418700715", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401241, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401242, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012421826599", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[8].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401242, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012421826599", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401242, :state=>nil, :occupancy=>0}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401242, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012426355402", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654012427210770)
expect(envelopes[9].status[:last_timetoken]).to eq(14654012373693233)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401242, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012426355402", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401242, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/277', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>395, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012437801988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012438122610", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012438122610", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>395, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012437801988", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012438122610", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012438122610", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>397, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012438397372", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012438720271", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012438720271", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>397, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012438397372", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012438720271", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012438720271", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401244, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012444322501", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401244, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012444322501", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401244, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401244, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012447278573", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401244, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012447278573", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401244, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401245, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012450611228", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[6].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401245, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012450611228", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401245, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401244, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012452006412", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[7].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401244, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012452006412", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401244, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401245, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012455243330", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654012455696064)
expect(envelopes[8].status[:last_timetoken]).to eq(14654012427210770)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401245, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012455243330", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401245, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/279', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>399, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012470050822", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012470373335", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012470373335", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>399, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012470050822", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012470373335", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012470373335", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>401, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012470659650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012470978248", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012470978248", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>401, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012470659650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012470978248", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012470978248", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401247, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012477206008", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401247, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012477206008", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401247, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401248, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012482133641", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401248, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012482133641", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401248, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401248, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012484130540", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[6].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401248, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012484130540", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401248, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401248, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012485199190", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[7].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401248, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012485199190", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401248, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401249, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012492136722", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[8].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401249, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012492136722", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401249, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401249, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012497357409", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654012497829373)
expect(envelopes[9].status[:last_timetoken]).to eq(14654012455696064)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401249, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012497357409", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401249, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/275', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>403, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012502252880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012502581788", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012502581788", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>403, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012502252880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012502581788", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012502581788", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>405, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012502883350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012503210477", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012503210477", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>405, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012502883350", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012503210477", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012503210477", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401250, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012507586149", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401250, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012507586149", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401250, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401250, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012508308719", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401250, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012508308719", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401250, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401251, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012515417574", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[6].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401251, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012515417574", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401251, :state=>nil, :occupancy=>0}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401251, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012519830899", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[7].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401251, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012519830899", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401251, :state=>nil, :occupancy=>0}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401252, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012525935939", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[8].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401252, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012525935939", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401252, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401252, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012526715238", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654012527536485)
expect(envelopes[9].status[:last_timetoken]).to eq(14654012497829373)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401252, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012526715238", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401252, :state=>nil, :occupancy=>2}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/271', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>407, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012534535250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012534858626", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012534858626", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>407, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012534535250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012534858626", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012534858626", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401253, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012532752428", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401253, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012532752428", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401253, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>409, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012535141010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012535470627", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012535470627", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>409, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012535141010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012535470627", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012535470627", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401254, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012546629966", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401254, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012546629966", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401254, :state=>nil, :occupancy=>0}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401255, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012552409922", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654012554511768)
expect(envelopes[6].status[:last_timetoken]).to eq(14654012527536485)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401255, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012552409922", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401255, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/273', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>411, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012566772430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012567101073", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012567101073", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>411, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012566772430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012567101073", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012567101073", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>413, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012567377620", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012567698593", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012567698593", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>413, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012567377620", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012567698593", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012567698593", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401257, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012579547478", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401257, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012579547478", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401257, :state=>nil, :occupancy=>0}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401257, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012580356628", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[5].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401257, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012580356628", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401257, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401259, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012594007315", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654012595106543)
expect(envelopes[6].status[:last_timetoken]).to eq(14654012554511768)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401259, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012594007315", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401259, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/287', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>415, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012598877240", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012599204336", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012625002995)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012595106543)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012599204336", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401260, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012600049268", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012625002995)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012595106543)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401260, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012600049268", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401260, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401261, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012618252910", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012625002995)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012595106543)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401261, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012618252910", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401261, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401261, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012624082242", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012625002995)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012595106543)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401261, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012624082242", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401261, :state=>nil, :occupancy=>0}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/283', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401263, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012631160116", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012655767620)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012629984153)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401263, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012631160116", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401263, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>417, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012632583702", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012632906630", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012655767620)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012629984153)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012632906630", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401264, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012649000129", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012655767620)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012629984153)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401264, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012649000129", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401264, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401264, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012649929288", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012655767620)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012629984153)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401264, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012649929288", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401264, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401265, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012655285744", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654012655767620)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012629984153)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401265, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012655285744", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401265, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/285', record: :none) do
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>419, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012664779388", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012665113060", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012683545110)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012655767620)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012665113060", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401267, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012676324070", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012683545110)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012655767620)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401267, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654012676324070", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401267, :state=>nil, :occupancy=>0}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401267, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012679362865", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012683545110)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012655767620)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401267, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>0}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654012679362865", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401267, :state=>nil, :occupancy=>0}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401268, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654012683108049", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012683545110)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012655767620)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401268, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654012683108049", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401268, :state=>nil, :occupancy=>1}})

end
end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/353', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>421, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012696945002", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012697268986", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012697778998)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012665098652)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012697268986", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>421, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012696945002", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012697268986", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012697778998)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012665098652)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012697268986", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>423, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012697537780", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012697857798", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012697778998)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012665098652)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012697857798", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>423, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012697537780", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012697857798", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012697778998)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012665098652)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012697857798", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/349', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>425, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012729202550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012729534409", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012730134614)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012697778998)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012729534409", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>425, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012729202550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012729534409", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012730134614)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012697778998)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012729534409", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>427, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012729821670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012730145446", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012730134614)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012697778998)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012730145446", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>427, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012729821670", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012730145446", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012730134614)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012697778998)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012730145446", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/351', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>429, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012761314890", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012761644925", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012762246738)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012730134614)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012761644925", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>429, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012761314890", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012761644925", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012762246738)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012730134614)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012761644925", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>431, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012761925492", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012762257087", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012762246738)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012730134614)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012762257087", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>431, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012761925492", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012762257087", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012762246738)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012730134614)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012762257087", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/347', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>433, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012793374440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012793701242", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012794224029)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012762246738)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012793701242", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>433, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012793374440", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012793701242", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012794224029)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012762246738)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012793701242", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>435, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012793976698", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012794302213", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012794224029)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012762246738)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012794302213", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>435, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012793976698", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012794302213", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012794224029)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012762246738)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012794302213", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/343', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>437, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012830907030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012831234473", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012831923255)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012794388360)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012831234473", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>437, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012830907030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012831234473", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012831923255)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012794388360)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012831234473", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>439, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012831508898", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012831835901", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012831923255)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012794388360)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012831835901", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>439, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012831508898", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012831835901", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012831923255)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012794388360)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012831835901", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/345', record: :none) do
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>441, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012863259640", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012863579724", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012864285506)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012831923255)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012863579724", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>441, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012863259640", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012863579724", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654012864285506)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012831923255)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012863579724", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>443, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012863875990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012864200928", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654012864285506)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012831923255)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012864200928", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>443, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012863875990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012864200928", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654012864285506)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012831923255)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012864200928", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/359', record: :none) do
@pubnub.subscribe(channel: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>445, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012895542570", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012895869813", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012895925500)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012864285505)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012895869813", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/355', record: :none) do
@pubnub.subscribe(channel: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>447, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012927846122", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012928169247", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012928253126)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012895925500)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012928169247", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/357', record: :none) do
@pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>nil, :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>449, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012960095370", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012960415389", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654012960500889)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012928253126)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012960415389", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/47', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>451, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012992368410", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012992688984", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013008492993)
expect(envelopes[0].status[:last_timetoken]).to eq(14654012960500889)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654012992688984", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>453, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012992963610", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012993285436", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013008492993)
expect(envelopes[1].status[:last_timetoken]).to eq(14654012960500889)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654012993285436", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>455, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012993560400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012993885634", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013008492993)
expect(envelopes[2].status[:last_timetoken]).to eq(14654012960500889)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654012993885634", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>457, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654012994163088", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654012994484207", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013008492993)
expect(envelopes[3].status[:last_timetoken]).to eq(14654012960500889)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654012994484207", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401300, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013007472420", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013008492993)
expect(envelopes[4].status[:last_timetoken]).to eq(14654012960500889)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401300, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013007472420", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401300, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/43', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>459, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013024743270", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013025069712", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013026931242)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013008492993)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013025069712", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>461, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013025336990", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013025661088", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013026931242)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013008492993)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013025661088", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>463, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013025935832", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013026256947", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013026931242)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013008492993)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013026256947", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>465, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013026528770", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013026846387", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013026931242)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013008492993)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013026846387", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/45', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>467, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013057059588", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013057385286", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013070707681)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013026931242)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013057385286", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>469, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013057656550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013057978349", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013070707681)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013026931242)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013057978349", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>471, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013058253750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013058574767", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013070707681)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013026931242)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013058574767", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>473, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013058867462", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013059184748", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013070707681)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013026931242)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013059184748", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401306, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013062820718", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013070707681)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013026931242)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401306, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013062820718", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401306, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401307, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013070317393", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013070707681)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013026931242)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401307, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013070317393", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401307, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/41', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>475, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013089381142", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013089701178", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013103063679)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013070707681)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013089701178", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>477, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013089970220", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013090287569", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013103063679)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013070707681)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013090287569", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>479, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013090555400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013090872097", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013103063679)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013070707681)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013090872097", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>481, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013091146722", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013091472485", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013103063679)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013070707681)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013091472485", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401310, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013100243056", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013103063679)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013070707681)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401310, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013100243056", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401310, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401310, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013102670274", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013103063679)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013070707681)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401310, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013102670274", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401310, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/37', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>483, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013123874280", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013124196139", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013148062360)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013103063679)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013124196139", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>485, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013124471738", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013124810118", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013148062360)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013103063679)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013124810118", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>487, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013125091750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013125413846", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013148062360)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013103063679)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013125413846", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>489, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013125690450", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013126021553", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013148062360)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013103063679)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013126021553", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401313, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013133189546", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013148062360)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013103063679)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401313, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013133189546", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401313, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401314, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013147670106", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013148062360)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013103063679)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401314, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013147670106", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401314, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/39', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>491, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013156381860", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013156701907", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013172360009)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013148062360)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013156701907", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>493, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013156982688", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013157305269", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013172360009)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013148062360)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013157305269", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>495, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013157597150", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013157921954", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013172360009)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013148062360)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013157921954", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>497, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013158192958", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013158517577", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013172360009)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013148062360)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013158517577", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401316, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013163823597", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013172360009)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013148062360)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401316, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013163823597", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401316, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401317, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013170755181", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013172360009)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013148062360)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401317, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013170755181", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401317, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/53', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>499, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013188706880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013189029032", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013200116061)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013172360009)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013189029032", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>501, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013189292622", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013189615620", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013200116061)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013172360009)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013189615620", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>503, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013189887790", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013190209702", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013200116061)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013172360009)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013190209702", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401319, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013198143452", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013200116061)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013172360009)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401319, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013198143452", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401319, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/49', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>505, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013221058690", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013221388721", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013236893332)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013200116061)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013221388721", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>507, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013221664730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013221982651", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013236893332)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013200116061)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013221982651", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>509, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013222255390", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013222573774", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013236893332)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013200116061)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013222573774", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401323, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013234915959", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013236893332)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013200116061)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401323, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013234915959", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401323, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/51', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>511, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013253770658", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013254096471", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013268635013)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013236893332)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013254096471", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>513, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013254387068", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013254713703", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013268635013)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013236893332)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013254713703", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>515, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013254994838", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013255337349", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013268635013)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013236893332)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013255337349", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401326, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013264062860", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013268635013)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013236893332)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401326, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013264062860", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401326, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401326, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013267669633", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013268635013)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013236893332)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401326, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013267669633", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401326, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/29', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>517, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013286713410", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013287036336", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013287036336", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>519, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013287329578", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013287655091", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013287655091", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>521, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013287934580", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013288262475", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013288262475", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>523, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013288543140", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013288872610", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013288872610", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401329, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013297057039", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401329, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013297057039", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401329, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401329, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013297057039", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401329, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013297057039", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401329, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401330, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013301240189", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401330, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013301240189", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401330, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401330, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013301240189", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013302015735)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013255422984)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401330, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013301240189", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401330, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/25', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>525, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013324006920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013324329936", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013324329936", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>527, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013324616380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013324947450", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013324947450", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>529, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013325238560", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013325561557", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013325561557", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>531, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013325849320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013326174654", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013326174654", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013333267233", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013333267233", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401333, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013333267233", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013333267233", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401333, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013338519261", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013338519261", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401333, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013338519261", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401333, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013338519261", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401333, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401334, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013341065773", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[8].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401334, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013341065773", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401334, :state=>nil, :occupancy=>2}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401334, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013341065773", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654013341839806)
expect(envelopes[9].status[:last_timetoken]).to eq(14654013302015735)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401334, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013341065773", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401334, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/27', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>533, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013356453300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013356778472", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013370768653)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013341839806)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013356778472", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>535, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013357055160", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013357378459", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013370768653)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013341839806)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013357378459", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>537, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013357661250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013357986226", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013370768653)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013341839806)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013357986226", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>539, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013358274400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013358591743", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013370768653)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013341839806)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013358591743", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401336, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013370060341", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013370768653)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013341839806)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401336, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013370060341", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401336, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401336, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013370060341", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013370768653)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013341839806)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401336, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013370060341", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401336, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/23', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>541, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013389148450", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013389481070", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013389481070", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>543, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013389775420", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013390101959", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013390101959", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>545, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013390514100", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013390836858", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013390836858", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>547, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013391130062", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013391458446", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013391458446", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401339, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013399698588", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401339, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013399698588", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401339, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401339, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013399698588", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401339, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013399698588", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401339, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401340, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013402630915", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401340, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013402630915", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401340, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401340, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013402630915", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013403023356)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013370768653)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401340, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013402630915", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401340, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/19', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>549, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013421973200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013422294756", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013422294756", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>551, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013422590962", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013422913786", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013422913786", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>553, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013423622730", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013423945634", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013423945634", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>555, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013424422478", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013424749934", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013424749934", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013430360065", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013430360065", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401343, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013430360065", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013430360065", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401343, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013435981867", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013435981867", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401343, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013435981867", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013436374268)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013403023356)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401343, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013435981867", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401343, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/21', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>557, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013454330922", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013454649827", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013454649827", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>559, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013454918442", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013455240666", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013455240666", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>561, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013455513192", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013455832541", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013455832541", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>563, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013456101520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013456423897", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013456423897", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013462263223", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013462263223", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401346, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013462263223", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013462263223", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401346, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013468721062", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013468721062", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401346, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013468721062", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013469466513)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013436374268)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401346, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013468721062", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401346, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/35', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>565, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013486624770", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013486944485", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013486944485", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>567, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013487227900", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013487547393", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013487547393", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>569, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013487827800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013488152560", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013488152560", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013495642337", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013495642337", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401349, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013495642337", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013495642337", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401349, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013499362001", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013499362001", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401349, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013499362001", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013499754296)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013469466513)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401349, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013499362001", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401349, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/31', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>571, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013518959392", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013519281132", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013519281132", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>573, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013519561658", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013519881709", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013519881709", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>575, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013520227918", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013520546886", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013520546886", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401352, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013525549612", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401352, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013525549612", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401352, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401352, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013525549612", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401352, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013525549612", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401352, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013532721734", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013532721734", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401353, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013532721734", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013532721734", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401353, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013533679027", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013533679027", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401353, :state=>nil, :occupancy=>2}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013533679027", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654013535415683)
expect(envelopes[8].status[:last_timetoken]).to eq(14654013499754296)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401353, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013533679027", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401353, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/33', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>577, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013551486750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013551807613", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013566520060)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013535415683)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013551807613", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>579, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013552078590", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013552396501", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013566520060)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013535415683)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013552396501", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>581, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013552671658", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013552990028", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013566520060)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013535415683)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013552990028", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401356, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013565283176", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013566520060)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013535415683)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401356, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013565283176", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401356, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401356, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013565283176", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013566520060)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013535415683)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401356, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013565283176", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401356, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/65', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>583, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013583781572", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013584111608", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013597749374)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013566520059)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013584111608", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>585, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013584376278", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013584698680", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013597749374)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013566520059)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013584698680", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>587, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013584972470", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013585296575", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013597749374)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013566520059)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013585296575", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>589, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013585570250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013585888115", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013597749374)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013566520059)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013585888115", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013597033294", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013597749374)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013566520059)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401359, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013597033294", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401359, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/61', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>591, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013616110290", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013616434783", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013631263724)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013597749374)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013616434783", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>593, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013616709618", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013617032962", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013631263724)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013597749374)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013617032962", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>595, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013617303600", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013617624065", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013631263724)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013597749374)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013617624065", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>597, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013617895848", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013618218761", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013631263724)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013597749374)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013618218761", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401362, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013621798199", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013631263724)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013597749374)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401362, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013621798199", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401362, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401363, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013630487474", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013631263724)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013597749374)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401363, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013630487474", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401363, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/63', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>599, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013648485330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013648805547", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013665929181)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013631263724)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013648805547", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>601, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013649086342", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013649406497", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013665929181)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013631263724)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013649406497", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>603, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013649686880", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013650004227", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013665929181)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013631263724)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013650004227", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>605, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013650282030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013650607653", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013665929181)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013631263724)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013650607653", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401365, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013655898683", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013665929181)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013631263724)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401365, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013655898683", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401365, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401366, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013664459609", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013665929181)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013631263724)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401366, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013664459609", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401366, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/59', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>607, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013680839470", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013681160343", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013688960003)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013665929181)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013681160343", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>609, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013681441810", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013681763260", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013688960003)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013665929181)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013681763260", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>611, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013682045910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013682366043", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013688960003)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013665929181)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013682366043", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>613, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013682638070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013682967375", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013688960003)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013665929181)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013682967375", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401368, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013688596031", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013688960003)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013665929181)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401368, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013688596031", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401368, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/55', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>615, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013713192510", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013713515309", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013727625364)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013688960003)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013713515309", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>617, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013713790520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013714108883", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013727625364)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013688960003)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013714108883", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>619, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013714383472", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013714702565", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013727625364)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013688960003)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013714702565", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>621, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013714975582", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013715294331", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013727625364)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013688960003)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013715294331", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013727233060", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013727625364)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013688960003)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401372, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013727233060", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401372, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/57', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>623, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013745541940", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013745866769", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013762416171)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013727625364)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013745866769", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>625, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013746142920", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013746461788", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013762416171)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013727625364)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013746461788", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>627, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013746740338", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013747058147", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013762416171)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013727625364)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013747058147", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>629, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013747344250", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013747663316", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013762416171)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013727625364)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013747663316", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013751406261", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013762416171)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013727625364)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401375, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013751406261", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401375, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013760992509", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013762416171)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013727625364)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401376, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013760992509", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401376, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/71', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>631, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013778369128", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013778694282", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013787359038)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013762416171)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013778694282", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>633, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013778969430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013779292082", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013787359038)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013762416171)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013779292082", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>635, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013779578200", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013779902523", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013787359038)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013762416171)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013779902523", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401378, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013786583644", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013787359038)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013762416171)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401378, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013786583644", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401378, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/67', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>637, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013810747170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013811081656", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013825285102)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013787359038)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013811081656", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>639, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013811363650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013811682337", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013825285102)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013787359038)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013811682337", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>641, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013811965498", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013812284875", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013825285102)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013787359038)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013812284875", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013824574417", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013825285102)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013787359038)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401382, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013824574417", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401382, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/69', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>643, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013849871870", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013850193772", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013864565343)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013825285102)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013850193772", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>645, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013850488630", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013850810338", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013864565343)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013825285102)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013850810338", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>647, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013851104950", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013851427199", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013864565343)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013825285102)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013851427199", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401385, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013859573485", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013864565343)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013825285102)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401385, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013859573485", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401385, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401386, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013863809903", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013864565343)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013825285102)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401386, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654013863809903", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401386, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/11', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>653, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013883508540", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013883828702", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013883828702", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013898609931", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013898609931", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401389, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401390, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013901599751", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401390, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013901599751", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401390, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013898609931", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013898609931", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401389, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401390, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013901599751", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401390, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013901599751", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401390, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>649, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013882287910", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013882615622", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013882615622", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013898539640", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654013898539640", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401389, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>651, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013882902138", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013883226092", :region_code=>12}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:subscribe)
expect(envelopes[7].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013883226092", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013897888097", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[8].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013897888097", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401389, :state=>nil, :occupancy=>2}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013899665771", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[9].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401389, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013899665771", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401389, :state=>nil, :occupancy=>1}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>655, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013884120472", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013884440867", :region_code=>12}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654013901994596)
expect(envelopes[10].status[:last_timetoken]).to eq(14654013880913487)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:subscribe)
expect(envelopes[10].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013884440867", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/7', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>657, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013914949700", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013915270097", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013915270097", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>659, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013915552918", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013915875497", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013915875497", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>661, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013916160020", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013916487592", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013916487592", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>663, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013916773892", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013917092806", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013917092806", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013922016381", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013922016381", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401392, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013922641762", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013922641762", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401392, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013922641762", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013922641762", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401392, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013929339529", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401392, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654013929339529", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401392, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013932063233", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[8].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013932063233", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401393, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013932521504", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[9].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013932521504", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401393, :state=>nil, :occupancy=>2}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013937112121", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[10].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013937112121", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401393, :state=>nil, :occupancy=>1}})


expect(envelopes[11].status[:code]).to eq(200)
expect(envelopes[11].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013937112121", :region_code=>1}})
expect(envelopes[11].status[:category]).to eq(:ack)
expect(envelopes[11].status[:auto_retried]).to eq(true)
expect(envelopes[11].status[:current_timetoken]).to eq(14654013937884476)
expect(envelopes[11].status[:last_timetoken]).to eq(14654013901994596)
expect(envelopes[11].status[:subscribed_channels]).to eq([])
expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[11].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[11].result[:code]).to eq(200)
expect(envelopes[11].result[:operation]).to eq(:presence)
expect(envelopes[11].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401393, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013937112121", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401393, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/9', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>665, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013947599640", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013947935997", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013947935997", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>667, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013948222180", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013948545672", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013948545672", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401394, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013947508172", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401394, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654013947508172", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401394, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>669, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013948829010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013949156001", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013949156001", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>671, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013949441040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013949760798", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013949760798", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401395, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013953764576", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401395, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013953764576", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401395, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401395, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013953764576", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401395, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013953764576", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401395, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401396, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013961644453", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401396, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013961644453", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401396, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401396, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013966738862", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[8].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401396, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013966738862", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401396, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401396, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013966738862", :region_code=>2}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654013967131509)
expect(envelopes[9].status[:last_timetoken]).to eq(14654013937884476)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401396, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013966738862", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401396, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/5', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>673, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013979993480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013980316396", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[0].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654013980316396", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>675, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013980603010", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013980924548", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[1].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654013980924548", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>677, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013981207490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013981528871", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[2].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654013981528871", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>679, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654013981812632", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654013982134478", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[3].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654013982134478", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401398, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013986806645", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[4].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401398, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013986806645", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401398, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401398, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013986806645", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[5].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401398, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654013986806645", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401398, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401398, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013987465706", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[6].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401398, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013987465706", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401398, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401399, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013994508919", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[7].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401399, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654013994508919", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401399, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401399, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013997418017", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[8].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401399, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013997418017", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401399, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401399, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654013998506931", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[9].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401399, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654013998506931", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401399, :state=>nil, :occupancy=>2}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401400, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014002274764", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[10].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401400, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014002274764", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401400, :state=>nil, :occupancy=>1}})


expect(envelopes[11].status[:code]).to eq(200)
expect(envelopes[11].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401400, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014002274764", :region_code=>1}})
expect(envelopes[11].status[:category]).to eq(:ack)
expect(envelopes[11].status[:auto_retried]).to eq(true)
expect(envelopes[11].status[:current_timetoken]).to eq(14654014003049792)
expect(envelopes[11].status[:last_timetoken]).to eq(14654013967131509)
expect(envelopes[11].status[:subscribed_channels]).to eq([])
expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[11].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[11].result[:code]).to eq(200)
expect(envelopes[11].result[:operation]).to eq(:presence)
expect(envelopes[11].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401400, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014002274764", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401400, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/1', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401401, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014011806945", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401401, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014011806945", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401401, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>681, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014012803462", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014013133426", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014013133426", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>683, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014013410308", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014013728750", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014013728750", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>685, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014014006788", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014014326981", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014014326981", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>687, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014014591820", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014014911546", :region_code=>12}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[4].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:subscribe)
expect(envelopes[4].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014014911546", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401402, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014023287600", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[5].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401402, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014023287600", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401402, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401402, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014023287600", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[6].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401402, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014023287600", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401402, :state=>nil, :occupancy=>2}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401402, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014028016724", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[7].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401402, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014028016724", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401402, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014031069490", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[8].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014031069490", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401403, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014031069490", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[9].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014031069490", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401403, :state=>nil, :occupancy=>1}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014032176278", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[10].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014032176278", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401403, :state=>nil, :occupancy=>2}})


expect(envelopes[11].status[:code]).to eq(200)
expect(envelopes[11].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014032176278", :region_code=>1}})
expect(envelopes[11].status[:category]).to eq(:ack)
expect(envelopes[11].status[:auto_retried]).to eq(true)
expect(envelopes[11].status[:current_timetoken]).to eq(14654014032949861)
expect(envelopes[11].status[:last_timetoken]).to eq(14654014003049792)
expect(envelopes[11].status[:subscribed_channels]).to eq([])
expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[11].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[11].result[:code]).to eq(200)
expect(envelopes[11].result[:operation]).to eq(:presence)
expect(envelopes[11].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401403, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014032176278", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401403, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/3', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>689, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014045286632", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014045608872", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014045608872", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>691, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014045893590", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014046213751", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014046213751", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>693, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014046485550", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014046807370", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014046807370", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>695, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014047095292", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014047419902", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014047419902", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401405, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014055567433", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[4].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401405, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014055567433", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401405, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401405, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014059775565", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[5].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401405, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014059775565", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401405, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014063560768", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[6].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014063560768", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401406, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014066597633", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[7].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014066597633", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401406, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014066597633", :region_code=>1}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[8].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014066597633", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401406, :state=>nil, :occupancy=>1}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014067465014", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[9].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014067465014", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401406, :state=>nil, :occupancy=>2}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014067465014", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654014069546867)
expect(envelopes[10].status[:last_timetoken]).to eq(14654014032949861)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401406, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014067465014", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401406, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/17', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>701, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014078903072", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014079222820", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014079222820", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401409, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014093971052", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401409, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014093971052", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401409, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401409, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014093971052", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401409, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014093971052", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401409, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>697, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014077654678", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014077982507", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014077982507", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401408, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014086408555", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[4].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401408, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014086408555", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401408, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401409, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014090416885", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[5].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401409, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014090416885", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401409, :state=>nil, :occupancy=>1}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>699, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014078270158", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014078603674", :region_code=>12}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[6].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:subscribe)
expect(envelopes[6].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014078603674", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401408, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014085670300", :region_code=>1}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654014094364149)
expect(envelopes[7].status[:last_timetoken]).to eq(14654014076286995)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401408, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014085670300", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401408, :state=>nil, :occupancy=>2}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/13', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>703, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014117134268", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014117455965", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014117455965", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>705, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014117744170", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014118068545", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014118068545", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>707, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014118360642", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014118689473", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014118689473", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401412, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014125723136", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401412, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014125723136", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401412, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401412, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014125772772", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[4].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401412, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014125772772", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401412, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401412, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014125772772", :region_code=>2}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[5].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401412, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014125772772", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401412, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014131046884", :region_code=>1}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[6].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014131046884", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401413, :state=>nil, :occupancy=>1}})


expect(envelopes[7].status[:code]).to eq(200)
expect(envelopes[7].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014133806837", :region_code=>2}})
expect(envelopes[7].status[:category]).to eq(:ack)
expect(envelopes[7].status[:auto_retried]).to eq(true)
expect(envelopes[7].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[7].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[7].status[:subscribed_channels]).to eq([])
expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[7].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[7].result[:code]).to eq(200)
expect(envelopes[7].result[:operation]).to eq(:presence)
expect(envelopes[7].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014133806837", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401413, :state=>nil, :occupancy=>1}})


expect(envelopes[8].status[:code]).to eq(200)
expect(envelopes[8].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014133929432", :region_code=>2}})
expect(envelopes[8].status[:category]).to eq(:ack)
expect(envelopes[8].status[:auto_retried]).to eq(true)
expect(envelopes[8].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[8].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[8].status[:subscribed_channels]).to eq([])
expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[8].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[8].result[:code]).to eq(200)
expect(envelopes[8].result[:operation]).to eq(:presence)
expect(envelopes[8].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014133929432", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401413, :state=>nil, :occupancy=>2}})


expect(envelopes[9].status[:code]).to eq(200)
expect(envelopes[9].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014138543333", :region_code=>1}})
expect(envelopes[9].status[:category]).to eq(:ack)
expect(envelopes[9].status[:auto_retried]).to eq(true)
expect(envelopes[9].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[9].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[9].status[:subscribed_channels]).to eq([])
expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[9].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[9].result[:code]).to eq(200)
expect(envelopes[9].result[:operation]).to eq(:presence)
expect(envelopes[9].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014138543333", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401413, :state=>nil, :occupancy=>1}})


expect(envelopes[10].status[:code]).to eq(200)
expect(envelopes[10].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014138543333", :region_code=>1}})
expect(envelopes[10].status[:category]).to eq(:ack)
expect(envelopes[10].status[:auto_retried]).to eq(true)
expect(envelopes[10].status[:current_timetoken]).to eq(14654014140555669)
expect(envelopes[10].status[:last_timetoken]).to eq(14654014094364149)
expect(envelopes[10].status[:subscribed_channels]).to eq([])
expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[10].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[10].result[:code]).to eq(200)
expect(envelopes[10].result[:operation]).to eq(:presence)
expect(envelopes[10].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401413, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014138543333", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401413, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/15', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>709, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014149619960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014149940970", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014149940970", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>711, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014150227342", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014150555216", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014150555216", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>713, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014150843060", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014151248843", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014151248843", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014160111970", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654014160111970", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401416, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014161125310", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[4].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014161125310", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401416, :state=>nil, :occupancy=>2}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*", :payload=>{"action"=>"join", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014161125310", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[5].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014161125310", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401416, :state=>nil, :occupancy=>2}})


expect(envelopes[6].status[:code]).to eq(200)
expect(envelopes[6].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014163146849", :region_code=>2}})
expect(envelopes[6].status[:category]).to eq(:ack)
expect(envelopes[6].status[:auto_retried]).to eq(true)
expect(envelopes[6].status[:current_timetoken]).to eq(14654014163615238)
expect(envelopes[6].status[:last_timetoken]).to eq(14654014140555669)
expect(envelopes[6].status[:subscribed_channels]).to eq([])
expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[6].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[6].result[:code]).to eq(200)
expect(envelopes[6].result[:operation]).to eq(:presence)
expect(envelopes[6].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401416, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654014163146849", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401416, :state=>nil, :occupancy=>1}})

end
end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/83', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>719, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014183216660", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014183536836", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014184211113)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014180623513)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014183536836", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>715, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014181993930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014182317130", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014184211113)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014180623513)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014182317130", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>717, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014182612300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014182933819", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014184211113)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014180623513)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014182933819", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>721, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014183806940", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014184125703", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014184211113)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014180623513)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014184125703", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/79', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>723, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014214364070", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014214685884", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014216602737)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014184211113)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014214685884", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>725, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014214971380", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014215295542", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014216602737)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014184211113)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014215295542", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>727, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014215582778", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014215903286", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014216602737)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014184211113)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014215903286", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>729, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014216189650", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014216517746", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014216602737)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014184211113)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014216517746", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/81', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>731, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014246735320", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014247055459", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014248929388)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014216602737)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014247055459", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>733, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014247336680", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014247657633", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014248929388)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014216602737)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014247657633", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>735, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014247944488", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014248266396", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014248929388)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014216602737)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014248266396", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>737, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014248552750", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014248872868", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014248929388)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014216602737)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014248872868", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/77', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>739, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014279141882", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014279463232", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014281390255)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014248929388)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014279463232", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>741, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014279755430", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014280084888", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014281390255)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014248929388)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014280084888", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>743, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014280371520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014280694724", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014281390255)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014248929388)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014280694724", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>745, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014280982800", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014281304691", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014281390255)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014248929388)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014281304691", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/73', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>747, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014311489930", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014311808929", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014313716856)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014281390255)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014311808929", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>749, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014312095912", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014312416476", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014313716856)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014281390255)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014312416476", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>751, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014312703390", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014313028437", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014313716856)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014281390255)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014313028437", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>753, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014313309040", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014313631535", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014313716856)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014281390255)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014313631535", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/75', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>755, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014343846972", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014344182746", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014346832916)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014313716856)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014344182746", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>757, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014344468110", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014345532530", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014346832916)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014313716856)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014345532530", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>759, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014345818088", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014346138251", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014346832916)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014313716856)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014346138251", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>761, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014346428202", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014346749609", :region_code=>12}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014346832916)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014313716856)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:subscribe)
expect(envelopes[3].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014346749609", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/89', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>763, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014376171300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014376490334", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014377764154)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014346222410)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014376490334", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>765, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014376774772", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014377103838", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014377764154)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014346222410)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014377103838", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>767, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014377377720", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014377699362", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014377764154)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014346222410)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014377699362", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/85', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>769, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014410078468", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014410397614", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014411700191)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014377764154)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014410397614", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>771, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014410683000", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014411005224", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014411700191)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014377764154)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014411005224", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>773, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014411292300", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014411614875", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014411700191)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014377764154)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014411614875", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/87', record: :none) do
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0", :subscription_match=>"demo0", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>775, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014446931222", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014447251328", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014448560455)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014411700191)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo0", :actual_channel=>"demo0", :publish_time_object=>{:timetoken=>"14654014447251328", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1", :subscription_match=>"demo1", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>777, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014447533948", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014447858880", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014448560455)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014411700191)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo1", :actual_channel=>"demo1", :publish_time_object=>{:timetoken=>"14654014447858880", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.ruby", :subscription_match=>"demo.*", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>779, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014448151382", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014448475627", :region_code=>12}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014448560455)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014411700191)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:subscribe)
expect(envelopes[2].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo.*", :actual_channel=>"demo.ruby", :publish_time_object=>{:timetoken=>"14654014448475627", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/407', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>781, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014479285938", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014479606460", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014493414244)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014346832916)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014479606460", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401449, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014492639682", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014493414244)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014346832916)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401449, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014492639682", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401449, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/403', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>783, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014511676640", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014511995782", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014523644536)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014493414244)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014511995782", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401451, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014518780371", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014523644536)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014493414244)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401451, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014518780371", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401451, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401452, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014523254496", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014523644536)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014493414244)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401452, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014523254496", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401452, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/405', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>785, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014544536908", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014544860041", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014556451411)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014523644536)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014544860041", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401455, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014550558090", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014556451411)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014523644536)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401455, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014550558090", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401455, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401455, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014556057730", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014556451411)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014523644536)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401455, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014556057730", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401455, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/401', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>787, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014576765398", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014577086581", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014588668761)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014556521384)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014577086581", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401458, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014583519699", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014588668761)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014556521384)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401458, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014583519699", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401458, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401458, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014588229665", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014588668761)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014556521384)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401458, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014588229665", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401458, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/397', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>789, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014608943210", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014609265148", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014620908167)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014588668761)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014609265148", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401461, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014616174182", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014620908167)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014588668761)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401461, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014616174182", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401461, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401462, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014620452897", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014620908167)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014588668761)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401462, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014620452897", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401462, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/399', record: :none) do
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>791, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014641080530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014641409099", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014653139427)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014620908167)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014641409099", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401464, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014648852359", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014653139427)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014620908167)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401464, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014648852359", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401464, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401465, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014652655287", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014653139427)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014620908167)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401465, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014652655287", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401465, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/413', record: :none) do
@pubnub.subscribe(presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465401468, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014682111332", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014682884926)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014653139427)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401468, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014682111332", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401468, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/409', record: :none) do
@pubnub.subscribe(presence: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401471, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014716171953", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014716613318)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014682884926)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401471, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014716171953", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401471, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/411', record: :none) do
@pubnub.subscribe(presence: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465401474, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014742440386", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014750223741)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014716613318)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401474, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014742440386", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401474, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401474, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014749369985", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014750223741)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014716613318)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401474, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654014749369985", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401474, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/389', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401478, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014780856651", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014781303099)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014768082110)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401478, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014780856651", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401478, :state=>nil, :occupancy=>1}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>793, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014769391400", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014769716564", :region_code=>12}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014781303099)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014768082110)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:subscribe)
expect(envelopes[1].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014769716564", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/385', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>795, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014803063490", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014803384135", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014816784729)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014781303099)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014803384135", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401480, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014809079522", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014816784729)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014781303099)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401480, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014809079522", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401480, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401481, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014816019230", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014816784729)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014781303099)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401481, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014816019230", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401481, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/387', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>797, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014835206608", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014835525797", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014847159486)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014816784729)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014835525797", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401484, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014844280212", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014847159486)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014816784729)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401484, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014844280212", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401484, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401484, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014846675009", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014847159486)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014816784729)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401484, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014846675009", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401484, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/383', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>799, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014867386580", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014867715911", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014882913608)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014847159486)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014867715911", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401487, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014873099850", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014882913608)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014847159486)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401487, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014873099850", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401487, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401487, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014879976715", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654014882913608)
expect(envelopes[2].status[:last_timetoken]).to eq(14654014847159486)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401487, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014879976715", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401487, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401488, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014881064447", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654014882913608)
expect(envelopes[3].status[:last_timetoken]).to eq(14654014847159486)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401488, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014881064447", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401488, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/379', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>801, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014899567480", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014899892352", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014899895984)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014882913608)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014899892352", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/381', record: :none) do
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>803, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654014931672198", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654014931997717", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014944445943)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014899895984)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654014931997717", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401494, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014943522062", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014944445943)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014899895984)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401494, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014943522062", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401494, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/395', record: :none) do
@pubnub.subscribe(presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465401497, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014970736098", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654014975133404)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014944445943)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401497, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014970736098", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401497, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401497, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654014974678833", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654014975133404)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014944445943)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401497, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654014974678833", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401497, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/391', record: :none) do
@pubnub.subscribe(presence: 'demo.*', http_sync: true)
envelopes = @pubnub.subscribe(presence: 'demo.*', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465401500, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015001626827", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015009334397)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014975133404)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401500, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015001626827", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401500, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401500, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015007813357", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015009334397)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014975133404)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401500, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015007813357", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401500, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/393', record: :none) do
@pubnub.subscribe(presence: 'demo.*', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: 'demo.*', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465401503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015036092426", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015039793156)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015009334397)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015036092426", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401503, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015039324618", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015039793156)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015009334397)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401503, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015039324618", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401503, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: 'demo.*', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/425', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>805, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015060594208", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015060916608", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015072585871)
expect(envelopes[0].status[:last_timetoken]).to eq(14654014931920583)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015060916608", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401507, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015072102194", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015072585871)
expect(envelopes[1].status[:last_timetoken]).to eq(14654014931920583)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401507, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015072102194", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401507, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/421', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>807, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015092758960", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015093083507", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015106315224)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015072585871)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015093083507", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015096823711", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015106315224)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015072585871)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401509, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015096823711", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401509, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401510, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015105391413", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015106315224)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015072585871)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401510, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015105391413", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401510, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/423', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>809, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015124915710", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015125237367", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015137512852)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015106315224)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015125237367", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015130863913", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015137512852)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015106315224)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015130863913", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401513, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015136663046", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015137512852)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015106315224)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401513, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015136663046", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401513, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/419', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>811, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015157057530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015157385637", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015169008844)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015137512852)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015157385637", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015162343585", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015169008844)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015137512852)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015162343585", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401516, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015168535964", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015169008844)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015137512852)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401516, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015168535964", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401516, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/415', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>813, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015189244210", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015189574214", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015204152098)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015169008844)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015189574214", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401519, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015194247863", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015204152098)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015169008844)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401519, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015194247863", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401519, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015201857257", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015204152098)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015169008844)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401520, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015201857257", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401520, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/417', record: :none) do
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>815, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015221339982", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015221668837", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015229268074)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015204152098)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015221668837", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>"demo-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401522, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015228414236", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015229268074)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015204152098)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401522, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015228414236", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401522, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/431', record: :none) do
@pubnub.subscribe(presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401526, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015267070920", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015268058454)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015229268074)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401526, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015267070920", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401526, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/427', record: :none) do
@pubnub.subscribe(presence: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"join", "timestamp"=>1465401529, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015294515511", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015294901390)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015268058454)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401529, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015294515511", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401529, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/429', record: :none) do
@pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo-pnpres", :subscription_match=>nil, :payload=>{"action"=>"leave", "timestamp"=>1465401533, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015331326547", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015332175028)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015294901390)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401533, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo-pnpres", :actual_channel=>"demo-pnpres", :publish_time_object=>{:timetoken=>"14654015331326547", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401533, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/371', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401535, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015357621355", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015371018449)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015350131755)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401535, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015357621355", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401535, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401537, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015370173222", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015371018449)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015350131755)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401537, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015370173222", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401537, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401536, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015362974886", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015371018449)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015350131755)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401536, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015362974886", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401536, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401536, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015363724753", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015371018449)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015350131755)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401536, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015363724753", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401536, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401536, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015367117735", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654015371018449)
expect(envelopes[4].status[:last_timetoken]).to eq(14654015350131755)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401536, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015367117735", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401536, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>817, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015351458530", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015351777713", :region_code=>12}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654015371018449)
expect(envelopes[5].status[:last_timetoken]).to eq(14654015350131755)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:subscribe)
expect(envelopes[5].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015351777713", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/367', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>819, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015383712692", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015384033959", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015397892101)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015371018449)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015384033959", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401539, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015391991823", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015397892101)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015371018449)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401539, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015391991823", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401539, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401539, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015392714557", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015397892101)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015371018449)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401539, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015392714557", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401539, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401539, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015397026916", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015397892101)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015371018449)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401539, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015397026916", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401539, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/369', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>821, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015415921220", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015416242756", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015442083940)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015397892101)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015416242756", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401543, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015433433253", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015442083940)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015397892101)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401543, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015433433253", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401543, :state=>nil, :occupancy=>1}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401543, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015433589431", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015442083940)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015397892101)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401543, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015433589431", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401543, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401543, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015439360606", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015442083940)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015397892101)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401543, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015439360606", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401543, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401544, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015441257316", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654015442083940)
expect(envelopes[4].status[:last_timetoken]).to eq(14654015397892101)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401544, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015441257316", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401544, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/365', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>823, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015448082090", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015448400748", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015466524002)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015442083940)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015448400748", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401545, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015455144489", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015466524002)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015442083940)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401545, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015455144489", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401545, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401546, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015460703749", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015466524002)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015442083940)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401546, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015460703749", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401546, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401546, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015462269303", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015466524002)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015442083940)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401546, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015462269303", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401546, :state=>nil, :occupancy=>2}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401546, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015466070130", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654015466524002)
expect(envelopes[4].status[:last_timetoken]).to eq(14654015442083940)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401546, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015466070130", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401546, :state=>nil, :occupancy=>2}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/361', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>825, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015480239330", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015480567536", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015498860686)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015466524002)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015480567536", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401548, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015484538015", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015498860686)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015466524002)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401548, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015484538015", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401548, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401549, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015493548253", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015498860686)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015466524002)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401549, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015493548253", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401549, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401549, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015496656867", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015498860686)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015466524002)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401549, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015496656867", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401549, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/363', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>827, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015512415030", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015512736727", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015531879055)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015498860686)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015512736727", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401551, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015519379379", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015531879055)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015498860686)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401551, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015519379379", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401551, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401552, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015520266923", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015531879055)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015498860686)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401552, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015520266923", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401552, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401552, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015523946935", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015531879055)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015498860686)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401552, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015523946935", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401552, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401552, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015528009004", :region_code=>1}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654015531879055)
expect(envelopes[4].status[:last_timetoken]).to eq(14654015498860686)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401552, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015528009004", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401552, :state=>nil, :occupancy=>1}})


expect(envelopes[5].status[:code]).to eq(200)
expect(envelopes[5].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401553, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015531057372", :region_code=>1}})
expect(envelopes[5].status[:category]).to eq(:ack)
expect(envelopes[5].status[:auto_retried]).to eq(true)
expect(envelopes[5].status[:current_timetoken]).to eq(14654015531879055)
expect(envelopes[5].status[:last_timetoken]).to eq(14654015498860686)
expect(envelopes[5].status[:subscribed_channels]).to eq([])
expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[5].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[5].result[:code]).to eq(200)
expect(envelopes[5].result[:operation]).to eq(:presence)
expect(envelopes[5].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401553, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015531057372", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401553, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/377', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401554, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015549303532", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015559959819)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015531879055)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401554, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015549303532", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401554, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401554, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015549312742", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015559959819)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015531879055)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401554, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015549312742", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401554, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401555, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015550061589", :region_code=>2}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015559959819)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015531879055)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401555, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015550061589", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401555, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401555, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015555461779", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015559959819)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015531879055)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401555, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015555461779", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401555, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401555, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015559166546", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654015559959819)
expect(envelopes[4].status[:last_timetoken]).to eq(14654015531879055)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401555, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015559166546", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401555, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/373', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401558, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015587280060", :region_code=>2}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015602089887)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015559743373)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401558, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015587280060", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401558, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401558, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015587299644", :region_code=>2}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015602089887)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015559743373)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401558, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015587299644", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401558, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401559, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015593520300", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015602089887)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015559743373)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401559, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015593520300", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401559, :state=>nil, :occupancy=>1}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401559, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015598372058", :region_code=>1}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015602089887)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015559743373)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401559, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015598372058", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401559, :state=>nil, :occupancy=>1}})


expect(envelopes[4].status[:code]).to eq(200)
expect(envelopes[4].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401560, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015601695322", :region_code=>2}})
expect(envelopes[4].status[:category]).to eq(:ack)
expect(envelopes[4].status[:auto_retried]).to eq(true)
expect(envelopes[4].status[:current_timetoken]).to eq(14654015602089887)
expect(envelopes[4].status[:last_timetoken]).to eq(14654015559743373)
expect(envelopes[4].status[:subscribed_channels]).to eq([])
expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[4].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[4].result[:code]).to eq(200)
expect(envelopes[4].result[:operation]).to eq(:presence)
expect(envelopes[4].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401560, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015601695322", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401560, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/375', record: :none) do
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo1-pnpres", :subscription_match=>"demo1-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015620751266", :region_code=>1}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015625161976)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015602089887)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:presence)
expect(envelopes[0].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo1-pnpres", :actual_channel=>"demo1-pnpres", :publish_time_object=>{:timetoken=>"14654015620751266", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401562, :state=>nil, :occupancy=>2}})


expect(envelopes[1].status[:code]).to eq(200)
expect(envelopes[1].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015621468144", :region_code=>1}})
expect(envelopes[1].status[:category]).to eq(:ack)
expect(envelopes[1].status[:auto_retried]).to eq(true)
expect(envelopes[1].status[:current_timetoken]).to eq(14654015625161976)
expect(envelopes[1].status[:last_timetoken]).to eq(14654015602089887)
expect(envelopes[1].status[:subscribed_channels]).to eq([])
expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[1].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[1].result[:code]).to eq(200)
expect(envelopes[1].result[:operation]).to eq(:presence)
expect(envelopes[1].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015621468144", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401562, :state=>nil, :occupancy=>2}})


expect(envelopes[2].status[:code]).to eq(200)
expect(envelopes[2].status[:data]).to eq({:shard=>"5", :channel=>"demo.*-pnpres", :subscription_match=>"demo.*-pnpres", :payload=>{"action"=>"join", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015621414647", :region_code=>1}})
expect(envelopes[2].status[:category]).to eq(:ack)
expect(envelopes[2].status[:auto_retried]).to eq(true)
expect(envelopes[2].status[:current_timetoken]).to eq(14654015625161976)
expect(envelopes[2].status[:last_timetoken]).to eq(14654015602089887)
expect(envelopes[2].status[:subscribed_channels]).to eq([])
expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[2].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[2].result[:code]).to eq(200)
expect(envelopes[2].result[:operation]).to eq(:presence)
expect(envelopes[2].result[:data]).to eq({:message=>{"action"=>"join", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>2}, :subscribed_channel=>"demo.*-pnpres", :actual_channel=>"demo.*-pnpres", :publish_time_object=>{:timetoken=>"14654015621414647", :region_code=>1}, :message_meta_data=>nil, :presence_event=>"join", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401562, :state=>nil, :occupancy=>2}})


expect(envelopes[3].status[:code]).to eq(200)
expect(envelopes[3].status[:data]).to eq({:shard=>"5", :channel=>"demo0-pnpres", :subscription_match=>"demo0-pnpres", :payload=>{"action"=>"leave", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :flags=>0, :issuing_client_id=>nil, :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>nil, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>nil, :publish_timetoken=>{:timetoken=>"14654015624769973", :region_code=>2}})
expect(envelopes[3].status[:category]).to eq(:ack)
expect(envelopes[3].status[:auto_retried]).to eq(true)
expect(envelopes[3].status[:current_timetoken]).to eq(14654015625161976)
expect(envelopes[3].status[:last_timetoken]).to eq(14654015602089887)
expect(envelopes[3].status[:subscribed_channels]).to eq([])
expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[3].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[3].result[:code]).to eq(200)
expect(envelopes[3].result[:operation]).to eq(:presence)
expect(envelopes[3].result[:data]).to eq({:message=>{"action"=>"leave", "timestamp"=>1465401562, "uuid"=>"ruby-test-uuid-client-two", "occupancy"=>1}, :subscribed_channel=>"demo0-pnpres", :actual_channel=>"demo0-pnpres", :publish_time_object=>{:timetoken=>"14654015624769973", :region_code=>2}, :message_meta_data=>nil, :presence_event=>"leave", :presence=>{:uuid=>"ruby-test-uuid-client-two", :timestamp=>1465401562, :state=>nil, :occupancy=>1}})

end
end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/443', record: :none) do
@pubnub.subscribe(channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel_group: :demo, http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>829, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015646219520", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015646540219", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015646623352)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015512822383)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015646540219", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/439', record: :none) do
@pubnub.subscribe(channel_group: :demo, http_sync: true)
envelopes = @pubnub.subscribe(channel_group: :demo, http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>831, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015680548680", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015680870863", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015680957046)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015646623352)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015680870863", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/441', record: :none) do
@pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>833, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015712766412", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015713102914", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015713026108)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015680952314)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015713102914", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: :demo, http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: :demo, http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/437', record: :none) do
@pubnub.subscribe(channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel_group: 'demo', http_sync: true)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>835, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015744927518", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015745249481", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015745172724)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015713026108)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015745249481", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/433', record: :none) do
@pubnub.subscribe(channel_group: 'demo', http_sync: true)
envelopes = @pubnub.subscribe(channel_group: 'demo', http_sync: true, &@callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>837, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015777064418", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015777388583", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015777393063)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015745172724)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015777388583", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/435', record: :none) do
@pubnub.subscribe(channel_group: 'demo', http_sync: true, callback: @callback)
envelopes = @pubnub.subscribe(channel_group: 'demo', http_sync: true, callback: @callback)
envelopes.each do |envelope|

expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false
end


expect(envelopes[0].status[:code]).to eq(200)
expect(envelopes[0].status[:data]).to eq({:shard=>"5", :channel=>"demo", :subscription_match=>"demo", :payload=>"+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags=>0, :issuing_client_id=>"ruby-test-uuid-client-two", :subscribe_key=>"sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f", :sequence_number=>839, :user_meta_data=>nil, :replication_map=>nil, :eat_after_reading=>nil, :waypoint_list=>nil, :origination_time_token=>{:timetoken=>"14654015809208140", :region_code=>nil}, :publish_timetoken=>{:timetoken=>"14654015809529937", :region_code=>12}})
expect(envelopes[0].status[:category]).to eq(:ack)
expect(envelopes[0].status[:auto_retried]).to eq(true)
expect(envelopes[0].status[:current_timetoken]).to eq(14654015809501035)
expect(envelopes[0].status[:last_timetoken]).to eq(14654015777393063)
expect(envelopes[0].status[:subscribed_channels]).to eq([])
expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
expect(envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})

expect(envelopes[0].result[:code]).to eq(200)
expect(envelopes[0].result[:operation]).to eq(:subscribe)
expect(envelopes[0].result[:data]).to eq({:message=>"ruby is awesome", :subscribed_channel=>"demo", :actual_channel=>"demo", :publish_time_object=>{:timetoken=>"14654015809529937", :region_code=>12}, :message_meta_data=>nil, :presence_event=>nil, :presence=>nil})

end
end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: 'demo', http_sync: false)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


it '__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key', record: :none) do
@msg_envelopes = []
@presence_envelopes = []
@status_envelopes = []
          callbacks = Pubnub::SubscribeCallback.new(
                                                   message:  ->(envelope) { @msg_envelopes      << envelope },
                                                   presence: ->(envelope) { @presence_envelopes << envelope },
                                                   status:   ->(envelope) { @status_envelopes   << envelope }
          )

@pubnub.add_listener(callback: callbacks)
@pubnub.subscribe(channel_group: 'demo', http_sync: false, callback: @callback)
end

eventually do


expect(@status_envelopes[0].status[:category]).to eq(:timeout)
expect(@status_envelopes[0].status[:error]).to eq(true)
expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
expect(@status_envelopes[0].status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end

end


end
